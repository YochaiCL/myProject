{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\userPages\\\\pages\\\\questionAnswerUser\\\\newQuestion\\\\NewQuestion.js\";\n// import React, { Component } from 'react';\n// import PageLayout from '../../../layouts/pageLayout/PageLayout';\n// import Header from '../../../../commonComponents/header/Header';\n// import style from './newQuestion.module.css';\n// import Button from '../../../../commonComponents/button/Button';\n\n// /**\n//  * Description - This class add question to the server\n//  */\n// export default class NewQuestion extends Component {\n//   state = {\n//     questionName: '',\n//     questionText: '',\n//     showResult: '',\n//   };\n\n//   /**\n//    * Description - This function add the question data to the server\n//    * @param {*} e - Question data\n//    */\n//   async handleSubmit(e) {\n//     const date = new Date();\n//     let day = date.getDate();\n//     let month = date.getMonth() + 1;\n//     let year = date.getFullYear();\n\n//     const questionDate = `${day}/${month}/${year}`;\n\n//     const userId = JSON.parse(localStorage.getItem('user'));\n\n//     const dataToSend = {\n//       userId: userId._id,\n//       userEmail: userId.email,\n//       userFullName: userId.fullName,\n//       questionName: this.state.questionName,\n//       questionText: this.state.questionText,\n//       answerText: '',\n//       haveAnAnswer: false,\n//       selectedStars: 0,\n//       questionDate,\n//     };\n\n//     e.preventDefault();\n//     const questionInputData = {\n//       method: 'POST',\n//       crossDomain: true,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Accept: 'application/json',\n//         'Accept-Control-Allow-Origin': '*',\n//       },\n//       body: JSON.stringify(dataToSend),\n//     };\n\n//     const response = await fetch(\n//       'http://localhost:5000/userQuestionAnswer/newQuestion',\n//       questionInputData\n//     );\n//     const result = await response.json();\n//     if (result.status === 'ok') {\n//       this.setState({\n//         showResult: 'The Question has been added',\n//       });\n\n//       setTimeout(() => {\n//         this.setState({\n//           questionName: '',\n//           questionText: '',\n//           showResult: '',\n//         });\n//       }, 1000);\n//     } else if (result.status === 'Question already exist') {\n//       setTimeout(() => {\n//         this.setState({\n//           showResult: 'This question name already exist',\n//         });\n//       }, 1000);\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <PageLayout>\n//         <Header h1Heading='New Question' />\n//         <section>\n//           <form onSubmit={this.handleSubmit.bind(this)} className={style.form}>\n//             <input\n//               className={style.input}\n//               type='text'\n//               placeholder='Enter Question Name:'\n//               value={this.state.questionName}\n//               required\n//               onChange={e => this.setState({ questionName: e.target.value })}\n//             />\n\n//             <textarea\n//               className={style.textArea}\n//               value={this.state.questionText}\n//               name='tarea'\n//               rows='6'\n//               cols='40'\n//               placeholder=' Write text here'\n//               required\n//               onChange={e => this.setState({ questionText: e.target.value })}\n//             ></textarea>\n\n//             <Button type='submit' text='submit' />\n//             <p className={style.showResult}>{this.state.showResult}</p>\n//           </form>\n//         </section>\n//       </PageLayout>\n//     );\n//   }\n// }\n\n//////////////////////////////\n\nimport React, { Component } from 'react';\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\nimport Header from '../../../../commonComponents/header/Header';\nimport style from './newQuestion.module.css';\nimport Button from '../../../../commonComponents/button/Button';\n\n/**\r\n * Description - This class add question to the server\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class NewQuestion extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      questionName: '',\n      questionText: '',\n      showResult: ''\n    };\n  }\n  /**\r\n   * Description - This function add the question data to the server\r\n   * @param {*} e - Question data\r\n   */\n  async handleSubmit(e) {\n    const date = new Date();\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n    const questionDate = `${day}/${month}/${year}`;\n    const userId = JSON.parse(localStorage.getItem('user'));\n    const dataToSend = {\n      userId: userId._id,\n      userEmail: userId.email,\n      userFullName: userId.fullName,\n      questionName: this.state.questionName,\n      questionText: this.state.questionText,\n      answerText: '',\n      haveAnAnswer: false,\n      selectedStars: 0,\n      questionDate\n    };\n    e.preventDefault();\n    const questionInputData = {\n      method: 'POST',\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify(dataToSend)\n    };\n    const response = await fetch('http://localhost:5000/userQuestionAnswer/newQuestion', questionInputData);\n    const result = await response.json();\n    if (result.status === 'ok') {\n      this.setState({\n        showResult: 'The Question has been added'\n      });\n      setTimeout(() => {\n        this.setState({\n          questionName: '',\n          questionText: '',\n          showResult: ''\n        });\n      }, 1000);\n    } else if (result.status === 'Question already exist') {\n      setTimeout(() => {\n        this.setState({\n          showResult: 'This question name already exist'\n        });\n      }, 1000);\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"New Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit.bind(this),\n          className: style.form,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter Question Name:\",\n            value: this.state.questionName,\n            required: true,\n            onChange: e => this.setState({\n              questionName: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: style.textArea,\n            value: this.state.questionText,\n            name: \"tarea\",\n            rows: \"6\",\n            cols: \"40\",\n            placeholder: \" Write text here\",\n            required: true,\n            onChange: e => this.setState({\n              questionText: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            text: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.showResult,\n            children: this.state.showResult\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","PageLayout","Header","style","Button","NewQuestion","state","questionName","questionText","showResult","handleSubmit","e","date","Date","day","getDate","month","getMonth","year","getFullYear","questionDate","userId","JSON","parse","localStorage","getItem","dataToSend","_id","userEmail","email","userFullName","fullName","answerText","haveAnAnswer","selectedStars","preventDefault","questionInputData","method","crossDomain","headers","Accept","body","stringify","response","fetch","result","json","status","setState","setTimeout","render","bind","form","input","target","value","textArea"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/userPages/pages/questionAnswerUser/newQuestion/NewQuestion.js"],"sourcesContent":["// import React, { Component } from 'react';\r\n// import PageLayout from '../../../layouts/pageLayout/PageLayout';\r\n// import Header from '../../../../commonComponents/header/Header';\r\n// import style from './newQuestion.module.css';\r\n// import Button from '../../../../commonComponents/button/Button';\r\n\r\n// /**\r\n//  * Description - This class add question to the server\r\n//  */\r\n// export default class NewQuestion extends Component {\r\n//   state = {\r\n//     questionName: '',\r\n//     questionText: '',\r\n//     showResult: '',\r\n//   };\r\n\r\n//   /**\r\n//    * Description - This function add the question data to the server\r\n//    * @param {*} e - Question data\r\n//    */\r\n//   async handleSubmit(e) {\r\n//     const date = new Date();\r\n//     let day = date.getDate();\r\n//     let month = date.getMonth() + 1;\r\n//     let year = date.getFullYear();\r\n\r\n//     const questionDate = `${day}/${month}/${year}`;\r\n\r\n//     const userId = JSON.parse(localStorage.getItem('user'));\r\n\r\n//     const dataToSend = {\r\n//       userId: userId._id,\r\n//       userEmail: userId.email,\r\n//       userFullName: userId.fullName,\r\n//       questionName: this.state.questionName,\r\n//       questionText: this.state.questionText,\r\n//       answerText: '',\r\n//       haveAnAnswer: false,\r\n//       selectedStars: 0,\r\n//       questionDate,\r\n//     };\r\n\r\n//     e.preventDefault();\r\n//     const questionInputData = {\r\n//       method: 'POST',\r\n//       crossDomain: true,\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         Accept: 'application/json',\r\n//         'Accept-Control-Allow-Origin': '*',\r\n//       },\r\n//       body: JSON.stringify(dataToSend),\r\n//     };\r\n\r\n//     const response = await fetch(\r\n//       'http://localhost:5000/userQuestionAnswer/newQuestion',\r\n//       questionInputData\r\n//     );\r\n//     const result = await response.json();\r\n//     if (result.status === 'ok') {\r\n//       this.setState({\r\n//         showResult: 'The Question has been added',\r\n//       });\r\n\r\n//       setTimeout(() => {\r\n//         this.setState({\r\n//           questionName: '',\r\n//           questionText: '',\r\n//           showResult: '',\r\n//         });\r\n//       }, 1000);\r\n//     } else if (result.status === 'Question already exist') {\r\n//       setTimeout(() => {\r\n//         this.setState({\r\n//           showResult: 'This question name already exist',\r\n//         });\r\n//       }, 1000);\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <PageLayout>\r\n//         <Header h1Heading='New Question' />\r\n//         <section>\r\n//           <form onSubmit={this.handleSubmit.bind(this)} className={style.form}>\r\n//             <input\r\n//               className={style.input}\r\n//               type='text'\r\n//               placeholder='Enter Question Name:'\r\n//               value={this.state.questionName}\r\n//               required\r\n//               onChange={e => this.setState({ questionName: e.target.value })}\r\n//             />\r\n\r\n//             <textarea\r\n//               className={style.textArea}\r\n//               value={this.state.questionText}\r\n//               name='tarea'\r\n//               rows='6'\r\n//               cols='40'\r\n//               placeholder=' Write text here'\r\n//               required\r\n//               onChange={e => this.setState({ questionText: e.target.value })}\r\n//             ></textarea>\r\n\r\n//             <Button type='submit' text='submit' />\r\n//             <p className={style.showResult}>{this.state.showResult}</p>\r\n//           </form>\r\n//         </section>\r\n//       </PageLayout>\r\n//     );\r\n//   }\r\n// }\r\n\r\n\r\n\r\n//////////////////////////////\r\n\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\r\nimport Header from '../../../../commonComponents/header/Header';\r\nimport style from './newQuestion.module.css';\r\nimport Button from '../../../../commonComponents/button/Button';\r\n\r\n/**\r\n * Description - This class add question to the server\r\n */\r\nexport default class NewQuestion extends Component {\r\n  state = {\r\n    questionName: '',\r\n    questionText: '',\r\n    showResult: '',\r\n  };\r\n\r\n  /**\r\n   * Description - This function add the question data to the server\r\n   * @param {*} e - Question data\r\n   */\r\n  async handleSubmit(e) {\r\n    const date = new Date();\r\n    let day = date.getDate();\r\n    let month = date.getMonth() + 1;\r\n    let year = date.getFullYear();\r\n\r\n    const questionDate = `${day}/${month}/${year}`;\r\n\r\n    const userId = JSON.parse(localStorage.getItem('user'));\r\n\r\n    const dataToSend = {\r\n      userId: userId._id,\r\n      userEmail: userId.email,\r\n      userFullName: userId.fullName,\r\n      questionName: this.state.questionName,\r\n      questionText: this.state.questionText,\r\n      answerText: '',\r\n      haveAnAnswer: false,\r\n      selectedStars: 0,\r\n      questionDate,\r\n    };\r\n\r\n    e.preventDefault();\r\n    const questionInputData = {\r\n      method: 'POST',\r\n      crossDomain: true,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'Accept-Control-Allow-Origin': '*',\r\n      },\r\n      body: JSON.stringify(dataToSend),\r\n    };\r\n\r\n    const response = await fetch(\r\n      'http://localhost:5000/userQuestionAnswer/newQuestion',\r\n      questionInputData\r\n    );\r\n    const result = await response.json();\r\n    if (result.status === 'ok') {\r\n      this.setState({\r\n        showResult: 'The Question has been added',\r\n      });\r\n\r\n      setTimeout(() => {\r\n        this.setState({\r\n          questionName: '',\r\n          questionText: '',\r\n          showResult: '',\r\n        });\r\n      }, 1000);\r\n    } else if (result.status === 'Question already exist') {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          showResult: 'This question name already exist',\r\n        });\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='New Question' />\r\n        <section>\r\n          <form onSubmit={this.handleSubmit.bind(this)} className={style.form}>\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter Question Name:'\r\n              value={this.state.questionName}\r\n              required\r\n              onChange={e => this.setState({ questionName: e.target.value })}\r\n            />\r\n\r\n            <textarea\r\n              className={style.textArea}\r\n              value={this.state.questionText}\r\n              name='tarea'\r\n              rows='6'\r\n              cols='40'\r\n              placeholder=' Write text here'\r\n              required\r\n              onChange={e => this.setState({ questionText: e.target.value })}\r\n            ></textarea>\r\n\r\n            <Button type='submit' text='submit' />\r\n            <p className={style.showResult}>{this.state.showResult}</p>\r\n          </form>\r\n        </section>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,UAAU,MAAM,wCAAwC;AAC/D,OAAOC,MAAM,MAAM,4CAA4C;AAC/D,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,MAAM,MAAM,4CAA4C;;AAE/D;AACA;AACA;AAFA;AAGA,eAAe,MAAMC,WAAW,SAASL,SAAS,CAAC;EAAA;IAAA;IAAA,KACjDM,KAAK,GAAG;MACNC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE,EAAE;MAChBC,UAAU,EAAE;IACd,CAAC;EAAA;EAED;AACF;AACA;AACA;EACE,MAAMC,YAAY,CAACC,CAAC,EAAE;IACpB,MAAMC,IAAI,GAAG,IAAIC,IAAI,EAAE;IACvB,IAAIC,GAAG,GAAGF,IAAI,CAACG,OAAO,EAAE;IACxB,IAAIC,KAAK,GAAGJ,IAAI,CAACK,QAAQ,EAAE,GAAG,CAAC;IAC/B,IAAIC,IAAI,GAAGN,IAAI,CAACO,WAAW,EAAE;IAE7B,MAAMC,YAAY,GAAI,GAAEN,GAAI,IAAGE,KAAM,IAAGE,IAAK,EAAC;IAE9C,MAAMG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}