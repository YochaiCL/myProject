{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\adminPages\\\\pages\\\\adminHome\\\\AdminHome.js\";\nimport React, { Component } from 'react';\nimport Header from '../../../commonComponents/header/Header';\nimport style from './adminHome.module.css';\nimport DiagnosticInformationLayout from '../../layouts/diagnosticInformationLayout/DiagnosticInformationLayout';\nimport PageLayout from '../../layouts/pageLayout/PageLayout';\n\n/**\r\n * Description This class show all Admin home data\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class AdminHome extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      usersData: [],\n      amountOfUsers: 0,\n      questionAnswerData: [],\n      openQuestions: 0,\n      closedQuestions: 0,\n      overallUsersRate: 0,\n      mostLearnedComp: '',\n      learnedData: []\n    };\n    this.calculateMostLearnedComponent = () => {\n      const componentCounts = {};\n      this.state.learnedData.forEach(user => {\n        Object.keys(user).forEach(component => {\n          if (user[component].haveLearned) {\n            if (componentCounts[component]) {\n              componentCounts[component]++;\n            } else {\n              componentCounts[component] = 1;\n            }\n          }\n        });\n      });\n\n      // Find the most learned component\n      let mostLearnedComponent = null;\n      let highestCount = 0;\n      for (const component in componentCounts) {\n        if (componentCounts[component] > highestCount) {\n          highestCount = componentCounts[component];\n          mostLearnedComponent = component;\n        }\n      }\n      console.log('Most learned component:', mostLearnedComponent);\n    };\n  }\n  /**\r\n   * Description - This function activate functions when the page is uploaded\r\n   */\n  async componentDidMount() {\n    await this.getQuestionAnswer();\n    this.showQuestionAnswerData();\n    this.calculateRate();\n    await this.getUsersData();\n    this.showAmountOfUser();\n    await this.getLearnedData();\n    this.calculateMostLearnedComponent();\n  }\n\n  /**\r\n   * Description - This function checks if the usersData and questionAnswerData state have changed since the previous update. If they have, it triggers the necessary functions to update the related data and calculations.\r\n   * @param {*} prevState - previous state of the functions\r\n   */\n  async componentDidUpdate(prevProps, prevState) {\n    if (prevState.usersData !== this.state.usersData) {\n      this.showAmountOfUser();\n    }\n    if (prevState.questionAnswerData !== this.state.questionAnswerData) {\n      this.showQuestionAnswerData();\n      this.calculateRate();\n    }\n    if (prevState.learnedData !== this.state.learnedData) {\n      this.calculateMostLearnedComponent();\n    }\n  }\n\n  /**\r\n   * Description - This function get all the data about the users from the server\r\n   */\n  async getUsersData() {\n    try {\n      const response = await fetch('http://localhost:5000/adminReports/getUsersData', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Accept-Control-Allow-Origin': '*'\n        }\n      });\n      const result = await response.json();\n      this.setState({\n        usersData: result\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n\n  /**\r\n   * Description - This function calculate the amount of \"User\" have sign up\r\n   */\n  showAmountOfUser() {\n    const usersData = this.state.usersData;\n    // console.log(usersData)\n    let amountOfUsers = 0;\n    for (let index = 0; index < usersData.length; index++) {\n      if (usersData[index].userType === 'User') {\n        amountOfUsers = amountOfUsers + 1;\n      }\n    }\n    this.setState({\n      amountOfUsers: amountOfUsers\n    });\n  }\n\n  /**\r\n   * Description - This function get all the data of Question / Answer from the server\r\n   */\n  async getQuestionAnswer() {\n    try {\n      const response = await fetch('http://localhost:5000/adminReports/getQuestionAnswerData', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Accept-Control-Allow-Origin': '*'\n        }\n      });\n      const result = await response.json();\n      this.setState({\n        questionAnswerData: result\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n\n  /**\r\n   * Description - This function show the amount of open and closed questions\r\n   */\n  showQuestionAnswerData() {\n    const questionAnswerData = this.state.questionAnswerData;\n    let openQuestions = 0;\n    let closedQuestions = 0;\n    for (let index = 0; index < questionAnswerData.length; index++) {\n      if (!questionAnswerData[index].haveAnAnswer) {\n        openQuestions++;\n      } else {\n        closedQuestions++;\n      }\n    }\n    this.setState({\n      openQuestions: openQuestions,\n      closedQuestions: closedQuestions\n    });\n  }\n\n  /**\r\n   * Description - This function show the average rate given by the users\r\n   */\n  calculateRate() {\n    const questionAnswerData = this.state.questionAnswerData;\n    let rate = 0;\n    let users = 0;\n    let index = 0;\n    for (; index < questionAnswerData.length; index++) {\n      if (questionAnswerData[index].haveAnAnswer && questionAnswerData[index].selectedStars > 0) {\n        rate = rate + questionAnswerData[index].selectedStars;\n        users = users + 1;\n      }\n    }\n    if (users > 0) {\n      const overallRate = rate / users;\n      this.setState({\n        overallUsersRate: overallRate\n      });\n    }\n  }\n\n  /**\r\n   * Description - This function get all the data about the learned components from the server\r\n   */\n  async getLearnedData() {\n    try {\n      const response = await fetch('http://localhost:5000/adminReports/getLearnedData', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Accept-Control-Allow-Origin': '*'\n        }\n      });\n      const result = await response.json();\n      this.setState({\n        learnedData: result\n      });\n      console.log(result);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n\n  /**\r\n   * Description - This function show the average rate given by the users\r\n   */\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"PC BUILDER ADMIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.adminHome,\n        children: /*#__PURE__*/_jsxDEV(\"section\", {\n          className: style.section,\n          children: [/*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Open Questions\",\n            text: this.state.openQuestions,\n            to: \"/questionsAnswersReport\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Close Questions\",\n            text: this.state.closedQuestions,\n            to: \"/questionsAnswersReport\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Overall Users Rate\",\n            text: Array.from({\n              length: this.state.overallUsersRate\n            }, (_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2605\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 19\n            }, this)),\n            to: \"/questionsAnswersReport\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Amount Of Users\",\n            text: this.state.amountOfUsers,\n            to: \"/usersDataReport\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Most Learned Component \",\n            text: this.state.mostLearnedComp,\n            to: \"/learnedDataReport\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Header","style","DiagnosticInformationLayout","PageLayout","AdminHome","state","usersData","amountOfUsers","questionAnswerData","openQuestions","closedQuestions","overallUsersRate","mostLearnedComp","learnedData","calculateMostLearnedComponent","componentCounts","forEach","user","Object","keys","component","haveLearned","mostLearnedComponent","highestCount","console","log","componentDidMount","getQuestionAnswer","showQuestionAnswerData","calculateRate","getUsersData","showAmountOfUser","getLearnedData","componentDidUpdate","prevProps","prevState","response","fetch","method","crossDomain","headers","Accept","result","json","setState","error","index","length","userType","haveAnAnswer","rate","users","selectedStars","overallRate","render","adminHome","section","Array","from","_"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/adminPages/pages/adminHome/AdminHome.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Header from '../../../commonComponents/header/Header';\r\nimport style from './adminHome.module.css';\r\nimport DiagnosticInformationLayout from '../../layouts/diagnosticInformationLayout/DiagnosticInformationLayout';\r\nimport PageLayout from '../../layouts/pageLayout/PageLayout';\r\n\r\n/**\r\n * Description This class show all Admin home data\r\n */\r\nexport default class AdminHome extends Component {\r\n  state = {\r\n    usersData: [],\r\n    amountOfUsers: 0,\r\n    questionAnswerData: [],\r\n    openQuestions: 0,\r\n    closedQuestions: 0,\r\n    overallUsersRate: 0,\r\n    mostLearnedComp: '',\r\n    learnedData: [],\r\n  };\r\n\r\n  /**\r\n   * Description - This function activate functions when the page is uploaded\r\n   */\r\n  async componentDidMount() {\r\n    await this.getQuestionAnswer();\r\n    this.showQuestionAnswerData();\r\n    this.calculateRate();\r\n    await this.getUsersData();\r\n    this.showAmountOfUser();\r\n    await this.getLearnedData();\r\n    this.calculateMostLearnedComponent();\r\n  }\r\n\r\n  /**\r\n   * Description - This function checks if the usersData and questionAnswerData state have changed since the previous update. If they have, it triggers the necessary functions to update the related data and calculations.\r\n   * @param {*} prevState - previous state of the functions\r\n   */\r\n  async componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.usersData !== this.state.usersData) {\r\n      this.showAmountOfUser();\r\n    }\r\n\r\n    if (prevState.questionAnswerData !== this.state.questionAnswerData) {\r\n      this.showQuestionAnswerData();\r\n      this.calculateRate();\r\n    }\r\n\r\n    if (prevState.learnedData !== this.state.learnedData) {\r\n      this.calculateMostLearnedComponent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function get all the data about the users from the server\r\n   */\r\n  async getUsersData() {\r\n    try {\r\n      const response = await fetch(\r\n        'http://localhost:5000/adminReports/getUsersData',\r\n        {\r\n          method: 'POST',\r\n          crossDomain: true,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            'Accept-Control-Allow-Origin': '*',\r\n          },\r\n        }\r\n      );\r\n      const result = await response.json();\r\n      this.setState({\r\n        usersData: result,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function calculate the amount of \"User\" have sign up\r\n   */\r\n  showAmountOfUser() {\r\n    const usersData = this.state.usersData;\r\n    // console.log(usersData)\r\n    let amountOfUsers = 0;\r\n\r\n    for (let index = 0; index < usersData.length; index++) {\r\n      if (usersData[index].userType === 'User') {\r\n        amountOfUsers = amountOfUsers + 1;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      amountOfUsers: amountOfUsers,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Description - This function get all the data of Question / Answer from the server\r\n   */\r\n  async getQuestionAnswer() {\r\n    try {\r\n      const response = await fetch(\r\n        'http://localhost:5000/adminReports/getQuestionAnswerData',\r\n        {\r\n          method: 'POST',\r\n          crossDomain: true,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            'Accept-Control-Allow-Origin': '*',\r\n          },\r\n        }\r\n      );\r\n      const result = await response.json();\r\n\r\n      this.setState({\r\n        questionAnswerData: result,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function show the amount of open and closed questions\r\n   */\r\n  showQuestionAnswerData() {\r\n    const questionAnswerData = this.state.questionAnswerData;\r\n    let openQuestions = 0;\r\n    let closedQuestions = 0;\r\n\r\n    for (let index = 0; index < questionAnswerData.length; index++) {\r\n      if (!questionAnswerData[index].haveAnAnswer) {\r\n        openQuestions++;\r\n      } else {\r\n        closedQuestions++;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      openQuestions: openQuestions,\r\n      closedQuestions: closedQuestions,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Description - This function show the average rate given by the users\r\n   */\r\n  calculateRate() {\r\n    const questionAnswerData = this.state.questionAnswerData;\r\n    let rate = 0;\r\n    let users = 0;\r\n    let index = 0;\r\n    for (; index < questionAnswerData.length; index++) {\r\n      if (\r\n        questionAnswerData[index].haveAnAnswer &&\r\n        questionAnswerData[index].selectedStars > 0\r\n      ) {\r\n        rate = rate + questionAnswerData[index].selectedStars;\r\n        users = users + 1;\r\n      }\r\n    }\r\n\r\n    if (users > 0) {\r\n      const overallRate = rate / users;\r\n      this.setState({\r\n        overallUsersRate: overallRate,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function get all the data about the learned components from the server\r\n   */\r\n  async getLearnedData() {\r\n    try {\r\n      const response = await fetch(\r\n        'http://localhost:5000/adminReports/getLearnedData',\r\n        {\r\n          method: 'POST',\r\n          crossDomain: true,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            'Accept-Control-Allow-Origin': '*',\r\n          },\r\n        }\r\n      );\r\n      const result = await response.json();\r\n      this.setState({\r\n        learnedData: result,\r\n      });\r\n      console.log(result)\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function show the average rate given by the users\r\n   */\r\n  calculateMostLearnedComponent = () => {\r\n    const componentCounts = {};\r\n\r\n    this.state.learnedData.forEach(user => {\r\n      Object.keys(user).forEach(component => {\r\n        if (user[component].haveLearned) {\r\n          if (componentCounts[component]) {\r\n            componentCounts[component]++;\r\n          } else {\r\n            componentCounts[component] = 1;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Find the most learned component\r\n    let mostLearnedComponent = null;\r\n    let highestCount = 0;\r\n    for (const component in componentCounts) {\r\n      if (componentCounts[component] > highestCount) {\r\n        highestCount = componentCounts[component];\r\n        mostLearnedComponent = component;\r\n      }\r\n    }\r\n\r\n    console.log('Most learned component:', mostLearnedComponent);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='PC BUILDER ADMIN' />\r\n        <div className={style.adminHome}>\r\n          <section className={style.section}>\r\n            <DiagnosticInformationLayout\r\n              h2='Open Questions'\r\n              text={this.state.openQuestions}\r\n              to='/questionsAnswersReport'\r\n              name='More Info'\r\n            />\r\n            <DiagnosticInformationLayout\r\n              h2='Close Questions'\r\n              text={this.state.closedQuestions}\r\n              to='/questionsAnswersReport'\r\n              name='More Info'\r\n            />\r\n\r\n            <DiagnosticInformationLayout\r\n              h2='Overall Users Rate'\r\n              text={Array.from(\r\n                { length: this.state.overallUsersRate },\r\n                (_, index) => (\r\n                  <span key={index}>★</span>\r\n                )\r\n              )}\r\n              to='/questionsAnswersReport'\r\n              name='More Info'\r\n            />\r\n\r\n            <DiagnosticInformationLayout\r\n              h2='Amount Of Users'\r\n              text={this.state.amountOfUsers}\r\n              to='/usersDataReport'\r\n              name='More Info'\r\n            />\r\n\r\n            <DiagnosticInformationLayout\r\n              h2='Most Learned Component '\r\n              text={this.state.mostLearnedComp}\r\n              to='/learnedDataReport'\r\n              name='More Info'\r\n            />\r\n          </section>\r\n        </div>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}