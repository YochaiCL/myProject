{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\userPages\\\\pages\\\\questionAnswerUser\\\\existsQuestionsUser\\\\ExistsQuestionsUser.js\";\nimport React, { Component } from 'react';\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\nimport Header from '../../../../commonComponents/header/Header';\nimport style from './existsQuestionsUser.module.css';\nimport Button from '../../../../commonComponents/button/Button';\n\n/**\r\n * Description - This class show the question/answer data\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ExistsQuestionsUser extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      questionAnswerData: [],\n      showData: false,\n      selectIndex: null,\n      questionText: '',\n      questionText2: '',\n      userId: JSON.parse(localStorage.getItem('user'))._id,\n      selectedStars: 0\n    };\n    this.handelClick = index => {\n      this.setState({\n        questionText2: this.state.questionAnswerData[index].questionText\n      });\n      this.setState({\n        showData: true,\n        selectIndex: index\n      });\n    };\n  }\n  /**\r\n   * Description - This function get all the question/answer from the server\r\n   */\n  async getQuestionAnswer() {\n    const response = await fetch('http://localhost:5000/userQuestionAnswer/getData', {\n      method: 'POST',\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        userId: this.state.userId\n      })\n    });\n    const result = await response.json();\n    result.sort((a, b) => a.questionName.localeCompare(b.questionName));\n    this.setState({\n      questionAnswerData: result\n    });\n  }\n\n  /**\r\n   * Description - This function activate the getQuestionAnswer function when the page is uploaded\r\n   */\n  componentDidMount() {\n    this.getQuestionAnswer();\n  }\n\n  /**\r\n   * Description - This function show the question/answer data\r\n   * @param {*} index\r\n   */\n\n  /**\r\n   * Description - This function delete selected Question from the database if the question have no answer\r\n   */\n  deleteQuestion(questionName) {\n    let result = this.state.questionAnswerData.filter(item => {\n      return item.questionName !== questionName;\n    });\n    this.setState({\n      questionAnswerData: result\n    });\n    try {\n      fetch('http://localhost:5000/userQuestionAnswer/deleteQuestionAnswer', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify({\n          userId: this.state.userId,\n          questionName: questionName\n        })\n      }).then(res => res.json()).then(data => {\n        if (data.status === 'Question deleted') {\n          this.setState({\n            showResult: 'Test has been deleted'\n          });\n          this.setState({\n            showData: false\n          });\n          setTimeout(() => {\n            this.setState({\n              showResult: ''\n            });\n          }, 2000);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  handleStarClick(selectedStarCount) {\n    const dataStar = {\n      userIdStar: this.state.userId,\n      questionName: this.state.questionAnswerData[this.state.selectIndex].questionName,\n      selectedStars: selectedStarCount\n    };\n    try {\n      fetch('http://localhost:5000/userQuestionAnswer/updateStars', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dataStar)\n      }).then(res => res.json()).then(data => {\n        if (data.status === 'true') {\n          this.setState({\n            showResult: 'Star has been updated'\n          });\n          this.setState({\n            showData: false\n          });\n          setTimeout(() => {\n            this.setState({\n              showResult: ''\n            });\n          }, 2000);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\r\n   * Description - This function update the question text in the server\r\n   * @param {*} e - Question text value\r\n   */\n  async handleSubmit(e) {\n    console.log(this.state.userId);\n    e.preventDefault();\n    let dataToSend = {\n      userId: this.state.userId,\n      questionText: this.state.questionAnswerData[this.state.selectIndex].questionText + ' ? ' + this.state.questionText,\n      questionName: this.state.questionAnswerData[this.state.selectIndex].questionName\n    };\n    const questionInputData = {\n      method: 'POST',\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify(dataToSend)\n    };\n    const response = await fetch('http://localhost:5000/userQuestionAnswer/updateQuestion', questionInputData);\n    const result = await response.json();\n    // console.log(result);\n    if (result.status === 'true') {\n      this.setState({\n        showResult: 'The Question has been updated'\n      });\n      this.setState({\n        questionText2: this.state.questionAnswerData[this.state.selectIndex].questionText + ' ? ' + this.state.questionText\n      });\n      setTimeout(() => {\n        this.setState({\n          showResult: ''\n        });\n      }, 1000);\n    }\n  }\n  render() {\n    const {\n      questionAnswerData,\n      showData,\n      selectIndex,\n      selectedStars\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"Exists Questions/Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: style.external,\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: style.model,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"List Of Questions/Answers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), questionAnswerData.map((qA, index) => /*#__PURE__*/_jsxDEV(\"section\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                this.handelClick(index);\n              },\n              className: style.productButton,\n              children: qA.questionName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), showData && selectIndex !== null && selectIndex < questionAnswerData.length && /*#__PURE__*/_jsxDEV(\"section\", {\n          className: style.showAllData,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: style.h2,\n            children: \"Question/Answer Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: style.h3,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: style.span,\n                children: \" Question Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 21\n              }, this), questionAnswerData[selectIndex].questionName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: style.h3,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: style.span,\n                children: \" Question Text:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 21\n              }, this), this.state.questionText2.split('?').map((part, index, array) => /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [part, index !== array.length - 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: 'red'\n                  },\n                  children: \"?\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 29\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 25\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 19\n            }, this), !questionAnswerData[selectIndex].haveAnAnswer && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                const indexToDelete = questionAnswerData[selectIndex].questionName;\n                this.deleteQuestion(indexToDelete);\n              },\n              className: style.deleteButton,\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: style.h3,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: style.span,\n                children: \"Question Answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 21\n              }, this), questionAnswerData[selectIndex].answerText.split('|').map((part, index, array) => /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [part, index !== array.length - 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: 'red'\n                  },\n                  children: \"|\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 29\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 25\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n              children: /*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: this.handleSubmit.bind(this),\n                className: style.form,\n                children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                  className: style.textArea,\n                  value: this.state.questionText,\n                  name: \"tarea\",\n                  rows: \"6\",\n                  cols: \"40\",\n                  placeholder: \" Write text here\",\n                  required: true,\n                  onChange: e => this.setState({\n                    questionText: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  text: \"submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 23\n                }, this), questionAnswerData[selectIndex].haveAnAnswer && /*#__PURE__*/_jsxDEV(\"section\", {\n                  className: style.starsLocation,\n                  children: [1, 2, 3, 4, 5].map(star => /*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      cursor: 'pointer',\n                      color: star <= selectedStars ? 'orange' : 'grey',\n                      fontSize: `60px`\n                    },\n                    onClick: () => {\n                      this.setState({\n                        selectedStars: this.state.questionAnswerData[selectIndex].selectedStars\n                      });\n                      this.handleStarClick(star);\n                    },\n                    children: \"\\u2605\"\n                  }, star, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 289,\n                    columnNumber: 29\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: style.showResult,\n        children: this.state.showResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","PageLayout","Header","style","Button","ExistsQuestionsUser","state","questionAnswerData","showData","selectIndex","questionText","questionText2","userId","JSON","parse","localStorage","getItem","_id","selectedStars","handelClick","index","setState","getQuestionAnswer","response","fetch","method","crossDomain","headers","Accept","body","stringify","result","json","sort","a","b","questionName","localeCompare","componentDidMount","deleteQuestion","filter","item","then","res","data","status","showResult","setTimeout","error","console","log","handleStarClick","selectedStarCount","dataStar","userIdStar","handleSubmit","e","preventDefault","dataToSend","questionInputData","render","external","model","map","qA","productButton","length","showAllData","h2","h3","span","split","part","array","color","haveAnAnswer","indexToDelete","deleteButton","answerText","bind","form","textArea","target","value","starsLocation","star","cursor","fontSize"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/userPages/pages/questionAnswerUser/existsQuestionsUser/ExistsQuestionsUser.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\r\nimport Header from '../../../../commonComponents/header/Header';\r\nimport style from './existsQuestionsUser.module.css';\r\nimport Button from '../../../../commonComponents/button/Button';\r\n\r\n/**\r\n * Description - This class show the question/answer data\r\n */\r\nexport default class ExistsQuestionsUser extends Component {\r\n  state = {\r\n    questionAnswerData: [],\r\n    showData: false,\r\n    selectIndex: null,\r\n    questionText: '',\r\n    questionText2: '',\r\n    userId: JSON.parse(localStorage.getItem('user'))._id,\r\n    selectedStars: 0,\r\n  };\r\n\r\n  /**\r\n   * Description - This function get all the question/answer from the server\r\n   */\r\n  async getQuestionAnswer() {\r\n    const response = await fetch(\r\n      'http://localhost:5000/userQuestionAnswer/getData',\r\n      {\r\n        method: 'POST',\r\n        crossDomain: true,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          'Accept-Control-Allow-Origin': '*',\r\n        },\r\n\r\n        body: JSON.stringify({\r\n          userId: this.state.userId,\r\n        }),\r\n      }\r\n    );\r\n    const result = await response.json();\r\n    result.sort((a, b) => a.questionName.localeCompare(b.questionName));\r\n    this.setState({ questionAnswerData: result });\r\n  }\r\n\r\n  /**\r\n   * Description - This function activate the getQuestionAnswer function when the page is uploaded\r\n   */\r\n  componentDidMount() {\r\n    this.getQuestionAnswer();\r\n  }\r\n\r\n  /**\r\n   * Description - This function show the question/answer data\r\n   * @param {*} index\r\n   */\r\n  handelClick = index => {\r\n    this.setState({\r\n      questionText2: this.state.questionAnswerData[index].questionText,\r\n    });\r\n    this.setState({\r\n      showData: true,\r\n      selectIndex: index,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Description - This function delete selected Question from the database if the question have no answer\r\n   */\r\n  deleteQuestion(questionName) {\r\n    let result = this.state.questionAnswerData.filter(item => {\r\n      return item.questionName !== questionName;\r\n    });\r\n    this.setState({ questionAnswerData: result });\r\n\r\n    try {\r\n      fetch('http://localhost:5000/userQuestionAnswer/deleteQuestionAnswer', {\r\n        method: 'POST',\r\n        crossDomain: true,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          'Access-Control-Allow-Origin': '*',\r\n        },\r\n        body: JSON.stringify({\r\n          userId: this.state.userId,\r\n          questionName: questionName,\r\n        }),\r\n      })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          if (data.status === 'Question deleted') {\r\n            this.setState({ showResult: 'Test has been deleted' });\r\n            this.setState({ showData: false });\r\n            setTimeout(() => {\r\n              this.setState({\r\n                showResult: '',\r\n              });\r\n            }, 2000);\r\n          }\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  handleStarClick(selectedStarCount) {\r\n    const dataStar = {\r\n      userIdStar: this.state.userId,\r\n      questionName:\r\n        this.state.questionAnswerData[this.state.selectIndex].questionName,\r\n      selectedStars: selectedStarCount,\r\n    };\r\n\r\n    try {\r\n      fetch('http://localhost:5000/userQuestionAnswer/updateStars', {\r\n        method: 'POST',\r\n        crossDomain: true,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(dataStar),\r\n      })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          if (data.status === 'true') {\r\n            this.setState({ showResult: 'Star has been updated' });\r\n            this.setState({ showData: false });\r\n            setTimeout(() => {\r\n              this.setState({\r\n                showResult: '',\r\n              });\r\n            }, 2000);\r\n          }\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function update the question text in the server\r\n   * @param {*} e - Question text value\r\n   */\r\n  async handleSubmit(e) {\r\n    console.log(this.state.userId);\r\n    e.preventDefault();\r\n    let dataToSend = {\r\n      userId: this.state.userId,\r\n      questionText:\r\n        this.state.questionAnswerData[this.state.selectIndex].questionText +\r\n        ' ? ' +\r\n        this.state.questionText,\r\n      questionName:\r\n        this.state.questionAnswerData[this.state.selectIndex].questionName,\r\n    };\r\n\r\n    const questionInputData = {\r\n      method: 'POST',\r\n      crossDomain: true,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'Accept-Control-Allow-Origin': '*',\r\n      },\r\n      body: JSON.stringify(dataToSend),\r\n    };\r\n\r\n    const response = await fetch(\r\n      'http://localhost:5000/userQuestionAnswer/updateQuestion',\r\n      questionInputData\r\n    );\r\n    const result = await response.json();\r\n    // console.log(result);\r\n    if (result.status === 'true') {\r\n      this.setState({\r\n        showResult: 'The Question has been updated',\r\n      });\r\n      this.setState({\r\n        questionText2:\r\n          this.state.questionAnswerData[this.state.selectIndex].questionText +\r\n          ' ? ' +\r\n          this.state.questionText,\r\n      });\r\n\r\n      setTimeout(() => {\r\n        this.setState({\r\n          showResult: '',\r\n        });\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { questionAnswerData, showData, selectIndex, selectedStars } =\r\n      this.state;\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='Exists Questions/Answers' />\r\n        <section className={style.external}>\r\n          <section className={style.model}>\r\n            <h2>List Of Questions/Answers</h2>\r\n            {questionAnswerData.map((qA, index) => (\r\n              <section key={index}>\r\n                <button\r\n                  onClick={() => {\r\n                    this.handelClick(index);\r\n                  }}\r\n                  className={style.productButton}\r\n                >\r\n                  {qA.questionName}\r\n                </button>\r\n              </section>\r\n            ))}\r\n          </section>\r\n          {showData &&\r\n            selectIndex !== null &&\r\n            selectIndex < questionAnswerData.length && (\r\n              <section className={style.showAllData}>\r\n                <h2 className={style.h2}>Question/Answer Data</h2>\r\n                <div>\r\n                  <h3 className={style.h3}>\r\n                    <span className={style.span}> Question Name:</span>\r\n                    {questionAnswerData[selectIndex].questionName}\r\n                  </h3>\r\n                  <h3 className={style.h3}>\r\n                    <span className={style.span}> Question Text:</span>\r\n                    {this.state.questionText2\r\n                      .split('?')\r\n                      .map((part, index, array) => (\r\n                        <span key={index}>\r\n                          {part}\r\n                          {index !== array.length - 1 && (\r\n                            <span style={{ color: 'red' }}>?</span>\r\n                          )}\r\n                        </span>\r\n                      ))}\r\n                  </h3>\r\n                  {!questionAnswerData[selectIndex].haveAnAnswer && (\r\n                    <button\r\n                      onClick={() => {\r\n                        const indexToDelete =\r\n                          questionAnswerData[selectIndex].questionName;\r\n\r\n                        this.deleteQuestion(indexToDelete);\r\n                      }}\r\n                      className={style.deleteButton}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  )}\r\n\r\n                  <h3 className={style.h3}>\r\n                    <span className={style.span}>Question Answer:</span>\r\n                    {questionAnswerData[selectIndex].answerText\r\n                      .split('|')\r\n                      .map((part, index, array) => (\r\n                        <span key={index}>\r\n                          {part}\r\n                          {index !== array.length - 1 && (\r\n                            <span style={{ color: 'red' }}>|</span>\r\n                          )}\r\n                        </span>\r\n                      ))}\r\n                  </h3>\r\n                  <section>\r\n                    <form\r\n                      onSubmit={this.handleSubmit.bind(this)}\r\n                      className={style.form}\r\n                    >\r\n                      <textarea\r\n                        className={style.textArea}\r\n                        value={this.state.questionText}\r\n                        name='tarea'\r\n                        rows='6'\r\n                        cols='40'\r\n                        placeholder=' Write text here'\r\n                        required\r\n                        onChange={e =>\r\n                          this.setState({ questionText: e.target.value })\r\n                        }\r\n                      ></textarea>\r\n\r\n                      <Button type='submit' text='submit' />\r\n\r\n                      {questionAnswerData[selectIndex].haveAnAnswer && (\r\n                        <section className={style.starsLocation}>\r\n                          {[1, 2, 3, 4, 5].map(star => (\r\n                            <span\r\n                              key={star}\r\n                              style={{\r\n                                cursor: 'pointer',\r\n                                color:\r\n                                  star <= selectedStars ? 'orange' : 'grey',\r\n                                fontSize: `60px`,\r\n                              }}\r\n                              onClick={() => {\r\n                                this.setState({\r\n                                  selectedStars:\r\n                                    this.state.questionAnswerData[selectIndex]\r\n                                      .selectedStars,\r\n                                });\r\n                                this.handleStarClick(star);\r\n                              }}\r\n                            >\r\n                              ★\r\n                            </span>\r\n                          ))}\r\n                        </section>\r\n                      )}\r\n                    </form>\r\n                  </section>\r\n                </div>\r\n              </section>\r\n            )}\r\n        </section>\r\n        <p className={style.showResult}>{this.state.showResult}</p>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}