{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\adminPages\\\\pages\\\\adminHome\\\\AdminHome.js\";\nimport React, { Component } from 'react';\nimport Header from '../../../commonComponents/header/Header';\nimport style from './adminHome.module.css';\nimport DiagnosticInformationLayout from '../../layouts/diagnosticInformationLayout/DiagnosticInformationLayout';\nimport PageLayout from '../../layouts/pageLayout/PageLayout';\n\n/**\r\n * Description This class show all Admin home data\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class AdminHome extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      usersData: [],\n      amountOfUsers: 0,\n      questionAnswerData: [],\n      premiumOpenQuestions: 0,\n      premiumClosedQuestions: 0,\n      adminOpenQuestions: 0,\n      adminClosedQuestions: 0,\n      overallUsersRate: 0,\n      mostLearnedComp: '',\n      learnedData: []\n    };\n    this.calculateMostLearnedComponent = () => {\n      const componentCounts = {};\n      this.state.learnedData.forEach(user => {\n        Object.keys(user).forEach(component => {\n          if (user[component].haveLearned) {\n            if (componentCounts[component]) {\n              componentCounts[component]++;\n            } else {\n              componentCounts[component] = 1;\n            }\n          }\n        });\n      });\n\n      // Find the most learned component\n      let mostLearnedComponent = null;\n      let highestCount = 0;\n      for (const component in componentCounts) {\n        if (componentCounts[component] > highestCount) {\n          highestCount = componentCounts[component];\n          mostLearnedComponent = component;\n        }\n      }\n      this.setState({\n        mostLearnedComp: mostLearnedComponent\n      });\n    };\n  }\n  /**\r\n   * Description - This function activate functions when the page is uploaded\r\n   */\n  async componentDidMount() {\n    await this.getQuestionAnswer();\n    this.showQuestionAnswerData();\n    this.calculateRate();\n    await this.getUsersData();\n    this.showAmountOfUser();\n    await this.getLearnedData();\n  }\n\n  /**\r\n   * Description - This function checks if the usersData and questionAnswerData state have changed since the previous update. If they have, it triggers the necessary functions to update the related data and calculations.\r\n   * @param {*} prevState - previous state of the functions\r\n   */\n  async componentDidUpdate(prevProps, prevState) {\n    if (prevState.usersData !== this.state.usersData) {\n      this.showAmountOfUser();\n    }\n    if (prevState.questionAnswerData !== this.state.questionAnswerData) {\n      this.showQuestionAnswerData();\n      this.calculateRate();\n    }\n  }\n\n  /**\r\n   * Description - This function get all the data about the users from the server\r\n   */\n  async getUsersData() {\n    try {\n      const response = await fetch('http://localhost:5000/reports/getUsersData', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Accept-Control-Allow-Origin': '*'\n        }\n      });\n      const result = await response.json();\n      this.setState({\n        usersData: result\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n\n  /**\r\n   * Description - This function calculate the amount of \"User\" have sign up\r\n   */\n  showAmountOfUser() {\n    const usersData = this.state.usersData;\n    // console.log(usersData)\n    let amountOfUsers = 0;\n    for (let index = 0; index < usersData.length; index++) {\n      amountOfUsers = amountOfUsers + 1;\n    }\n    this.setState({\n      amountOfUsers: amountOfUsers\n    });\n  }\n\n  /**\r\n   * Description - This function get all the data of Question / Answer from the server\r\n   */\n  async getQuestionAnswer() {\n    try {\n      const response = await fetch('http://localhost:5000/reports/getQuestionAnswerData', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Accept-Control-Allow-Origin': '*'\n        }\n      });\n      const result = await response.json();\n      this.setState({\n        questionAnswerData: result\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n\n  /**\r\n   * Description - This function show the amount of open and closed questions\r\n   */\n  showQuestionAnswerData() {\n    const questionAnswerData = this.state.questionAnswerData;\n    let premiumOpenQuestions = 0;\n    let premiumClosedQuestions = 0;\n    let adminOpenQuestions = 0;\n    let adminClosedQuestions = 0;\n    for (let index = 0; index < questionAnswerData.length; index++) {\n      if (questionAnswerData[index].questionAnswerText[index + 1].userType !== 'Premium') {\n        if (!questionAnswerData[index].haveAnAnswer) {\n          premiumOpenQuestions++;\n        } else {\n          premiumClosedQuestions++;\n        }\n      }\n      if (questionAnswerData[index].questionAnswerText[index + 1].userType === 'Premium') {\n        if (!questionAnswerData[index].haveAnAnswer) {\n          adminOpenQuestions++;\n        } else {\n          adminClosedQuestions++;\n        }\n      }\n    }\n    this.setState({\n      premiumOpenQuestions: premiumOpenQuestions,\n      premiumClosedQuestions: premiumClosedQuestions,\n      ad\n    });\n  }\n\n  /**\r\n   * Description - This function show the average rate given by the users\r\n   */\n  calculateRate() {\n    const questionAnswerData = this.state.questionAnswerData;\n    let rate = 0;\n    let users = 0;\n    let index = 0;\n    for (; index < questionAnswerData.length; index++) {\n      if (questionAnswerData[index].haveAnAnswer && questionAnswerData[index].selectedStars > 0) {\n        rate = rate + questionAnswerData[index].selectedStars;\n        users = users + 1;\n      }\n    }\n    if (users > 0) {\n      const overallRate = rate / users;\n      this.setState({\n        overallUsersRate: overallRate\n      });\n    }\n  }\n\n  /**\r\n   * Description - This function get all the data about the learned components from the server\r\n   */\n  async getLearnedData() {\n    try {\n      const response = await fetch('http://localhost:5000/reports/getLearnedData', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Accept-Control-Allow-Origin': '*'\n        }\n      });\n      const result = await response.json();\n      this.setState({\n        learnedData: result\n      });\n\n      // Call the function here to calculate most learned component\n      if (this.state.learnedData.length > 0) this.calculateMostLearnedComponent();\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n\n  /**\r\n   * Description - This function show the most learned component in the server\r\n   */\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"PC BUILDER ADMIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.adminHome,\n        children: /*#__PURE__*/_jsxDEV(\"section\", {\n          className: style.section,\n          children: [/*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Admin Questions\",\n            text: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"open \", this.state.premiumOpenQuestions, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 19\n              }, this), \"close \", this.state.premiumClosedQuestions]\n            }, void 0, true),\n            to: \"/questionsAnswersReportAdmin\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Premium Questions\",\n            text: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"open \", this.state.premiumOpenQuestions, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 19\n              }, this), \"close \", this.state.premiumClosedQuestions]\n            }, void 0, true),\n            to: \"/questionsAnswersReportAdmin\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Overall Users Rate\",\n            text: this.state.overallUsersRate > 0 ? Array.from({\n              length: this.state.overallUsersRate\n            }, (_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2605\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 37\n            }, this)) : 'No Data',\n            to: \"/questionsAnswersReportPremium\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Amount Of Users\",\n            text: this.state.amountOfUsers,\n            to: \"/usersDataReportAdmin\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Most Learned Component \",\n            text: this.state.mostLearnedComp,\n            to: \"/learnedDataReport\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Header","style","DiagnosticInformationLayout","PageLayout","AdminHome","state","usersData","amountOfUsers","questionAnswerData","premiumOpenQuestions","premiumClosedQuestions","adminOpenQuestions","adminClosedQuestions","overallUsersRate","mostLearnedComp","learnedData","calculateMostLearnedComponent","componentCounts","forEach","user","Object","keys","component","haveLearned","mostLearnedComponent","highestCount","setState","componentDidMount","getQuestionAnswer","showQuestionAnswerData","calculateRate","getUsersData","showAmountOfUser","getLearnedData","componentDidUpdate","prevProps","prevState","response","fetch","method","crossDomain","headers","Accept","result","json","error","console","index","length","questionAnswerText","userType","haveAnAnswer","ad","rate","users","selectedStars","overallRate","render","adminHome","section","Array","from","_"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/adminPages/pages/adminHome/AdminHome.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Header from '../../../commonComponents/header/Header';\r\nimport style from './adminHome.module.css';\r\nimport DiagnosticInformationLayout from '../../layouts/diagnosticInformationLayout/DiagnosticInformationLayout';\r\nimport PageLayout from '../../layouts/pageLayout/PageLayout';\r\n\r\n/**\r\n * Description This class show all Admin home data\r\n */\r\nexport default class AdminHome extends Component {\r\n  state = {\r\n    usersData: [],\r\n    amountOfUsers: 0,\r\n    questionAnswerData: [],\r\n    premiumOpenQuestions: 0,\r\n    premiumClosedQuestions: 0,\r\n    adminOpenQuestions: 0,\r\n    adminClosedQuestions: 0,\r\n    overallUsersRate: 0,\r\n    mostLearnedComp: '',\r\n    learnedData: [],\r\n  };\r\n\r\n  /**\r\n   * Description - This function activate functions when the page is uploaded\r\n   */\r\n  async componentDidMount() {\r\n    await this.getQuestionAnswer();\r\n    this.showQuestionAnswerData();\r\n    this.calculateRate();\r\n    await this.getUsersData();\r\n    this.showAmountOfUser();\r\n    await this.getLearnedData();\r\n  }\r\n\r\n  /**\r\n   * Description - This function checks if the usersData and questionAnswerData state have changed since the previous update. If they have, it triggers the necessary functions to update the related data and calculations.\r\n   * @param {*} prevState - previous state of the functions\r\n   */\r\n  async componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.usersData !== this.state.usersData) {\r\n      this.showAmountOfUser();\r\n    }\r\n\r\n    if (prevState.questionAnswerData !== this.state.questionAnswerData) {\r\n      this.showQuestionAnswerData();\r\n      this.calculateRate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function get all the data about the users from the server\r\n   */\r\n  async getUsersData() {\r\n    try {\r\n      const response = await fetch(\r\n        'http://localhost:5000/reports/getUsersData',\r\n        {\r\n          method: 'POST',\r\n          crossDomain: true,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            'Accept-Control-Allow-Origin': '*',\r\n          },\r\n        }\r\n      );\r\n      const result = await response.json();\r\n      this.setState({\r\n        usersData: result,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function calculate the amount of \"User\" have sign up\r\n   */\r\n  showAmountOfUser() {\r\n    const usersData = this.state.usersData;\r\n    // console.log(usersData)\r\n    let amountOfUsers = 0;\r\n\r\n    for (let index = 0; index < usersData.length; index++) {\r\n      amountOfUsers = amountOfUsers + 1;\r\n    }\r\n\r\n    this.setState({\r\n      amountOfUsers: amountOfUsers,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Description - This function get all the data of Question / Answer from the server\r\n   */\r\n  async getQuestionAnswer() {\r\n    try {\r\n      const response = await fetch(\r\n        'http://localhost:5000/reports/getQuestionAnswerData',\r\n        {\r\n          method: 'POST',\r\n          crossDomain: true,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            'Accept-Control-Allow-Origin': '*',\r\n          },\r\n        }\r\n      );\r\n      const result = await response.json();\r\n\r\n      this.setState({\r\n        questionAnswerData: result,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function show the amount of open and closed questions\r\n   */\r\n  showQuestionAnswerData() {\r\n    const questionAnswerData = this.state.questionAnswerData;\r\n    let premiumOpenQuestions = 0;\r\n    let premiumClosedQuestions = 0;\r\n    let adminOpenQuestions = 0;\r\n    let adminClosedQuestions = 0;\r\n\r\n\r\n\r\n    for (let index = 0; index < questionAnswerData.length; index++) {\r\n     \r\n      if (questionAnswerData[index].questionAnswerText[index + 1].userType!=='Premium'){\r\n        if (!questionAnswerData[index].haveAnAnswer) {\r\n          premiumOpenQuestions++;\r\n        } else {\r\n          premiumClosedQuestions++;\r\n        }\r\n      }\r\n\r\n       if (\r\n         questionAnswerData[index].questionAnswerText[index + 1].userType ===\r\n         'Premium'\r\n       ) {\r\n         if (!questionAnswerData[index].haveAnAnswer) {\r\n           adminOpenQuestions++;\r\n         } else {\r\n           adminClosedQuestions++;\r\n         }\r\n       }\r\n        \r\n    }\r\n\r\n    this.setState({\r\n      premiumOpenQuestions: premiumOpenQuestions,\r\n      premiumClosedQuestions: premiumClosedQuestions,\r\n      ad\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Description - This function show the average rate given by the users\r\n   */\r\n  calculateRate() {\r\n    const questionAnswerData = this.state.questionAnswerData;\r\n    let rate = 0;\r\n    let users = 0;\r\n    let index = 0;\r\n    for (; index < questionAnswerData.length; index++) {\r\n      if (\r\n        questionAnswerData[index].haveAnAnswer &&\r\n        questionAnswerData[index].selectedStars > 0\r\n      ) {\r\n        rate = rate + questionAnswerData[index].selectedStars;\r\n        users = users + 1;\r\n      }\r\n    }\r\n\r\n    if (users > 0) {\r\n      const overallRate = rate / users;\r\n      this.setState({\r\n        overallUsersRate: overallRate,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function get all the data about the learned components from the server\r\n   */\r\n  async getLearnedData() {\r\n    try {\r\n      const response = await fetch(\r\n        'http://localhost:5000/reports/getLearnedData',\r\n        {\r\n          method: 'POST',\r\n          crossDomain: true,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            'Accept-Control-Allow-Origin': '*',\r\n          },\r\n        }\r\n      );\r\n      const result = await response.json();\r\n      this.setState({\r\n        learnedData: result,\r\n      });\r\n\r\n      // Call the function here to calculate most learned component\r\n      if (this.state.learnedData.length > 0)\r\n        this.calculateMostLearnedComponent();\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function show the most learned component in the server\r\n   */\r\n  calculateMostLearnedComponent = () => {\r\n    const componentCounts = {};\r\n\r\n    this.state.learnedData.forEach(user => {\r\n      Object.keys(user).forEach(component => {\r\n        if (user[component].haveLearned) {\r\n          if (componentCounts[component]) {\r\n            componentCounts[component]++;\r\n          } else {\r\n            componentCounts[component] = 1;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Find the most learned component\r\n    let mostLearnedComponent = null;\r\n    let highestCount = 0;\r\n    for (const component in componentCounts) {\r\n      if (componentCounts[component] > highestCount) {\r\n        highestCount = componentCounts[component];\r\n        mostLearnedComponent = component;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      mostLearnedComp: mostLearnedComponent,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='PC BUILDER ADMIN' />\r\n        <div className={style.adminHome}>\r\n          <section className={style.section}>\r\n            <DiagnosticInformationLayout\r\n              h2='Admin Questions'\r\n              text={\r\n                <>\r\n                  open {this.state.premiumOpenQuestions}\r\n                  <br />\r\n                  close {this.state.premiumClosedQuestions}\r\n                </>\r\n              }\r\n              to='/questionsAnswersReportAdmin'\r\n              name='More Info'\r\n            />\r\n            <DiagnosticInformationLayout\r\n              h2='Premium Questions'\r\n              text={\r\n                <>\r\n                  open {this.state.premiumOpenQuestions}\r\n                  <br />\r\n                  close {this.state.premiumClosedQuestions}\r\n                </>\r\n              }\r\n              to='/questionsAnswersReportAdmin'\r\n              name='More Info'\r\n            />\r\n\r\n            <DiagnosticInformationLayout\r\n              h2='Overall Users Rate'\r\n              text={\r\n                this.state.overallUsersRate > 0\r\n                  ? Array.from(\r\n                      { length: this.state.overallUsersRate },\r\n                      (_, index) => <span key={index}>★</span>\r\n                    )\r\n                  : 'No Data'\r\n              }\r\n              to='/questionsAnswersReportPremium'\r\n              name='More Info'\r\n            />\r\n            <DiagnosticInformationLayout\r\n              h2='Amount Of Users'\r\n              text={this.state.amountOfUsers}\r\n              to='/usersDataReportAdmin'\r\n              name='More Info'\r\n            />\r\n\r\n            <DiagnosticInformationLayout\r\n              h2='Most Learned Component '\r\n              text={this.state.mostLearnedComp}\r\n              to='/learnedDataReport'\r\n              name='More Info'\r\n            />\r\n          </section>\r\n        </div>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}