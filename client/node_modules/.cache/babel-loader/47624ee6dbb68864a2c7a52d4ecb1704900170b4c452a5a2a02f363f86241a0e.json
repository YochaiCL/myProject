{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\userPages\\\\pages\\\\questionAnswerUser\\\\existsQuestionsUser\\\\ExistsQuestionsUser.js\";\n// import React, { Component } from 'react';\n// import PageLayout from '../../../layouts/pageLayout/PageLayout';\n// import Header from '../../../../commonComponents/header/Header';\n// import style from './existsQuestionsUser.module.css';\n// import Button from '../../../../commonComponents/button/Button';\n\n// /**\n//  * Description - This class show the question/answer data\n//  */\n// export default class ExistsQuestionsUser extends Component {\n//   state = {\n//     questionAnswerData: [],\n//     showData: false,\n//     selectIndex: null,\n//     questionText: '',\n//     questionText2: '',\n//     userId: JSON.parse(localStorage.getItem('user'))._id,\n//     selectedStars: 0,\n//   };\n\n//   /**\n//    * Description - This function get all the question/answer from the server\n//    */\n//   async getQuestionAnswer() {\n//     const response = await fetch(\n//       'http://localhost:5000/userQuestionAnswer/getData',\n//       {\n//         method: 'POST',\n//         crossDomain: true,\n//         headers: {\n//           'Content-Type': 'application/json',\n//           Accept: 'application/json',\n//           'Accept-Control-Allow-Origin': '*',\n//         },\n\n//         body: JSON.stringify({\n//           userId: this.state.userId,\n//         }),\n//       }\n//     );\n//     const result = await response.json();\n//     result.sort((a, b) => a.questionName.localeCompare(b.questionName));\n//     this.setState({ questionAnswerData: result });\n//   }\n\n//   /**\n//    * Description - This function activate the getQuestionAnswer function when the page is uploaded\n//    */\n//   componentDidMount() {\n//     this.getQuestionAnswer();\n//   }\n\n//   /**\n//    * Description - This function show the question/answer data\n//    * @param {*} index  - Selected question\n//    */\n//   handelClick = index => {\n//     this.setState({\n//       questionText2: this.state.questionAnswerData[index].questionText,\n//     });\n//     this.setState({\n//       showData: true,\n//       selectIndex: index,\n//     });\n//   };\n\n//   /**\n//    * Description - This function delete selected Question from the database if the question have no answer\n//    */\n//   deleteQuestion(questionName) {\n//     let result = this.state.questionAnswerData.filter(item => {\n//       return item.questionName !== questionName;\n//     });\n//     this.setState({ questionAnswerData: result });\n\n//     try {\n//       fetch('http://localhost:5000/userQuestionAnswer/deleteQuestionAnswer', {\n//         method: 'POST',\n//         crossDomain: true,\n//         headers: {\n//           'Content-Type': 'application/json',\n//           Accept: 'application/json',\n//           'Access-Control-Allow-Origin': '*',\n//         },\n//         body: JSON.stringify({\n//           userId: this.state.userId,\n//           questionName: questionName,\n//         }),\n//       })\n//         .then(res => res.json())\n//         .then(data => {\n//           if (data.status === 'Question deleted') {\n//             this.setState({ showResult: 'Test has been deleted' });\n//             this.setState({ showData: false });\n//             setTimeout(() => {\n//               this.setState({\n//                 showResult: '',\n//               });\n//             }, 2000);\n//           }\n//         });\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n\n//   /**\n//    * Description - This function define the stars amount by the user selection\n//    * @param {*} selectedStarCount - Amount of stars that the user selected\n//    */\n//   handleStarClick(selectedStarCount) {\n//     const dataStar = {\n//       userIdStar: this.state.userId,\n//       questionName:\n//         this.state.questionAnswerData[this.state.selectIndex].questionName,\n//       selectedStars: selectedStarCount,\n//     };\n\n//     try {\n//       fetch('http://localhost:5000/userQuestionAnswer/updateStars', {\n//         method: 'POST',\n//         crossDomain: true,\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(dataStar),\n//       })\n//         .then(res => res.json())\n//         .then(data => {\n//           if (data.status === 'true') {\n//             this.setState({ showResult: 'Star has been updated' });\n//             setTimeout(() => {\n//               this.setState({\n//                 showResult: '',\n//               });\n//             }, 2000);\n//             this.getQuestionAnswer();\n//           }\n//         });\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n\n//   /**\n//    * Description - This function update the question text in the server\n//    * @param {*} e - Question text value\n//    */\n//   async handleSubmit(e) {\n//     e.preventDefault();\n//     let dataToSend = {\n//       userId: this.state.userId,\n//       questionText:\n//         this.state.questionAnswerData[this.state.selectIndex].questionText +\n//         ' ? ' +\n//         this.state.questionText,\n//       questionName:\n//         this.state.questionAnswerData[this.state.selectIndex].questionName,\n//     };\n\n//     const questionInputData = {\n//       method: 'POST',\n//       crossDomain: true,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Accept: 'application/json',\n//         'Accept-Control-Allow-Origin': '*',\n//       },\n//       body: JSON.stringify(dataToSend),\n//     };\n\n//     const response = await fetch(\n//       'http://localhost:5000/userQuestionAnswer/updateQuestion',\n//       questionInputData\n//     );\n//     const result = await response.json();\n//     if (result.status === 'true') {\n//       this.setState({\n//         showResult: 'The Question has been updated',\n//       });\n//       this.setState({\n//         questionText2:\n//           this.state.questionAnswerData[this.state.selectIndex].questionText +\n//           ' ? ' +\n//           this.state.questionText,\n//       });\n\n//       setTimeout(() => {\n//         this.setState({\n//           showResult: '',\n//         });\n//       }, 1000);\n//     }\n//   }\n\n//   render() {\n//     const { questionAnswerData, showData, selectIndex } = this.state;\n//     return (\n//       <PageLayout>\n//         <Header h1Heading='Exists Questions/Answers' />\n//         <section className={style.external}>\n//           <section className={style.model}>\n//             <h2>List Of Questions/Answers</h2>\n//             {questionAnswerData.map((qA, index) => (\n//               <section key={index}>\n//                 <button\n//                   onClick={() => {\n//                     this.handelClick(index);\n//                   }}\n//                   className={style.productButton}\n//                 >\n//                   {qA.questionName}\n//                 </button>\n//               </section>\n//             ))}\n//           </section>\n//           {showData &&\n//             selectIndex !== null &&\n//             selectIndex < questionAnswerData.length && (\n//               <section className={style.showAllData}>\n//                 <h2 className={style.h2}>Question/Answer Data</h2>\n//                 <div>\n//                   <h3 className={style.h3}>\n//                     <span className={style.span}> Question Date:</span>\n//                     {questionAnswerData[selectIndex].questionDate}\n//                   </h3>\n//                   <h3 className={style.h3}>\n//                     <span className={style.span}> Question Name:</span>\n//                     {questionAnswerData[selectIndex].questionName}\n//                   </h3>\n//                   <h3 className={style.h3}>\n//                     <span className={style.span}> Question Text:</span>\n//                     {this.state.questionText2\n//                       .split('?')\n//                       .map((part, index, array) => (\n//                         <span key={index}>\n//                           {part}\n//                           {index !== array.length - 1 && (\n//                             <span style={{ color: 'red' }}>?</span>\n//                           )}\n//                         </span>\n//                       ))}\n//                   </h3>\n//                   {!questionAnswerData[selectIndex].haveAnAnswer && (\n//                     <button\n//                       onClick={() => {\n//                         const indexToDelete =\n//                           questionAnswerData[selectIndex].questionName;\n\n//                         this.deleteQuestion(indexToDelete);\n//                       }}\n//                       className={style.deleteButton}\n//                     >\n//                       Delete\n//                     </button>\n//                   )}\n\n//                   <h3 className={style.h3}>\n//                     <span className={style.span}>Question Answer:</span>\n//                     {questionAnswerData[selectIndex].answerText\n//                       .split('|')\n//                       .map((part, index, array) => (\n//                         <span key={index}>\n//                           {part}\n//                           {index !== array.length - 1 && (\n//                             <span style={{ color: 'red' }}>|</span>\n//                           )}\n//                         </span>\n//                       ))}\n//                   </h3>\n//                   <section>\n//                     <form\n//                       onSubmit={this.handleSubmit.bind(this)}\n//                       className={style.form}\n//                     >\n//                       <textarea\n//                         className={style.textArea}\n//                         value={this.state.questionText}\n//                         name='tarea'\n//                         rows='6'\n//                         cols='40'\n//                         placeholder=' Write text here'\n//                         required\n//                         onChange={e =>\n//                           this.setState({ questionText: e.target.value })\n//                         }\n//                       ></textarea>\n\n//                       <Button type='submit' text='submit' />\n\n//                       {questionAnswerData[selectIndex].haveAnAnswer &&\n//                         questionAnswerData[selectIndex].selectedStars === 0 && (\n//                           <section className={style.starsLocation}>\n//                             {[1, 2, 3, 4, 5].map(star => (\n//                               <span\n//                                 key={star}\n//                                 style={{\n//                                   cursor: 'pointer',\n//                                   color:\n//                                     star <=\n//                                     questionAnswerData[selectIndex]\n//                                       .selectedStars\n//                                       ? 'orange'\n//                                       : 'grey',\n//                                   fontSize: `60px`,\n//                                 }}\n//                                 onClick={() => {\n//                                   this.setState({\n//                                     selectedStars:\n//                                       star <=\n//                                       questionAnswerData[selectIndex]\n//                                         .selectedStars\n//                                         ? 0\n//                                         : star,\n//                                   });\n//                                   this.handleStarClick(\n//                                     star <=\n//                                       questionAnswerData[selectIndex]\n//                                         .selectedStars\n//                                       ? 0\n//                                       : star\n//                                   );\n//                                 }}\n//                               >\n//                                 ★\n//                               </span>\n//                             ))}\n//                           </section>\n//                         )}\n//                     </form>\n//                     <p className={style.showResult}>{this.state.showResult}</p>\n//                   </section>\n//                 </div>\n//               </section>\n//             )}\n//         </section>\n//       </PageLayout>\n//     );\n//   }\n// }\n\nimport React, { Component } from 'react';\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\nimport Header from '../../../../commonComponents/header/Header';\nimport style from './existsQuestionsUser.module.css';\nimport Button from '../../../../commonComponents/button/Button';\n\n/**\r\n * Description - This class show the question/answer data\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ExistsQuestionsUser extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      questionAnswerData: [],\n      showData: false,\n      selectIndex: null,\n      userId: JSON.parse(localStorage.getItem('user'))._id,\n      selectedStars: 0,\n      questionAnswer: []\n    };\n    this.handelClick = index => {\n      this.setState({\n        questionAnswer: this.state.questionAnswerData[index].questionAnswerText\n      });\n      this.setState({\n        showData: true,\n        selectIndex: index\n      });\n      console.log(this.state.questionAnswer);\n    };\n  }\n  /**\r\n   * Description - This function get all the question/answer from the server\r\n   */\n  async getQuestionAnswer() {\n    const response = await fetch('http://localhost:5000/userQuestionAnswer/getData', {\n      method: 'POST',\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        userId: this.state.userId\n      })\n    });\n    const result = await response.json();\n    result.sort((a, b) => a.questionName.localeCompare(b.questionName));\n    this.setState({\n      questionAnswerData: result\n    });\n  }\n\n  /**\r\n   * Description - This function activate the getQuestionAnswer function when the page is uploaded\r\n   */\n  componentDidMount() {\n    this.getQuestionAnswer();\n  }\n\n  /**\r\n   * Description - This function show the question/answer data\r\n   * @param {*} index  - Selected question\r\n   */\n\n  render() {\n    const {\n      questionAnswerData,\n      showData,\n      selectIndex\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"Exists Questions/Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: style.external,\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: style.model,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"List Of Questions/Answers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 13\n          }, this), questionAnswerData.map((qA, index) => /*#__PURE__*/_jsxDEV(\"section\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                this.handelClick(index);\n              },\n              className: style.productButton,\n              children: qA.questionName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), showData && selectIndex !== null && selectIndex < questionAnswerData.length && /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 15\n        }, this)\n        // <section className={style.showAllData}>\n        //   <h2 className={style.h2}>Question/Answer Data</h2>\n        //   <div>\n        //     <h3 className={style.h3}>\n        //       <span className={style.span}> Question Date:</span>\n        //       {questionAnswerData[selectIndex].questionDate}\n        //     </h3>\n        //     <h3 className={style.h3}>\n        //       <span className={style.span}> Question Name:</span>\n        //       {questionAnswerData[selectIndex].questionName}\n        //     </h3>\n        //     <h3 className={style.h3}>\n        //       <span className={style.span}> Question Text:</span>\n        //       {this.state.questionText2\n        //         .split('?')\n        //         .map((part, index, array) => (\n        //           <span key={index}>\n        //             {part}\n        //             {index !== array.length - 1 && (\n        //               <span style={{ color: 'red' }}>?</span>\n        //             )}\n        //           </span>\n        //         ))}\n        //     </h3>\n        //     {!questionAnswerData[selectIndex].haveAnAnswer && (\n        //       <button\n        //         onClick={() => {\n        //           const indexToDelete =\n        //             questionAnswerData[selectIndex].questionName;\n\n        //           this.deleteQuestion(indexToDelete);\n        //         }}\n        //         className={style.deleteButton}\n        //       >\n        //         Delete\n        //       </button>\n        //     )}\n\n        //     <h3 className={style.h3}>\n        //       <span className={style.span}>Question Answer:</span>\n        //       {questionAnswerData[selectIndex].answerText\n        //         .split('|')\n        //         .map((part, index, array) => (\n        //           <span key={index}>\n        //             {part}\n        //             {index !== array.length - 1 && (\n        //               <span style={{ color: 'red' }}>|</span>\n        //             )}\n        //           </span>\n        //         ))}\n        //     </h3>\n        //     <section>\n        //       <form\n        //         onSubmit={this.handleSubmit.bind(this)}\n        //         className={style.form}\n        //       >\n        //         <textarea\n        //           className={style.textArea}\n        //           value={this.state.questionText}\n        //           name='tarea'\n        //           rows='6'\n        //           cols='40'\n        //           placeholder=' Write text here'\n        //           required\n        //           onChange={e =>\n        //             this.setState({ questionText: e.target.value })\n        //           }\n        //         ></textarea>\n\n        //         <Button type='submit' text='submit' />\n\n        //         {questionAnswerData[selectIndex].haveAnAnswer &&\n        //           questionAnswerData[selectIndex].selectedStars === 0 && (\n        //             <section className={style.starsLocation}>\n        //               {[1, 2, 3, 4, 5].map(star => (\n        //                 <span\n        //                   key={star}\n        //                   style={{\n        //                     cursor: 'pointer',\n        //                     color:\n        //                       star <=\n        //                       questionAnswerData[selectIndex]\n        //                         .selectedStars\n        //                         ? 'orange'\n        //                         : 'grey',\n        //                     fontSize: `60px`,\n        //                   }}\n        //                   onClick={() => {\n        //                     this.setState({\n        //                       selectedStars:\n        //                         star <=\n        //                         questionAnswerData[selectIndex]\n        //                           .selectedStars\n        //                           ? 0\n        //                           : star,\n        //                     });\n        //                     this.handleStarClick(\n        //                       star <=\n        //                         questionAnswerData[selectIndex]\n        //                           .selectedStars\n        //                         ? 0\n        //                         : star\n        //                     );\n        //                   }}\n        //                 >\n        //                   ★\n        //                 </span>\n        //               ))}\n        //             </section>\n        //           )}\n        //       </form>\n        //       <p className={style.showResult}>{this.state.showResult}</p>\n        //     </section>\n        //   </div>\n        // </section>\n        ]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","PageLayout","Header","style","Button","ExistsQuestionsUser","state","questionAnswerData","showData","selectIndex","userId","JSON","parse","localStorage","getItem","_id","selectedStars","questionAnswer","handelClick","index","setState","questionAnswerText","console","log","getQuestionAnswer","response","fetch","method","crossDomain","headers","Accept","body","stringify","result","json","sort","a","b","questionName","localeCompare","componentDidMount","render","external","model","map","qA","productButton","length"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/userPages/pages/questionAnswerUser/existsQuestionsUser/ExistsQuestionsUser.js"],"sourcesContent":["// import React, { Component } from 'react';\r\n// import PageLayout from '../../../layouts/pageLayout/PageLayout';\r\n// import Header from '../../../../commonComponents/header/Header';\r\n// import style from './existsQuestionsUser.module.css';\r\n// import Button from '../../../../commonComponents/button/Button';\r\n\r\n// /**\r\n//  * Description - This class show the question/answer data\r\n//  */\r\n// export default class ExistsQuestionsUser extends Component {\r\n//   state = {\r\n//     questionAnswerData: [],\r\n//     showData: false,\r\n//     selectIndex: null,\r\n//     questionText: '',\r\n//     questionText2: '',\r\n//     userId: JSON.parse(localStorage.getItem('user'))._id,\r\n//     selectedStars: 0,\r\n//   };\r\n\r\n//   /**\r\n//    * Description - This function get all the question/answer from the server\r\n//    */\r\n//   async getQuestionAnswer() {\r\n//     const response = await fetch(\r\n//       'http://localhost:5000/userQuestionAnswer/getData',\r\n//       {\r\n//         method: 'POST',\r\n//         crossDomain: true,\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           Accept: 'application/json',\r\n//           'Accept-Control-Allow-Origin': '*',\r\n//         },\r\n\r\n//         body: JSON.stringify({\r\n//           userId: this.state.userId,\r\n//         }),\r\n//       }\r\n//     );\r\n//     const result = await response.json();\r\n//     result.sort((a, b) => a.questionName.localeCompare(b.questionName));\r\n//     this.setState({ questionAnswerData: result });\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function activate the getQuestionAnswer function when the page is uploaded\r\n//    */\r\n//   componentDidMount() {\r\n//     this.getQuestionAnswer();\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function show the question/answer data\r\n//    * @param {*} index  - Selected question\r\n//    */\r\n//   handelClick = index => {\r\n//     this.setState({\r\n//       questionText2: this.state.questionAnswerData[index].questionText,\r\n//     });\r\n//     this.setState({\r\n//       showData: true,\r\n//       selectIndex: index,\r\n//     });\r\n//   };\r\n\r\n//   /**\r\n//    * Description - This function delete selected Question from the database if the question have no answer\r\n//    */\r\n//   deleteQuestion(questionName) {\r\n//     let result = this.state.questionAnswerData.filter(item => {\r\n//       return item.questionName !== questionName;\r\n//     });\r\n//     this.setState({ questionAnswerData: result });\r\n\r\n//     try {\r\n//       fetch('http://localhost:5000/userQuestionAnswer/deleteQuestionAnswer', {\r\n//         method: 'POST',\r\n//         crossDomain: true,\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           Accept: 'application/json',\r\n//           'Access-Control-Allow-Origin': '*',\r\n//         },\r\n//         body: JSON.stringify({\r\n//           userId: this.state.userId,\r\n//           questionName: questionName,\r\n//         }),\r\n//       })\r\n//         .then(res => res.json())\r\n//         .then(data => {\r\n//           if (data.status === 'Question deleted') {\r\n//             this.setState({ showResult: 'Test has been deleted' });\r\n//             this.setState({ showData: false });\r\n//             setTimeout(() => {\r\n//               this.setState({\r\n//                 showResult: '',\r\n//               });\r\n//             }, 2000);\r\n//           }\r\n//         });\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function define the stars amount by the user selection\r\n//    * @param {*} selectedStarCount - Amount of stars that the user selected\r\n//    */\r\n//   handleStarClick(selectedStarCount) {\r\n//     const dataStar = {\r\n//       userIdStar: this.state.userId,\r\n//       questionName:\r\n//         this.state.questionAnswerData[this.state.selectIndex].questionName,\r\n//       selectedStars: selectedStarCount,\r\n//     };\r\n\r\n//     try {\r\n//       fetch('http://localhost:5000/userQuestionAnswer/updateStars', {\r\n//         method: 'POST',\r\n//         crossDomain: true,\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(dataStar),\r\n//       })\r\n//         .then(res => res.json())\r\n//         .then(data => {\r\n//           if (data.status === 'true') {\r\n//             this.setState({ showResult: 'Star has been updated' });\r\n//             setTimeout(() => {\r\n//               this.setState({\r\n//                 showResult: '',\r\n//               });\r\n//             }, 2000);\r\n//             this.getQuestionAnswer();\r\n//           }\r\n//         });\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function update the question text in the server\r\n//    * @param {*} e - Question text value\r\n//    */\r\n//   async handleSubmit(e) {\r\n//     e.preventDefault();\r\n//     let dataToSend = {\r\n//       userId: this.state.userId,\r\n//       questionText:\r\n//         this.state.questionAnswerData[this.state.selectIndex].questionText +\r\n//         ' ? ' +\r\n//         this.state.questionText,\r\n//       questionName:\r\n//         this.state.questionAnswerData[this.state.selectIndex].questionName,\r\n//     };\r\n\r\n//     const questionInputData = {\r\n//       method: 'POST',\r\n//       crossDomain: true,\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         Accept: 'application/json',\r\n//         'Accept-Control-Allow-Origin': '*',\r\n//       },\r\n//       body: JSON.stringify(dataToSend),\r\n//     };\r\n\r\n//     const response = await fetch(\r\n//       'http://localhost:5000/userQuestionAnswer/updateQuestion',\r\n//       questionInputData\r\n//     );\r\n//     const result = await response.json();\r\n//     if (result.status === 'true') {\r\n//       this.setState({\r\n//         showResult: 'The Question has been updated',\r\n//       });\r\n//       this.setState({\r\n//         questionText2:\r\n//           this.state.questionAnswerData[this.state.selectIndex].questionText +\r\n//           ' ? ' +\r\n//           this.state.questionText,\r\n//       });\r\n\r\n//       setTimeout(() => {\r\n//         this.setState({\r\n//           showResult: '',\r\n//         });\r\n//       }, 1000);\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     const { questionAnswerData, showData, selectIndex } = this.state;\r\n//     return (\r\n//       <PageLayout>\r\n//         <Header h1Heading='Exists Questions/Answers' />\r\n//         <section className={style.external}>\r\n//           <section className={style.model}>\r\n//             <h2>List Of Questions/Answers</h2>\r\n//             {questionAnswerData.map((qA, index) => (\r\n//               <section key={index}>\r\n//                 <button\r\n//                   onClick={() => {\r\n//                     this.handelClick(index);\r\n//                   }}\r\n//                   className={style.productButton}\r\n//                 >\r\n//                   {qA.questionName}\r\n//                 </button>\r\n//               </section>\r\n//             ))}\r\n//           </section>\r\n//           {showData &&\r\n//             selectIndex !== null &&\r\n//             selectIndex < questionAnswerData.length && (\r\n//               <section className={style.showAllData}>\r\n//                 <h2 className={style.h2}>Question/Answer Data</h2>\r\n//                 <div>\r\n//                   <h3 className={style.h3}>\r\n//                     <span className={style.span}> Question Date:</span>\r\n//                     {questionAnswerData[selectIndex].questionDate}\r\n//                   </h3>\r\n//                   <h3 className={style.h3}>\r\n//                     <span className={style.span}> Question Name:</span>\r\n//                     {questionAnswerData[selectIndex].questionName}\r\n//                   </h3>\r\n//                   <h3 className={style.h3}>\r\n//                     <span className={style.span}> Question Text:</span>\r\n//                     {this.state.questionText2\r\n//                       .split('?')\r\n//                       .map((part, index, array) => (\r\n//                         <span key={index}>\r\n//                           {part}\r\n//                           {index !== array.length - 1 && (\r\n//                             <span style={{ color: 'red' }}>?</span>\r\n//                           )}\r\n//                         </span>\r\n//                       ))}\r\n//                   </h3>\r\n//                   {!questionAnswerData[selectIndex].haveAnAnswer && (\r\n//                     <button\r\n//                       onClick={() => {\r\n//                         const indexToDelete =\r\n//                           questionAnswerData[selectIndex].questionName;\r\n\r\n//                         this.deleteQuestion(indexToDelete);\r\n//                       }}\r\n//                       className={style.deleteButton}\r\n//                     >\r\n//                       Delete\r\n//                     </button>\r\n//                   )}\r\n\r\n//                   <h3 className={style.h3}>\r\n//                     <span className={style.span}>Question Answer:</span>\r\n//                     {questionAnswerData[selectIndex].answerText\r\n//                       .split('|')\r\n//                       .map((part, index, array) => (\r\n//                         <span key={index}>\r\n//                           {part}\r\n//                           {index !== array.length - 1 && (\r\n//                             <span style={{ color: 'red' }}>|</span>\r\n//                           )}\r\n//                         </span>\r\n//                       ))}\r\n//                   </h3>\r\n//                   <section>\r\n//                     <form\r\n//                       onSubmit={this.handleSubmit.bind(this)}\r\n//                       className={style.form}\r\n//                     >\r\n//                       <textarea\r\n//                         className={style.textArea}\r\n//                         value={this.state.questionText}\r\n//                         name='tarea'\r\n//                         rows='6'\r\n//                         cols='40'\r\n//                         placeholder=' Write text here'\r\n//                         required\r\n//                         onChange={e =>\r\n//                           this.setState({ questionText: e.target.value })\r\n//                         }\r\n//                       ></textarea>\r\n\r\n//                       <Button type='submit' text='submit' />\r\n\r\n//                       {questionAnswerData[selectIndex].haveAnAnswer &&\r\n//                         questionAnswerData[selectIndex].selectedStars === 0 && (\r\n//                           <section className={style.starsLocation}>\r\n//                             {[1, 2, 3, 4, 5].map(star => (\r\n//                               <span\r\n//                                 key={star}\r\n//                                 style={{\r\n//                                   cursor: 'pointer',\r\n//                                   color:\r\n//                                     star <=\r\n//                                     questionAnswerData[selectIndex]\r\n//                                       .selectedStars\r\n//                                       ? 'orange'\r\n//                                       : 'grey',\r\n//                                   fontSize: `60px`,\r\n//                                 }}\r\n//                                 onClick={() => {\r\n//                                   this.setState({\r\n//                                     selectedStars:\r\n//                                       star <=\r\n//                                       questionAnswerData[selectIndex]\r\n//                                         .selectedStars\r\n//                                         ? 0\r\n//                                         : star,\r\n//                                   });\r\n//                                   this.handleStarClick(\r\n//                                     star <=\r\n//                                       questionAnswerData[selectIndex]\r\n//                                         .selectedStars\r\n//                                       ? 0\r\n//                                       : star\r\n//                                   );\r\n//                                 }}\r\n//                               >\r\n//                                 ★\r\n//                               </span>\r\n//                             ))}\r\n//                           </section>\r\n//                         )}\r\n//                     </form>\r\n//                     <p className={style.showResult}>{this.state.showResult}</p>\r\n//                   </section>\r\n//                 </div>\r\n//               </section>\r\n//             )}\r\n//         </section>\r\n//       </PageLayout>\r\n//     );\r\n//   }\r\n// }\r\n\r\nimport React, { Component } from 'react';\r\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\r\nimport Header from '../../../../commonComponents/header/Header';\r\nimport style from './existsQuestionsUser.module.css';\r\nimport Button from '../../../../commonComponents/button/Button';\r\n\r\n/**\r\n * Description - This class show the question/answer data\r\n */\r\nexport default class ExistsQuestionsUser extends Component {\r\n  state = {\r\n    questionAnswerData: [],\r\n    showData: false,\r\n    selectIndex: null,\r\n    userId: JSON.parse(localStorage.getItem('user'))._id,\r\n    selectedStars: 0,\r\n    questionAnswer: [],\r\n  };\r\n\r\n  /**\r\n   * Description - This function get all the question/answer from the server\r\n   */\r\n  async getQuestionAnswer() {\r\n    const response = await fetch(\r\n      'http://localhost:5000/userQuestionAnswer/getData',\r\n      {\r\n        method: 'POST',\r\n        crossDomain: true,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          'Accept-Control-Allow-Origin': '*',\r\n        },\r\n\r\n        body: JSON.stringify({\r\n          userId: this.state.userId,\r\n        }),\r\n      }\r\n    );\r\n    const result = await response.json();\r\n    result.sort((a, b) => a.questionName.localeCompare(b.questionName));\r\n    this.setState({\r\n      questionAnswerData: result,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Description - This function activate the getQuestionAnswer function when the page is uploaded\r\n   */\r\n  componentDidMount() {\r\n    this.getQuestionAnswer();\r\n  }\r\n\r\n  /**\r\n   * Description - This function show the question/answer data\r\n   * @param {*} index  - Selected question\r\n   */\r\n  handelClick = index => {\r\n   \r\n    this.setState({\r\n      questionAnswer: this.state.questionAnswerData[index].questionAnswerText,\r\n    });\r\n    this.setState({\r\n      showData: true,\r\n      selectIndex: index,\r\n    });\r\n    console.log(this.state.questionAnswer)\r\n  };\r\n  render() {\r\n    const { questionAnswerData, showData, selectIndex } = this.state;\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='Exists Questions/Answers' />\r\n        <section className={style.external}>\r\n          <section className={style.model}>\r\n            <h2>List Of Questions/Answers</h2>\r\n            {questionAnswerData.map((qA, index) => (\r\n              <section key={index}>\r\n                <button\r\n                  onClick={() => {\r\n                    this.handelClick(index);\r\n                  }}\r\n                  className={style.productButton}\r\n                >\r\n                  {qA.questionName}\r\n                </button>\r\n              </section>\r\n            ))}\r\n          </section>\r\n          {showData &&\r\n            selectIndex !== null &&\r\n            selectIndex < questionAnswerData.length && (\r\n              <div></div>\r\n              // <section className={style.showAllData}>\r\n              //   <h2 className={style.h2}>Question/Answer Data</h2>\r\n              //   <div>\r\n              //     <h3 className={style.h3}>\r\n              //       <span className={style.span}> Question Date:</span>\r\n              //       {questionAnswerData[selectIndex].questionDate}\r\n              //     </h3>\r\n              //     <h3 className={style.h3}>\r\n              //       <span className={style.span}> Question Name:</span>\r\n              //       {questionAnswerData[selectIndex].questionName}\r\n              //     </h3>\r\n              //     <h3 className={style.h3}>\r\n              //       <span className={style.span}> Question Text:</span>\r\n              //       {this.state.questionText2\r\n              //         .split('?')\r\n              //         .map((part, index, array) => (\r\n              //           <span key={index}>\r\n              //             {part}\r\n              //             {index !== array.length - 1 && (\r\n              //               <span style={{ color: 'red' }}>?</span>\r\n              //             )}\r\n              //           </span>\r\n              //         ))}\r\n              //     </h3>\r\n              //     {!questionAnswerData[selectIndex].haveAnAnswer && (\r\n              //       <button\r\n              //         onClick={() => {\r\n              //           const indexToDelete =\r\n              //             questionAnswerData[selectIndex].questionName;\r\n\r\n              //           this.deleteQuestion(indexToDelete);\r\n              //         }}\r\n              //         className={style.deleteButton}\r\n              //       >\r\n              //         Delete\r\n              //       </button>\r\n              //     )}\r\n\r\n              //     <h3 className={style.h3}>\r\n              //       <span className={style.span}>Question Answer:</span>\r\n              //       {questionAnswerData[selectIndex].answerText\r\n              //         .split('|')\r\n              //         .map((part, index, array) => (\r\n              //           <span key={index}>\r\n              //             {part}\r\n              //             {index !== array.length - 1 && (\r\n              //               <span style={{ color: 'red' }}>|</span>\r\n              //             )}\r\n              //           </span>\r\n              //         ))}\r\n              //     </h3>\r\n              //     <section>\r\n              //       <form\r\n              //         onSubmit={this.handleSubmit.bind(this)}\r\n              //         className={style.form}\r\n              //       >\r\n              //         <textarea\r\n              //           className={style.textArea}\r\n              //           value={this.state.questionText}\r\n              //           name='tarea'\r\n              //           rows='6'\r\n              //           cols='40'\r\n              //           placeholder=' Write text here'\r\n              //           required\r\n              //           onChange={e =>\r\n              //             this.setState({ questionText: e.target.value })\r\n              //           }\r\n              //         ></textarea>\r\n\r\n              //         <Button type='submit' text='submit' />\r\n\r\n              //         {questionAnswerData[selectIndex].haveAnAnswer &&\r\n              //           questionAnswerData[selectIndex].selectedStars === 0 && (\r\n              //             <section className={style.starsLocation}>\r\n              //               {[1, 2, 3, 4, 5].map(star => (\r\n              //                 <span\r\n              //                   key={star}\r\n              //                   style={{\r\n              //                     cursor: 'pointer',\r\n              //                     color:\r\n              //                       star <=\r\n              //                       questionAnswerData[selectIndex]\r\n              //                         .selectedStars\r\n              //                         ? 'orange'\r\n              //                         : 'grey',\r\n              //                     fontSize: `60px`,\r\n              //                   }}\r\n              //                   onClick={() => {\r\n              //                     this.setState({\r\n              //                       selectedStars:\r\n              //                         star <=\r\n              //                         questionAnswerData[selectIndex]\r\n              //                           .selectedStars\r\n              //                           ? 0\r\n              //                           : star,\r\n              //                     });\r\n              //                     this.handleStarClick(\r\n              //                       star <=\r\n              //                         questionAnswerData[selectIndex]\r\n              //                           .selectedStars\r\n              //                         ? 0\r\n              //                         : star\r\n              //                     );\r\n              //                   }}\r\n              //                 >\r\n              //                   ★\r\n              //                 </span>\r\n              //               ))}\r\n              //             </section>\r\n              //           )}\r\n              //       </form>\r\n              //       <p className={style.showResult}>{this.state.showResult}</p>\r\n              //     </section>\r\n              //   </div>\r\n              // </section>\r\n            )\r\n            }\r\n\r\n        </section>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappingsxC,OAAOC,UAAU,MAAM,wCAAwC;AAC/D,OAAOC,MAAM,MAAM,4CAA4C;AAC/D,OAAOC,KAAK,MAAM,kCAAkC;AACpD,OAAOC,MAAM,MAAM,4CAA4C;;AAE/D;AACA;AACA;AAFA;AAGA,eAAe,MAAMC,mBAAmB,SAASL,SAAS,CAAC;EAAA;IAAA;IAAA,KACzDM,KAAK,GAAG;MACNC,kBAAkB,EAAE,EAAE;MACtBC,QAAQ,EAAE,KAAK;MACfC,WAAW,EAAE,IAAI;MACjBC,MAAM,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAACC,GAAG;MACpDC,aAAa,EAAE,CAAC;MAChBC,cAAc,EAAE;IAClB,CAAC;IAAA,KAwCDC,WAAW,GAAGC,KAAK,IAAI;MAErB,IAAI,CAACC,QAAQ,CAAC;QACZH,cAAc,EAAE,IAAI,CAACX,KAAK,CAACC,kBAAkB,CAACY,KAAK,CAAC,CAACE;MACvD,CAAC,CAAC;MACF,IAAI,CAACD,QAAQ,CAAC;QACZZ,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAEU;MACf,CAAC,CAAC;MACFG,OAAO,CAACC,GAAG,CAAC,IAAI,CAACjB,KAAK,CAACW,cAAc,CAAC;IACxC,CAAC;EAAA;EAhDD;AACF;AACA;EACE,MAAMO,iBAAiB,GAAG;IACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kDAAkD,EAClD;MACEC,MAAM,EAAE,MAAM;MACdC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE,kBAAkB;QAC1B,6BAA6B,EAAE;MACjC,CAAC;MAEDC,IAAI,EAAEpB,IAAI,CAACqB,SAAS,CAAC;QACnBtB,MAAM,EAAE,IAAI,CAACJ,KAAK,CAACI;MACrB,CAAC;IACH,CAAC,CACF;IACD,MAAMuB,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE;IACpCD,MAAM,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,YAAY,CAACC,aAAa,CAACF,CAAC,CAACC,YAAY,CAAC,CAAC;IACnE,IAAI,CAAClB,QAAQ,CAAC;MACZb,kBAAkB,EAAE0B;IACtB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACEO,iBAAiB,GAAG;IAClB,IAAI,CAAChB,iBAAiB,EAAE;EAC1B;;EAEA;AACF;AACA;AACA;;EAYEiB,MAAM,GAAG;IACP,MAAM;MAAElC,kBAAkB;MAAEC,QAAQ;MAAEC;IAAY,CAAC,GAAG,IAAI,CAACH,KAAK;IAChE,oBACE,QAAC,UAAU;MAAA,wBACT,QAAC,MAAM;QAAC,SAAS,EAAC;MAA0B;QAAA;QAAA;QAAA;MAAA,QAAG,eAC/C;QAAS,SAAS,EAAEH,KAAK,CAACuC,QAAS;QAAA,wBACjC;UAAS,SAAS,EAAEvC,KAAK,CAACwC,KAAM;UAAA,wBAC9B;YAAA,UAAI;UAAyB;YAAA;YAAA;YAAA;UAAA,QAAK,EACjCpC,kBAAkB,CAACqC,GAAG,CAAC,CAACC,EAAE,EAAE1B,KAAK,kBAChC;YAAA,uBACE;cACE,OAAO,EAAE,MAAM;gBACb,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC;cACzB,CAAE;cACF,SAAS,EAAEhB,KAAK,CAAC2C,aAAc;cAAA,UAE9BD,EAAE,CAACP;YAAY;cAAA;cAAA;cAAA;YAAA;UACT,GARGnB,KAAK;YAAA;YAAA;YAAA;UAAA,QAUpB,CAAC;QAAA;UAAA;UAAA;UAAA;QAAA,QACM,EACTX,QAAQ,IACPC,WAAW,KAAK,IAAI,IACpBA,WAAW,GAAGF,kBAAkB,CAACwC,MAAM,iBACrC;UAAA;UAAA;UAAA;QAAA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACD;MAAA;QAAA;QAAA;QAAA;MAAA,QAGK;IAAA;MAAA;MAAA;MAAA;IAAA,QACC;EAEjB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}