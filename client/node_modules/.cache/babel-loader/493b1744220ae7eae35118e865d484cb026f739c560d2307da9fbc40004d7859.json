{"ast":null,"code":"// import React, { Component } from 'react';\n// import Header from '../../../commonComponents/header/Header';\n// import style from './adminHome.module.css';\n// import DiagnosticInformationLayout from '../../layouts/diagnosticInformationLayout/DiagnosticInformationLayout';\n// import PageLayout from '../../layouts/pageLayout/PageLayout';\n\n// /**\n//  * Description This class show all Admin home data\n//  */\n// export default class AdminHome extends Component {\n//   state = {\n//     usersData: [],\n//     amountOfUsers: 0,\n//     questionAnswerData: [],\n//     premiumOpenQuestions: 0,\n//     premiumClosedQuestions: 0,\n//     adminOpenQuestions: 0,\n//     adminClosedQuestions: 0,\n//     overallUsersRate: 0,\n//     mostLearnedComp: '',\n//     learnedData: [],\n//   };\n\n//   /**\n//    * Description - This function activate functions when the page is uploaded\n//    */\n//   async componentDidMount() {\n//     await this.getQuestionAnswer();\n//     this.showQuestionAnswerData();\n//     this.calculateRate();\n//     await this.getUsersData();\n//     this.showAmountOfUser();\n//     await this.getLearnedData();\n//   }\n\n//   /**\n//    * Description - This function checks if the usersData and questionAnswerData state have changed since the previous update. If they have, it triggers the necessary functions to update the related data and calculations.\n//    * @param {*} prevState - previous state of the functions\n//    */\n//   async componentDidUpdate(prevProps, prevState) {\n//     if (prevState.usersData !== this.state.usersData) {\n//       this.showAmountOfUser();\n//     }\n\n//     if (prevState.questionAnswerData !== this.state.questionAnswerData) {\n//       this.showQuestionAnswerData();\n//       this.calculateRate();\n//     }\n//   }\n\n//   /**\n//    * Description - This function get all the data about the users from the server\n//    */\n//   async getUsersData() {\n//     try {\n//       const response = await fetch(\n//         'http://localhost:5000/reports/getUsersData',\n//         {\n//           method: 'POST',\n//           crossDomain: true,\n//           headers: {\n//             'Content-Type': 'application/json',\n//             Accept: 'application/json',\n//             'Accept-Control-Allow-Origin': '*',\n//           },\n//         }\n//       );\n//       const result = await response.json();\n//       this.setState({\n//         usersData: result,\n//       });\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   }\n\n//   /**\n//    * Description - This function calculate the amount of \"User\" have sign up\n//    */\n//   showAmountOfUser() {\n//     const usersData = this.state.usersData;\n//     // console.log(usersData)\n//     let amountOfUsers = 0;\n\n//     for (let index = 0; index < usersData.length; index++) {\n//       amountOfUsers = amountOfUsers + 1;\n//     }\n\n//     this.setState({\n//       amountOfUsers: amountOfUsers,\n//     });\n//   }\n\n//   /**\n//    * Description - This function get all the data of Question / Answer from the server\n//    */\n//   async getQuestionAnswer() {\n//     try {\n//       const response = await fetch(\n//         'http://localhost:5000/reports/getQuestionAnswerData',\n//         {\n//           method: 'POST',\n//           crossDomain: true,\n//           headers: {\n//             'Content-Type': 'application/json',\n//             Accept: 'application/json',\n//             'Accept-Control-Allow-Origin': '*',\n//           },\n//         }\n//       );\n//       const result = await response.json();\n\n//       this.setState({\n//         questionAnswerData: result,\n//       });\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   }\n\n//   /**\n//    * Description - This function show the amount of open and closed questions\n//    */\n//   showQuestionAnswerData() {\n//     const questionAnswerData = this.state.questionAnswerData;\n//     let premiumOpenQuestions = 0;\n//     let premiumClosedQuestions = 0;\n//     let adminOpenQuestions = 0;\n//     let adminClosedQuestions = 0;\n\n//     for (let index = 0; index < questionAnswerData.length; index++) {\n\n//       // console.log(questionAnswerData[index].questionAnswerText[index].userType);\n//       console.log(questionAnswerData[index].length>0?1:0);\n//       // if (\n//       //   questionAnswerData[index].questionAnswerText[index + 1].userType !==\n//       //   'Premium'\n//       // ) {\n//       //   if (!questionAnswerData[index].haveAnAnswer) {\n//       //     premiumOpenQuestions++;\n//       //   } else {\n//       //     premiumClosedQuestions++;\n//       //   }\n//       // }\n\n//       // if (\n//       //   questionAnswerData[index].questionAnswerText[index + 1].userType ===\n//       //   'Premium'\n//       // ) {\n//       //   if (!questionAnswerData[index].haveAnAnswer) {\n//       //     adminOpenQuestions++;\n//       //   } else {\n//       //     adminClosedQuestions++;\n//       //   }\n//       // }\n//     }\n\n//     this.setState({\n//       premiumOpenQuestions: premiumOpenQuestions,\n//       premiumClosedQuestions: premiumClosedQuestions,\n//       adminOpenQuestions: adminOpenQuestions,\n//       adminClosedQuestions: adminClosedQuestions,\n//     });\n//   }\n\n//   /**\n//    * Description - This function show the average rate given by the users\n//    */\n//   calculateRate() {\n//     const questionAnswerData = this.state.questionAnswerData;\n//     let rate = 0;\n//     let users = 0;\n//     let index = 0;\n//     for (; index < questionAnswerData.length; index++) {\n//       if (\n//         questionAnswerData[index].haveAnAnswer &&\n//         questionAnswerData[index].selectedStars > 0\n//       ) {\n//         rate = rate + questionAnswerData[index].selectedStars;\n//         users = users + 1;\n//       }\n//     }\n\n//     if (users > 0) {\n//       const overallRate = rate / users;\n//       this.setState({\n//         overallUsersRate: overallRate,\n//       });\n//     }\n//   }\n\n//   /**\n//    * Description - This function get all the data about the learned components from the server\n//    */\n//   async getLearnedData() {\n//     try {\n//       const response = await fetch(\n//         'http://localhost:5000/reports/getLearnedData',\n//         {\n//           method: 'POST',\n//           crossDomain: true,\n//           headers: {\n//             'Content-Type': 'application/json',\n//             Accept: 'application/json',\n//             'Accept-Control-Allow-Origin': '*',\n//           },\n//         }\n//       );\n//       const result = await response.json();\n//       this.setState({\n//         learnedData: result,\n//       });\n\n//       // Call the function here to calculate most learned component\n//       if (this.state.learnedData.length > 0)\n//         this.calculateMostLearnedComponent();\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   }\n\n//   /**\n//    * Description - This function show the most learned component in the server\n//    */\n//   calculateMostLearnedComponent = () => {\n//     const componentCounts = {};\n\n//     this.state.learnedData.forEach(user => {\n//       Object.keys(user).forEach(component => {\n//         if (user[component].haveLearned) {\n//           if (componentCounts[component]) {\n//             componentCounts[component]++;\n//           } else {\n//             componentCounts[component] = 1;\n//           }\n//         }\n//       });\n//     });\n\n//     // Find the most learned component\n//     let mostLearnedComponent = null;\n//     let highestCount = 0;\n//     for (const component in componentCounts) {\n//       if (componentCounts[component] > highestCount) {\n//         highestCount = componentCounts[component];\n//         mostLearnedComponent = component;\n//       }\n//     }\n\n//     this.setState({\n//       mostLearnedComp: mostLearnedComponent,\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <PageLayout>\n//         <Header h1Heading='PC BUILDER ADMIN' />\n//         <div className={style.adminHome}>\n//           <section className={style.section}>\n//             <DiagnosticInformationLayout\n//               h2='Admin Questions'\n//               text={\n//                 <>\n//                   open {this.state.adminOpenQuestions}\n//                   <br />\n//                   close {this.state.adminClosedQuestions}\n//                 </>\n//               }\n//               to='/adminQuestionAnswer'\n//               name='More Info'\n//             />\n//             <DiagnosticInformationLayout\n//               h2='Premium Questions'\n//               text={\n//                 <>\n//                   open {this.state.premiumOpenQuestions}\n//                   <br />\n//                   close {this.state.premiumClosedQuestions}\n//                 </>\n//               }\n//               to='/questionsAnswersReportAdmin'\n//               name='More Info'\n//             />\n\n//             <DiagnosticInformationLayout\n//               h2='Overall Users Rate'\n//               text={\n//                 this.state.overallUsersRate > 0\n//                   ? Array.from(\n//                       { length: this.state.overallUsersRate },\n//                       (_, index) => <span key={index}>â˜…</span>\n//                     )\n//                   : 'No Data'\n//               }\n//               to='/questionsAnswersReportPremium'\n//               name='More Info'\n//             />\n//             <DiagnosticInformationLayout\n//               h2='Amount Of Users'\n//               text={this.state.amountOfUsers}\n//               to='/usersDataReportAdmin'\n//               name='More Info'\n//             />\n\n//             <DiagnosticInformationLayout\n//               h2='Most Learned Component '\n//               text={this.state.mostLearnedComp}\n//               to='/learnedDataReport'\n//               name='More Info'\n//             />\n//           </section>\n//         </div>\n//       </PageLayout>\n//     );\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/adminPages/pages/adminHome/AdminHome.js"],"sourcesContent":["// import React, { Component } from 'react';\r\n// import Header from '../../../commonComponents/header/Header';\r\n// import style from './adminHome.module.css';\r\n// import DiagnosticInformationLayout from '../../layouts/diagnosticInformationLayout/DiagnosticInformationLayout';\r\n// import PageLayout from '../../layouts/pageLayout/PageLayout';\r\n\r\n// /**\r\n//  * Description This class show all Admin home data\r\n//  */\r\n// export default class AdminHome extends Component {\r\n//   state = {\r\n//     usersData: [],\r\n//     amountOfUsers: 0,\r\n//     questionAnswerData: [],\r\n//     premiumOpenQuestions: 0,\r\n//     premiumClosedQuestions: 0,\r\n//     adminOpenQuestions: 0,\r\n//     adminClosedQuestions: 0,\r\n//     overallUsersRate: 0,\r\n//     mostLearnedComp: '',\r\n//     learnedData: [],\r\n//   };\r\n\r\n//   /**\r\n//    * Description - This function activate functions when the page is uploaded\r\n//    */\r\n//   async componentDidMount() {\r\n//     await this.getQuestionAnswer();\r\n//     this.showQuestionAnswerData();\r\n//     this.calculateRate();\r\n//     await this.getUsersData();\r\n//     this.showAmountOfUser();\r\n//     await this.getLearnedData();\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function checks if the usersData and questionAnswerData state have changed since the previous update. If they have, it triggers the necessary functions to update the related data and calculations.\r\n//    * @param {*} prevState - previous state of the functions\r\n//    */\r\n//   async componentDidUpdate(prevProps, prevState) {\r\n//     if (prevState.usersData !== this.state.usersData) {\r\n//       this.showAmountOfUser();\r\n//     }\r\n\r\n//     if (prevState.questionAnswerData !== this.state.questionAnswerData) {\r\n//       this.showQuestionAnswerData();\r\n//       this.calculateRate();\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function get all the data about the users from the server\r\n//    */\r\n//   async getUsersData() {\r\n//     try {\r\n//       const response = await fetch(\r\n//         'http://localhost:5000/reports/getUsersData',\r\n//         {\r\n//           method: 'POST',\r\n//           crossDomain: true,\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//             Accept: 'application/json',\r\n//             'Accept-Control-Allow-Origin': '*',\r\n//           },\r\n//         }\r\n//       );\r\n//       const result = await response.json();\r\n//       this.setState({\r\n//         usersData: result,\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error fetching data:', error);\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function calculate the amount of \"User\" have sign up\r\n//    */\r\n//   showAmountOfUser() {\r\n//     const usersData = this.state.usersData;\r\n//     // console.log(usersData)\r\n//     let amountOfUsers = 0;\r\n\r\n//     for (let index = 0; index < usersData.length; index++) {\r\n//       amountOfUsers = amountOfUsers + 1;\r\n//     }\r\n\r\n//     this.setState({\r\n//       amountOfUsers: amountOfUsers,\r\n//     });\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function get all the data of Question / Answer from the server\r\n//    */\r\n//   async getQuestionAnswer() {\r\n//     try {\r\n//       const response = await fetch(\r\n//         'http://localhost:5000/reports/getQuestionAnswerData',\r\n//         {\r\n//           method: 'POST',\r\n//           crossDomain: true,\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//             Accept: 'application/json',\r\n//             'Accept-Control-Allow-Origin': '*',\r\n//           },\r\n//         }\r\n//       );\r\n//       const result = await response.json();\r\n\r\n//       this.setState({\r\n//         questionAnswerData: result,\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error fetching data:', error);\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function show the amount of open and closed questions\r\n//    */\r\n//   showQuestionAnswerData() {\r\n//     const questionAnswerData = this.state.questionAnswerData;\r\n//     let premiumOpenQuestions = 0;\r\n//     let premiumClosedQuestions = 0;\r\n//     let adminOpenQuestions = 0;\r\n//     let adminClosedQuestions = 0;\r\n\r\n//     for (let index = 0; index < questionAnswerData.length; index++) {\r\n\r\n//       // console.log(questionAnswerData[index].questionAnswerText[index].userType);\r\n//       console.log(questionAnswerData[index].length>0?1:0);\r\n//       // if (\r\n//       //   questionAnswerData[index].questionAnswerText[index + 1].userType !==\r\n//       //   'Premium'\r\n//       // ) {\r\n//       //   if (!questionAnswerData[index].haveAnAnswer) {\r\n//       //     premiumOpenQuestions++;\r\n//       //   } else {\r\n//       //     premiumClosedQuestions++;\r\n//       //   }\r\n//       // }\r\n\r\n//       // if (\r\n//       //   questionAnswerData[index].questionAnswerText[index + 1].userType ===\r\n//       //   'Premium'\r\n//       // ) {\r\n//       //   if (!questionAnswerData[index].haveAnAnswer) {\r\n//       //     adminOpenQuestions++;\r\n//       //   } else {\r\n//       //     adminClosedQuestions++;\r\n//       //   }\r\n//       // }\r\n//     }\r\n\r\n//     this.setState({\r\n//       premiumOpenQuestions: premiumOpenQuestions,\r\n//       premiumClosedQuestions: premiumClosedQuestions,\r\n//       adminOpenQuestions: adminOpenQuestions,\r\n//       adminClosedQuestions: adminClosedQuestions,\r\n//     });\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function show the average rate given by the users\r\n//    */\r\n//   calculateRate() {\r\n//     const questionAnswerData = this.state.questionAnswerData;\r\n//     let rate = 0;\r\n//     let users = 0;\r\n//     let index = 0;\r\n//     for (; index < questionAnswerData.length; index++) {\r\n//       if (\r\n//         questionAnswerData[index].haveAnAnswer &&\r\n//         questionAnswerData[index].selectedStars > 0\r\n//       ) {\r\n//         rate = rate + questionAnswerData[index].selectedStars;\r\n//         users = users + 1;\r\n//       }\r\n//     }\r\n\r\n//     if (users > 0) {\r\n//       const overallRate = rate / users;\r\n//       this.setState({\r\n//         overallUsersRate: overallRate,\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function get all the data about the learned components from the server\r\n//    */\r\n//   async getLearnedData() {\r\n//     try {\r\n//       const response = await fetch(\r\n//         'http://localhost:5000/reports/getLearnedData',\r\n//         {\r\n//           method: 'POST',\r\n//           crossDomain: true,\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//             Accept: 'application/json',\r\n//             'Accept-Control-Allow-Origin': '*',\r\n//           },\r\n//         }\r\n//       );\r\n//       const result = await response.json();\r\n//       this.setState({\r\n//         learnedData: result,\r\n//       });\r\n\r\n//       // Call the function here to calculate most learned component\r\n//       if (this.state.learnedData.length > 0)\r\n//         this.calculateMostLearnedComponent();\r\n//     } catch (error) {\r\n//       console.error('Error fetching data:', error);\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function show the most learned component in the server\r\n//    */\r\n//   calculateMostLearnedComponent = () => {\r\n//     const componentCounts = {};\r\n\r\n//     this.state.learnedData.forEach(user => {\r\n//       Object.keys(user).forEach(component => {\r\n//         if (user[component].haveLearned) {\r\n//           if (componentCounts[component]) {\r\n//             componentCounts[component]++;\r\n//           } else {\r\n//             componentCounts[component] = 1;\r\n//           }\r\n//         }\r\n//       });\r\n//     });\r\n\r\n//     // Find the most learned component\r\n//     let mostLearnedComponent = null;\r\n//     let highestCount = 0;\r\n//     for (const component in componentCounts) {\r\n//       if (componentCounts[component] > highestCount) {\r\n//         highestCount = componentCounts[component];\r\n//         mostLearnedComponent = component;\r\n//       }\r\n//     }\r\n\r\n//     this.setState({\r\n//       mostLearnedComp: mostLearnedComponent,\r\n//     });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <PageLayout>\r\n//         <Header h1Heading='PC BUILDER ADMIN' />\r\n//         <div className={style.adminHome}>\r\n//           <section className={style.section}>\r\n//             <DiagnosticInformationLayout\r\n//               h2='Admin Questions'\r\n//               text={\r\n//                 <>\r\n//                   open {this.state.adminOpenQuestions}\r\n//                   <br />\r\n//                   close {this.state.adminClosedQuestions}\r\n//                 </>\r\n//               }\r\n//               to='/adminQuestionAnswer'\r\n//               name='More Info'\r\n//             />\r\n//             <DiagnosticInformationLayout\r\n//               h2='Premium Questions'\r\n//               text={\r\n//                 <>\r\n//                   open {this.state.premiumOpenQuestions}\r\n//                   <br />\r\n//                   close {this.state.premiumClosedQuestions}\r\n//                 </>\r\n//               }\r\n//               to='/questionsAnswersReportAdmin'\r\n//               name='More Info'\r\n//             />\r\n\r\n//             <DiagnosticInformationLayout\r\n//               h2='Overall Users Rate'\r\n//               text={\r\n//                 this.state.overallUsersRate > 0\r\n//                   ? Array.from(\r\n//                       { length: this.state.overallUsersRate },\r\n//                       (_, index) => <span key={index}>â˜…</span>\r\n//                     )\r\n//                   : 'No Data'\r\n//               }\r\n//               to='/questionsAnswersReportPremium'\r\n//               name='More Info'\r\n//             />\r\n//             <DiagnosticInformationLayout\r\n//               h2='Amount Of Users'\r\n//               text={this.state.amountOfUsers}\r\n//               to='/usersDataReportAdmin'\r\n//               name='More Info'\r\n//             />\r\n\r\n//             <DiagnosticInformationLayout\r\n//               h2='Most Learned Component '\r\n//               text={this.state.mostLearnedComp}\r\n//               to='/learnedDataReport'\r\n//               name='More Info'\r\n//             />\r\n//           </section>\r\n//         </div>\r\n//       </PageLayout>\r\n//     );\r\n//   }\r\n// }\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}