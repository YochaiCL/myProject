{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\userPages\\\\pages\\\\questionAnswerUser\\\\existsQuestionsUser\\\\ExistsQuestionsUser.js\";\nimport React, { Component } from 'react';\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\nimport Header from '../../../../commonComponents/header/Header';\nimport style from './existsQuestionsUser.module.css';\nimport Button from '../../../../commonComponents/button/Button';\n\n/**\r\n * Description - This class show the question/answer data\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ExistsQuestionsUser extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      questionAnswerData: [],\n      messages: [],\n      showData: false,\n      selectIndex: null,\n      questionText: '',\n      questionText2: '',\n      userId: JSON.parse(localStorage.getItem('user'))._id,\n      selectedStars: 0\n    };\n    this.handelClick = index => {\n      this.setState({\n        questionText2: this.state.questionAnswerData[index].questionText\n      });\n      this.setState({\n        showData: true,\n        selectIndex: index\n      });\n    };\n  }\n  /**\r\n   * Description - This function get all the question/answer from the server\r\n   */\n  async getQuestionAnswer() {\n    const response = await fetch('http://localhost:5000/userQuestionAnswer/getData', {\n      method: 'POST',\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify({\n        userId: this.state.userId\n      })\n    });\n    const result = await response.json();\n    console.log(result);\n    result.sort((a, b) => a.questionName.localeCompare(b.questionName));\n    this.setState({\n      questionAnswerData: result\n    });\n  }\n\n  /**\r\n   * Description - This function activate the getQuestionAnswer function when the page is uploaded\r\n   */\n  componentDidMount() {\n    this.getQuestionAnswer();\n  }\n\n  /**\r\n   * Description - This function show the question/answer data\r\n   * @param {*} index  - Selected question\r\n   */\n\n  /**\r\n   * Description - This function delete selected Question from the database if the question have no answer\r\n   */\n  deleteQuestion(questionName) {\n    let result = this.state.questionAnswerData.filter(item => {\n      return item.questionName !== questionName;\n    });\n    this.setState({\n      questionAnswerData: result\n    });\n    try {\n      fetch('http://localhost:5000/userQuestionAnswer/deleteQuestionAnswer', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify({\n          userId: this.state.userId,\n          questionName: questionName\n        })\n      }).then(res => res.json()).then(data => {\n        if (data.status === 'Question deleted') {\n          this.setState({\n            showResult: 'Test has been deleted'\n          });\n          this.setState({\n            showData: false\n          });\n          setTimeout(() => {\n            this.setState({\n              showResult: ''\n            });\n          }, 2000);\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\r\n   * Description - This function define the stars amount by the user selection\r\n   * @param {*} selectedStarCount - Amount of stars that the user selected\r\n   */\n  handleStarClick(selectedStarCount) {\n    const dataStar = {\n      userIdStar: this.state.userId,\n      questionName: this.state.questionAnswerData[this.state.selectIndex].questionName,\n      selectedStars: selectedStarCount\n    };\n    try {\n      fetch('http://localhost:5000/userQuestionAnswer/updateStars', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dataStar)\n      }).then(res => res.json()).then(data => {\n        if (data.status === 'true') {\n          this.setState({\n            showResult: 'Star has been updated'\n          });\n          setTimeout(() => {\n            this.setState({\n              showResult: ''\n            });\n          }, 2000);\n          this.getQuestionAnswer();\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\r\n   * Description - This function update the question text in the server\r\n   * @param {*} e - Question text value\r\n   */\n  async handleSubmit(e) {\n    e.preventDefault();\n    let dataToSend = {\n      userId: this.state.userId,\n      userType: JSON.parse(localStorage.getItem('user')).userType,\n      questionText: this.state.questionAnswerData[this.state.selectIndex].questionText + ' ? ' + this.state.questionText,\n      questionName: this.state.questionAnswerData[this.state.selectIndex].questionName\n    };\n    const questionInputData = {\n      method: 'POST',\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify(dataToSend)\n    };\n    const response = await fetch('http://localhost:5000/userQuestionAnswer/updateQuestion', questionInputData);\n    const result = await response.json();\n    if (result.status === 'true') {\n      this.setState({\n        showResult: 'The Question has been updated'\n      });\n      this.setState({\n        questionText2: this.state.questionAnswerData[this.state.selectIndex].questionText + ' ? ' + this.state.questionText\n      });\n      setTimeout(() => {\n        this.setState({\n          showResult: ''\n        });\n      }, 1000);\n    }\n  }\n  render() {\n    const {\n      questionAnswerData,\n      showData,\n      selectIndex\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"Exists Questions/Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: style.external,\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: style.model,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"List Of Questions/Answers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), questionAnswerData.map((qA, index) => /*#__PURE__*/_jsxDEV(\"section\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                this.handelClick(index);\n              },\n              className: style.productButton,\n              children: qA.questionName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), showData && selectIndex !== null && selectIndex < questionAnswerData.length && /*#__PURE__*/_jsxDEV(\"section\", {\n          className: style.showAllData,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: style.h2,\n            children: \"Question/Answer Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: style.h3,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: style.span,\n                children: \" Question Date:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 21\n              }, this), questionAnswerData[selectIndex].questionDate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              className: style.h3,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: style.span,\n                children: \" Question Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 21\n              }, this), questionAnswerData[selectIndex].questionName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 19\n            }, this), this.state.questionAnswerData[selectIndex].questionAnswerText.map(oneMessage => {\n              if (oneMessage.userType !== 'Premium') {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    direction: 'ltr',\n                    color: 'red'\n                  },\n                  children: oneMessage.questionText\n                }, oneMessage, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 29\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    direction: 'rtl',\n                    color: 'blue'\n                  },\n                  children: oneMessage.questionText\n                }, oneMessage, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 249,\n                  columnNumber: 29\n                }, this);\n              }\n            }), /*#__PURE__*/_jsxDEV(\"section\", {\n              children: [/*#__PURE__*/_jsxDEV(\"form\", {\n                onSubmit: this.handleSubmit.bind(this),\n                className: style.form,\n                children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                  className: style.textArea,\n                  value: this.state.questionText,\n                  name: \"tarea\",\n                  rows: \"6\",\n                  cols: \"40\",\n                  placeholder: \" Write text here\",\n                  required: true,\n                  onChange: e => this.setState({\n                    questionText: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 291,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  type: \"submit\",\n                  text: \"submit\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 23\n                }, this), !questionAnswerData[selectIndex].haveAnAnswer && /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => {\n                    const indexToDelete = questionAnswerData[selectIndex].questionName;\n                    this.deleteQuestion(indexToDelete);\n                  },\n                  className: style.deleteButton,\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 25\n                }, this), questionAnswerData[selectIndex].haveAnAnswer && questionAnswerData[selectIndex].selectedStars === 0 && /*#__PURE__*/_jsxDEV(\"section\", {\n                  className: style.starsLocation,\n                  children: [1, 2, 3, 4, 5].map(star => /*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      cursor: 'pointer',\n                      color: star <= questionAnswerData[selectIndex].selectedStars ? 'orange' : 'grey',\n                      fontSize: `60px`\n                    },\n                    onClick: () => {\n                      this.setState({\n                        selectedStars: star <= questionAnswerData[selectIndex].selectedStars ? 0 : star\n                      });\n                      this.handleStarClick(star <= questionAnswerData[selectIndex].selectedStars ? 0 : star);\n                    },\n                    children: \"\\u2605\"\n                  }, star, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 323,\n                    columnNumber: 31\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 287,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: style.showResult,\n                children: this.state.showResult\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","PageLayout","Header","style","Button","ExistsQuestionsUser","state","questionAnswerData","messages","showData","selectIndex","questionText","questionText2","userId","JSON","parse","localStorage","getItem","_id","selectedStars","handelClick","index","setState","getQuestionAnswer","response","fetch","method","crossDomain","headers","Accept","body","stringify","result","json","console","log","sort","a","b","questionName","localeCompare","componentDidMount","deleteQuestion","filter","item","then","res","data","status","showResult","setTimeout","error","handleStarClick","selectedStarCount","dataStar","userIdStar","handleSubmit","e","preventDefault","dataToSend","userType","questionInputData","render","external","model","map","qA","productButton","length","showAllData","h2","h3","span","questionDate","questionAnswerText","oneMessage","direction","color","bind","form","textArea","target","value","haveAnAnswer","indexToDelete","deleteButton","starsLocation","star","cursor","fontSize"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/userPages/pages/questionAnswerUser/existsQuestionsUser/ExistsQuestionsUser.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\r\nimport Header from '../../../../commonComponents/header/Header';\r\nimport style from './existsQuestionsUser.module.css';\r\nimport Button from '../../../../commonComponents/button/Button';\r\n\r\n/**\r\n * Description - This class show the question/answer data\r\n */\r\nexport default class ExistsQuestionsUser extends Component {\r\n  state = {\r\n    questionAnswerData: [],\r\n    messages : [],\r\n    showData: false,\r\n    selectIndex: null,\r\n    questionText: '',\r\n    questionText2: '',\r\n    userId: JSON.parse(localStorage.getItem('user'))._id,\r\n    selectedStars: 0,\r\n  };\r\n\r\n  /**\r\n   * Description - This function get all the question/answer from the server\r\n   */\r\n  async getQuestionAnswer() {\r\n    const response = await fetch(\r\n      'http://localhost:5000/userQuestionAnswer/getData',\r\n      {\r\n        method: 'POST',\r\n        crossDomain: true,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          'Accept-Control-Allow-Origin': '*',\r\n        },\r\n\r\n        body: JSON.stringify({\r\n          userId: this.state.userId,\r\n        }),\r\n      }\r\n    );\r\n    const result = await response.json();\r\n    console.log(result)\r\n    result.sort((a, b) => a.questionName.localeCompare(b.questionName));\r\n    this.setState({ questionAnswerData: result });\r\n   \r\n  }\r\n\r\n  /**\r\n   * Description - This function activate the getQuestionAnswer function when the page is uploaded\r\n   */\r\n  componentDidMount() {\r\n    this.getQuestionAnswer();\r\n  }\r\n\r\n  /**\r\n   * Description - This function show the question/answer data\r\n   * @param {*} index  - Selected question\r\n   */\r\n  handelClick = index => {\r\n    this.setState({\r\n      questionText2: this.state.questionAnswerData[index].questionText,\r\n    });\r\n    this.setState({\r\n      showData: true,\r\n      selectIndex: index,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Description - This function delete selected Question from the database if the question have no answer\r\n   */\r\n  deleteQuestion(questionName) {\r\n    let result = this.state.questionAnswerData.filter(item => {\r\n      return item.questionName !== questionName;\r\n    });\r\n    this.setState({ questionAnswerData: result });\r\n\r\n    try {\r\n      fetch('http://localhost:5000/userQuestionAnswer/deleteQuestionAnswer', {\r\n        method: 'POST',\r\n        crossDomain: true,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          'Access-Control-Allow-Origin': '*',\r\n        },\r\n        body: JSON.stringify({\r\n          userId: this.state.userId,\r\n          questionName: questionName,\r\n        }),\r\n      })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          if (data.status === 'Question deleted') {\r\n            this.setState({ showResult: 'Test has been deleted' });\r\n            this.setState({ showData: false });\r\n            setTimeout(() => {\r\n              this.setState({\r\n                showResult: '',\r\n              });\r\n            }, 2000);\r\n          }\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function define the stars amount by the user selection\r\n   * @param {*} selectedStarCount - Amount of stars that the user selected\r\n   */\r\n  handleStarClick(selectedStarCount) {\r\n    const dataStar = {\r\n      userIdStar: this.state.userId,\r\n      questionName:\r\n        this.state.questionAnswerData[this.state.selectIndex].questionName,\r\n      selectedStars: selectedStarCount,\r\n    };\r\n\r\n    try {\r\n      fetch('http://localhost:5000/userQuestionAnswer/updateStars', {\r\n        method: 'POST',\r\n        crossDomain: true,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(dataStar),\r\n      })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          if (data.status === 'true') {\r\n            this.setState({ showResult: 'Star has been updated' });\r\n            setTimeout(() => {\r\n              this.setState({\r\n                showResult: '',\r\n              });\r\n            }, 2000);\r\n            this.getQuestionAnswer();\r\n          }\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function update the question text in the server\r\n   * @param {*} e - Question text value\r\n   */\r\n  async handleSubmit(e) {\r\n    e.preventDefault();\r\n    let dataToSend = {\r\n      userId: this.state.userId,\r\n      userType : JSON.parse(localStorage.getItem('user')).userType,\r\n      questionText:\r\n        this.state.questionAnswerData[this.state.selectIndex].questionText +\r\n        ' ? ' +\r\n        this.state.questionText,\r\n      questionName:\r\n        this.state.questionAnswerData[this.state.selectIndex].questionName,\r\n    };\r\n\r\n    const questionInputData = {\r\n      method: 'POST',\r\n      crossDomain: true,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'Accept-Control-Allow-Origin': '*',\r\n      },\r\n      body: JSON.stringify(dataToSend),\r\n    };\r\n\r\n    const response = await fetch(\r\n      'http://localhost:5000/userQuestionAnswer/updateQuestion',\r\n      questionInputData\r\n    );\r\n    const result = await response.json();\r\n    if (result.status === 'true') {\r\n      this.setState({\r\n        showResult: 'The Question has been updated',\r\n      });\r\n      this.setState({\r\n        questionText2:\r\n          this.state.questionAnswerData[this.state.selectIndex].questionText +\r\n          ' ? ' +\r\n          this.state.questionText,\r\n      });\r\n\r\n      setTimeout(() => {\r\n        this.setState({\r\n          showResult: '',\r\n        });\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { questionAnswerData, showData, selectIndex } = this.state;\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='Exists Questions/Answers' />\r\n        <section className={style.external}>\r\n          <section className={style.model}>\r\n            <h2>List Of Questions/Answers</h2>\r\n            {questionAnswerData.map((qA, index) => (\r\n              <section key={index}>\r\n                <button\r\n                  onClick={() => {\r\n                    this.handelClick(index);\r\n                  }}\r\n                  className={style.productButton}\r\n                >\r\n                  {qA.questionName}\r\n                </button>\r\n              </section>\r\n            ))}\r\n          </section>\r\n          {showData &&\r\n            selectIndex !== null &&\r\n            selectIndex < questionAnswerData.length && (\r\n              <section className={style.showAllData}>\r\n                <h2 className={style.h2}>Question/Answer Data</h2>\r\n                <div>\r\n                  <h3 className={style.h3}>\r\n                    <span className={style.span}> Question Date:</span>\r\n                    {questionAnswerData[selectIndex].questionDate}\r\n                  </h3>\r\n                  <h3 className={style.h3}>\r\n                    <span className={style.span}> Question Name:</span>\r\n                    {questionAnswerData[selectIndex].questionName}\r\n                  </h3>\r\n                  {\r\n                    this.state.questionAnswerData[selectIndex]\r\n                      .questionAnswerText.map((oneMessage)=>{\r\n                        if (oneMessage.userType !== 'Premium'){\r\n                          return (\r\n                            <div\r\n                              key={oneMessage}\r\n                              style={{ direction: 'ltr', color: 'red' }}\r\n                            >\r\n                              {oneMessage.questionText}\r\n                            </div>\r\n                          );\r\n                        } else {\r\n                          return (\r\n                            <div\r\n                              key={oneMessage}\r\n                              style={{ direction: 'rtl', color: 'blue' }}\r\n                            >\r\n                              {oneMessage.questionText}\r\n                            </div>\r\n                          );\r\n                        }\r\n                      })\r\n                  }\r\n                  {/* <h3 className={style.h3}>\r\n                    <span className={style.span}> Question Text:</span>\r\n                    {this.state.questionAnswerText.questionText\r\n                      .split('?')\r\n                      .map((part, index, array) => (\r\n                        <span key={index}>\r\n                          {part}\r\n                          {index !== array.length - 1 && (\r\n                            <span style={{ color: 'red' }}>?</span>\r\n                          )}\r\n                        </span>\r\n                      ))}\r\n                  </h3> */}\r\n{/* \r\n                  <h3 className={style.h3}>\r\n                    <span className={style.span}>Question Answer:</span>\r\n                    {questionAnswerData[selectIndex].answerText\r\n                      .split('|')\r\n                      .map((part, index, array) => (\r\n                        <span key={index}>\r\n                          {part}\r\n                          {index !== array.length - 1 && (\r\n                            <span style={{ color: 'red' }}>|</span>\r\n                          )}\r\n                        </span>\r\n                      ))}\r\n                  </h3> */}\r\n                  <section>\r\n                    <form\r\n                      onSubmit={this.handleSubmit.bind(this)}\r\n                      className={style.form}\r\n                    >\r\n                      <textarea\r\n                        className={style.textArea}\r\n                        value={this.state.questionText}\r\n                        name='tarea'\r\n                        rows='6'\r\n                        cols='40'\r\n                        placeholder=' Write text here'\r\n                        required\r\n                        onChange={e =>\r\n                          this.setState({ questionText: e.target.value })\r\n                        }\r\n                      ></textarea>\r\n\r\n                      <Button type='submit' text='submit' />\r\n                      {!questionAnswerData[selectIndex].haveAnAnswer && (\r\n                        <button\r\n                          onClick={() => {\r\n                            const indexToDelete =\r\n                              questionAnswerData[selectIndex].questionName;\r\n\r\n                            this.deleteQuestion(indexToDelete);\r\n                          }}\r\n                          className={style.deleteButton}\r\n                        >\r\n                          Delete\r\n                        </button>\r\n                      )}\r\n\r\n                      {questionAnswerData[selectIndex].haveAnAnswer &&\r\n                        questionAnswerData[selectIndex].selectedStars === 0 && (\r\n                          <section className={style.starsLocation}>\r\n                            {[1, 2, 3, 4, 5].map(star => (\r\n                              <span\r\n                                key={star}\r\n                                style={{\r\n                                  cursor: 'pointer',\r\n                                  color:\r\n                                    star <=\r\n                                    questionAnswerData[selectIndex]\r\n                                      .selectedStars\r\n                                      ? 'orange'\r\n                                      : 'grey',\r\n                                  fontSize: `60px`,\r\n                                }}\r\n                                onClick={() => {\r\n                                  this.setState({\r\n                                    selectedStars:\r\n                                      star <=\r\n                                      questionAnswerData[selectIndex]\r\n                                        .selectedStars\r\n                                        ? 0\r\n                                        : star,\r\n                                  });\r\n                                  this.handleStarClick(\r\n                                    star <=\r\n                                      questionAnswerData[selectIndex]\r\n                                        .selectedStars\r\n                                      ? 0\r\n                                      : star\r\n                                  );\r\n                                }}\r\n                              >\r\n                                ★\r\n                              </span>\r\n                            ))}\r\n                          </section>\r\n                        )}\r\n                    </form>\r\n                    <p className={style.showResult}>{this.state.showResult}</p>\r\n                  </section>\r\n                </div>\r\n              </section>\r\n            )}\r\n        </section>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,UAAU,MAAM,wCAAwC;AAC/D,OAAOC,MAAM,MAAM,4CAA4C;AAC/D,OAAOC,KAAK,MAAM,kCAAkC;AACpD,OAAOC,MAAM,MAAM,4CAA4C;;AAE/D;AACA;AACA;AAFA;AAGA,eAAe,MAAMC,mBAAmB,SAASL,SAAS,CAAC;EAAA;IAAA;IAAA,KACzDM,KAAK,GAAG;MACNC,kBAAkB,EAAE,EAAE;MACtBC,QAAQ,EAAG,EAAE;MACbC,QAAQ,EAAE,KAAK;MACfC,WAAW,EAAE,IAAI;MACjBC,YAAY,EAAE,EAAE;MAChBC,aAAa,EAAE,EAAE;MACjBC,MAAM,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAACC,GAAG;MACpDC,aAAa,EAAE;IACjB,CAAC;IAAA,KAwCDC,WAAW,GAAGC,KAAK,IAAI;MACrB,IAAI,CAACC,QAAQ,CAAC;QACZV,aAAa,EAAE,IAAI,CAACN,KAAK,CAACC,kBAAkB,CAACc,KAAK,CAAC,CAACV;MACtD,CAAC,CAAC;MACF,IAAI,CAACW,QAAQ,CAAC;QACZb,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAEW;MACf,CAAC,CAAC;IACJ,CAAC;EAAA;EA9CD;AACF;AACA;EACE,MAAME,iBAAiB,GAAG;IACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,kDAAkD,EAClD;MACEC,MAAM,EAAE,MAAM;MACdC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE,kBAAkB;QAC1B,6BAA6B,EAAE;MACjC,CAAC;MAEDC,IAAI,EAAEhB,IAAI,CAACiB,SAAS,CAAC;QACnBlB,MAAM,EAAE,IAAI,CAACP,KAAK,CAACO;MACrB,CAAC;IACH,CAAC,CACF;IACD,MAAMmB,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE;IACpCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;IACnBA,MAAM,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,YAAY,CAACC,aAAa,CAACF,CAAC,CAACC,YAAY,CAAC,CAAC;IACnE,IAAI,CAACjB,QAAQ,CAAC;MAAEf,kBAAkB,EAAEyB;IAAO,CAAC,CAAC;EAE/C;;EAEA;AACF;AACA;EACES,iBAAiB,GAAG;IAClB,IAAI,CAAClB,iBAAiB,EAAE;EAC1B;;EAEA;AACF;AACA;AACA;;EAWE;AACF;AACA;EACEmB,cAAc,CAACH,YAAY,EAAE;IAC3B,IAAIP,MAAM,GAAG,IAAI,CAAC1B,KAAK,CAACC,kBAAkB,CAACoC,MAAM,CAACC,IAAI,IAAI;MACxD,OAAOA,IAAI,CAACL,YAAY,KAAKA,YAAY;IAC3C,CAAC,CAAC;IACF,IAAI,CAACjB,QAAQ,CAAC;MAAEf,kBAAkB,EAAEyB;IAAO,CAAC,CAAC;IAE7C,IAAI;MACFP,KAAK,CAAC,+DAA+D,EAAE;QACrEC,MAAM,EAAE,MAAM;QACdC,WAAW,EAAE,IAAI;QACjBC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,MAAM,EAAE,kBAAkB;UAC1B,6BAA6B,EAAE;QACjC,CAAC;QACDC,IAAI,EAAEhB,IAAI,CAACiB,SAAS,CAAC;UACnBlB,MAAM,EAAE,IAAI,CAACP,KAAK,CAACO,MAAM;UACzB0B,YAAY,EAAEA;QAChB,CAAC;MACH,CAAC,CAAC,CACCM,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACb,IAAI,EAAE,CAAC,CACvBY,IAAI,CAACE,IAAI,IAAI;QACZ,IAAIA,IAAI,CAACC,MAAM,KAAK,kBAAkB,EAAE;UACtC,IAAI,CAAC1B,QAAQ,CAAC;YAAE2B,UAAU,EAAE;UAAwB,CAAC,CAAC;UACtD,IAAI,CAAC3B,QAAQ,CAAC;YAAEb,QAAQ,EAAE;UAAM,CAAC,CAAC;UAClCyC,UAAU,CAAC,MAAM;YACf,IAAI,CAAC5B,QAAQ,CAAC;cACZ2B,UAAU,EAAE;YACd,CAAC,CAAC;UACJ,CAAC,EAAE,IAAI,CAAC;QACV;MACF,CAAC,CAAC;IACN,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdjB,OAAO,CAACC,GAAG,CAACgB,KAAK,CAAC;IACpB;EACF;;EAEA;AACF;AACA;AACA;EACEC,eAAe,CAACC,iBAAiB,EAAE;IACjC,MAAMC,QAAQ,GAAG;MACfC,UAAU,EAAE,IAAI,CAACjD,KAAK,CAACO,MAAM;MAC7B0B,YAAY,EACV,IAAI,CAACjC,KAAK,CAACC,kBAAkB,CAAC,IAAI,CAACD,KAAK,CAACI,WAAW,CAAC,CAAC6B,YAAY;MACpEpB,aAAa,EAAEkC;IACjB,CAAC;IAED,IAAI;MACF5B,KAAK,CAAC,sDAAsD,EAAE;QAC5DC,MAAM,EAAE,MAAM;QACdC,WAAW,EAAE,IAAI;QACjBC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDE,IAAI,EAAEhB,IAAI,CAACiB,SAAS,CAACuB,QAAQ;MAC/B,CAAC,CAAC,CACCT,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACb,IAAI,EAAE,CAAC,CACvBY,IAAI,CAACE,IAAI,IAAI;QACZ,IAAIA,IAAI,CAACC,MAAM,KAAK,MAAM,EAAE;UAC1B,IAAI,CAAC1B,QAAQ,CAAC;YAAE2B,UAAU,EAAE;UAAwB,CAAC,CAAC;UACtDC,UAAU,CAAC,MAAM;YACf,IAAI,CAAC5B,QAAQ,CAAC;cACZ2B,UAAU,EAAE;YACd,CAAC,CAAC;UACJ,CAAC,EAAE,IAAI,CAAC;UACR,IAAI,CAAC1B,iBAAiB,EAAE;QAC1B;MACF,CAAC,CAAC;IACN,CAAC,CAAC,OAAO4B,KAAK,EAAE;MACdjB,OAAO,CAACC,GAAG,CAACgB,KAAK,CAAC;IACpB;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAMK,YAAY,CAACC,CAAC,EAAE;IACpBA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAIC,UAAU,GAAG;MACf9C,MAAM,EAAE,IAAI,CAACP,KAAK,CAACO,MAAM;MACzB+C,QAAQ,EAAG9C,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC2C,QAAQ;MAC5DjD,YAAY,EACV,IAAI,CAACL,KAAK,CAACC,kBAAkB,CAAC,IAAI,CAACD,KAAK,CAACI,WAAW,CAAC,CAACC,YAAY,GAClE,KAAK,GACL,IAAI,CAACL,KAAK,CAACK,YAAY;MACzB4B,YAAY,EACV,IAAI,CAACjC,KAAK,CAACC,kBAAkB,CAAC,IAAI,CAACD,KAAK,CAACI,WAAW,CAAC,CAAC6B;IAC1D,CAAC;IAED,MAAMsB,iBAAiB,GAAG;MACxBnC,MAAM,EAAE,MAAM;MACdC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE,kBAAkB;QAC1B,6BAA6B,EAAE;MACjC,CAAC;MACDC,IAAI,EAAEhB,IAAI,CAACiB,SAAS,CAAC4B,UAAU;IACjC,CAAC;IAED,MAAMnC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,yDAAyD,EACzDoC,iBAAiB,CAClB;IACD,MAAM7B,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE;IACpC,IAAID,MAAM,CAACgB,MAAM,KAAK,MAAM,EAAE;MAC5B,IAAI,CAAC1B,QAAQ,CAAC;QACZ2B,UAAU,EAAE;MACd,CAAC,CAAC;MACF,IAAI,CAAC3B,QAAQ,CAAC;QACZV,aAAa,EACX,IAAI,CAACN,KAAK,CAACC,kBAAkB,CAAC,IAAI,CAACD,KAAK,CAACI,WAAW,CAAC,CAACC,YAAY,GAClE,KAAK,GACL,IAAI,CAACL,KAAK,CAACK;MACf,CAAC,CAAC;MAEFuC,UAAU,CAAC,MAAM;QACf,IAAI,CAAC5B,QAAQ,CAAC;UACZ2B,UAAU,EAAE;QACd,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;IACV;EACF;EAEAa,MAAM,GAAG;IACP,MAAM;MAAEvD,kBAAkB;MAAEE,QAAQ;MAAEC;IAAY,CAAC,GAAG,IAAI,CAACJ,KAAK;IAChE,oBACE,QAAC,UAAU;MAAA,wBACT,QAAC,MAAM;QAAC,SAAS,EAAC;MAA0B;QAAA;QAAA;QAAA;MAAA,QAAG,eAC/C;QAAS,SAAS,EAAEH,KAAK,CAAC4D,QAAS;QAAA,wBACjC;UAAS,SAAS,EAAE5D,KAAK,CAAC6D,KAAM;UAAA,wBAC9B;YAAA,UAAI;UAAyB;YAAA;YAAA;YAAA;UAAA,QAAK,EACjCzD,kBAAkB,CAAC0D,GAAG,CAAC,CAACC,EAAE,EAAE7C,KAAK,kBAChC;YAAA,uBACE;cACE,OAAO,EAAE,MAAM;gBACb,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC;cACzB,CAAE;cACF,SAAS,EAAElB,KAAK,CAACgE,aAAc;cAAA,UAE9BD,EAAE,CAAC3B;YAAY;cAAA;cAAA;cAAA;YAAA;UACT,GARGlB,KAAK;YAAA;YAAA;YAAA;UAAA,QAUpB,CAAC;QAAA;UAAA;UAAA;UAAA;QAAA,QACM,EACTZ,QAAQ,IACPC,WAAW,KAAK,IAAI,IACpBA,WAAW,GAAGH,kBAAkB,CAAC6D,MAAM,iBACrC;UAAS,SAAS,EAAEjE,KAAK,CAACkE,WAAY;UAAA,wBACpC;YAAI,SAAS,EAAElE,KAAK,CAACmE,EAAG;YAAA,UAAC;UAAoB;YAAA;YAAA;YAAA;UAAA,QAAK,eAClD;YAAA,wBACE;cAAI,SAAS,EAAEnE,KAAK,CAACoE,EAAG;cAAA,wBACtB;gBAAM,SAAS,EAAEpE,KAAK,CAACqE,IAAK;gBAAA,UAAC;cAAe;gBAAA;gBAAA;gBAAA;cAAA,QAAO,EAClDjE,kBAAkB,CAACG,WAAW,CAAC,CAAC+D,YAAY;YAAA;cAAA;cAAA;cAAA;YAAA,QAC1C,eACL;cAAI,SAAS,EAAEtE,KAAK,CAACoE,EAAG;cAAA,wBACtB;gBAAM,SAAS,EAAEpE,KAAK,CAACqE,IAAK;gBAAA,UAAC;cAAe;gBAAA;gBAAA;gBAAA;cAAA,QAAO,EAClDjE,kBAAkB,CAACG,WAAW,CAAC,CAAC6B,YAAY;YAAA;cAAA;cAAA;cAAA;YAAA,QAC1C,EAEH,IAAI,CAACjC,KAAK,CAACC,kBAAkB,CAACG,WAAW,CAAC,CACvCgE,kBAAkB,CAACT,GAAG,CAAEU,UAAU,IAAG;cACpC,IAAIA,UAAU,CAACf,QAAQ,KAAK,SAAS,EAAC;gBACpC,oBACE;kBAEE,KAAK,EAAE;oBAAEgB,SAAS,EAAE,KAAK;oBAAEC,KAAK,EAAE;kBAAM,CAAE;kBAAA,UAEzCF,UAAU,CAAChE;gBAAY,GAHnBgE,UAAU;kBAAA;kBAAA;kBAAA;gBAAA,QAIX;cAEV,CAAC,MAAM;gBACL,oBACE;kBAEE,KAAK,EAAE;oBAAEC,SAAS,EAAE,KAAK;oBAAEC,KAAK,EAAE;kBAAO,CAAE;kBAAA,UAE1CF,UAAU,CAAChE;gBAAY,GAHnBgE,UAAU;kBAAA;kBAAA;kBAAA;gBAAA,QAIX;cAEV;YACF,CAAC,CAAC,eA6BN;cAAA,wBACE;gBACE,QAAQ,EAAE,IAAI,CAACnB,YAAY,CAACsB,IAAI,CAAC,IAAI,CAAE;gBACvC,SAAS,EAAE3E,KAAK,CAAC4E,IAAK;gBAAA,wBAEtB;kBACE,SAAS,EAAE5E,KAAK,CAAC6E,QAAS;kBAC1B,KAAK,EAAE,IAAI,CAAC1E,KAAK,CAACK,YAAa;kBAC/B,IAAI,EAAC,OAAO;kBACZ,IAAI,EAAC,GAAG;kBACR,IAAI,EAAC,IAAI;kBACT,WAAW,EAAC,kBAAkB;kBAC9B,QAAQ;kBACR,QAAQ,EAAE8C,CAAC,IACT,IAAI,CAACnC,QAAQ,CAAC;oBAAEX,YAAY,EAAE8C,CAAC,CAACwB,MAAM,CAACC;kBAAM,CAAC;gBAC/C;kBAAA;kBAAA;kBAAA;gBAAA,QACS,eAEZ,QAAC,MAAM;kBAAC,IAAI,EAAC,QAAQ;kBAAC,IAAI,EAAC;gBAAQ;kBAAA;kBAAA;kBAAA;gBAAA,QAAG,EACrC,CAAC3E,kBAAkB,CAACG,WAAW,CAAC,CAACyE,YAAY,iBAC5C;kBACE,OAAO,EAAE,MAAM;oBACb,MAAMC,aAAa,GACjB7E,kBAAkB,CAACG,WAAW,CAAC,CAAC6B,YAAY;oBAE9C,IAAI,CAACG,cAAc,CAAC0C,aAAa,CAAC;kBACpC,CAAE;kBACF,SAAS,EAAEjF,KAAK,CAACkF,YAAa;kBAAA,UAC/B;gBAED;kBAAA;kBAAA;kBAAA;gBAAA,QACD,EAEA9E,kBAAkB,CAACG,WAAW,CAAC,CAACyE,YAAY,IAC3C5E,kBAAkB,CAACG,WAAW,CAAC,CAACS,aAAa,KAAK,CAAC,iBACjD;kBAAS,SAAS,EAAEhB,KAAK,CAACmF,aAAc;kBAAA,UACrC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACrB,GAAG,CAACsB,IAAI,iBACvB;oBAEE,KAAK,EAAE;sBACLC,MAAM,EAAE,SAAS;sBACjBX,KAAK,EACHU,IAAI,IACJhF,kBAAkB,CAACG,WAAW,CAAC,CAC5BS,aAAa,GACZ,QAAQ,GACR,MAAM;sBACZsE,QAAQ,EAAG;oBACb,CAAE;oBACF,OAAO,EAAE,MAAM;sBACb,IAAI,CAACnE,QAAQ,CAAC;wBACZH,aAAa,EACXoE,IAAI,IACJhF,kBAAkB,CAACG,WAAW,CAAC,CAC5BS,aAAa,GACZ,CAAC,GACDoE;sBACR,CAAC,CAAC;sBACF,IAAI,CAACnC,eAAe,CAClBmC,IAAI,IACFhF,kBAAkB,CAACG,WAAW,CAAC,CAC5BS,aAAa,GACd,CAAC,GACDoE,IAAI,CACT;oBACH,CAAE;oBAAA,UACH;kBAED,GA9BOA,IAAI;oBAAA;oBAAA;oBAAA;kBAAA,QA+BZ;gBAAC;kBAAA;kBAAA;kBAAA;gBAAA,QAEL;cAAA;gBAAA;gBAAA;gBAAA;cAAA,QACE,eACP;gBAAG,SAAS,EAAEpF,KAAK,CAAC8C,UAAW;gBAAA,UAAE,IAAI,CAAC3C,KAAK,CAAC2C;cAAU;gBAAA;gBAAA;gBAAA;cAAA,QAAK;YAAA;cAAA;cAAA;cAAA;YAAA,QACnD;UAAA;YAAA;YAAA;YAAA;UAAA,QACN;QAAA;UAAA;UAAA;UAAA;QAAA,QAET;MAAA;QAAA;QAAA;QAAA;MAAA,QACK;IAAA;MAAA;MAAA;MAAA;IAAA,QACC;EAEjB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}