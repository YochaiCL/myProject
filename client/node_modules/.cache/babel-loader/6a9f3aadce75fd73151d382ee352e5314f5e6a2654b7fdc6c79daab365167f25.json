{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\adminPages\\\\pages\\\\add\\\\addComponents\\\\addCpu\\\\AddCpu.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../../../commonComponents/button/Button';\nimport PageLayout from '../../../../layouts/pageLayout/PageLayout';\nimport Header from '../../../../../commonComponents/header/Header';\nimport style from '../addMotherboard/addMotherboard.module.css';\n\n/**\r\n * Description - This class add Cpu to the database\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class AddCpu extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      model: '',\n      cores: '',\n      threads: '',\n      frequency: '',\n      cache: '',\n      memory_type: '',\n      socket: '',\n      showResult: '',\n      modelArray: []\n    };\n  }\n  async getModels() {\n    const response = await fetch('http://localhost:5000/getComponentsModels');\n    const result = await response.json();\n    console.log(result);\n    let newArray = [];\n    for (let key in result) {\n      console.log(result[key]);\n      for (let model of result[key]) newArray.push(model);\n    }\n    console.log(newArray);\n    this.setState({\n      modelArray: newArray\n    });\n    // this.setState({ cpuArray: result.Cpu });\n    // this.setState({ gpuArray: result.Gpu });\n    // this.setState({ caseArray: result.Case });\n    // this.setState({ cpuCoolerFanArray: result.CpuCoolerFan });\n    // this.setState({ cpuCoolerLiquidArray: result.CpuCoolerLiquid });\n    // this.setState({ motherboardArray: result.Motherboard });\n    // this.setState({ psuArray: result.Psu });\n    // this.setState({ ramArray: result.Ram });\n    // this.setState({ ssdM2Array: result.SsdM2 });\n    // this.setState({ ssdSataArray: result.SsdSata });\n  }\n\n  componentDidMount() {\n    this.getModels();\n  }\n\n  /**\r\n   * Description - This function add cpu to collection\r\n   * @param {*} e - Cpu data from Admin\r\n   */\n  async handleSubmit(e) {\n    e.preventDefault();\n    console.log(this.state);\n    for (let model of this.state.modelArray) {\n      if (model === this.state.model) {\n        alert(\"\");\n      }\n    }\n    const options = {\n      method: 'POST',\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify(this.state)\n    };\n    const response = await fetch('http://localhost:5000/addComponent/cpu', options);\n    const result = await response.json();\n    if (result.status === 'ok') {\n      this.setState({\n        showResult: 'Component have added'\n      });\n      setTimeout(() => {\n        this.setState({\n          showResult: '',\n          model: '',\n          cores: '',\n          threads: '',\n          frequency: '',\n          cache: '',\n          memory_type: '',\n          socket: ''\n        });\n      }, 1000);\n    } else if (result.status === 'Model already exist') {\n      this.setState({\n        showResult: 'Component already exist'\n      });\n      setTimeout(() => {\n        this.setState({\n          showResult: ''\n        });\n      }, 1000);\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"Add CPU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit.bind(this),\n          className: style.form,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter Model:\",\n            value: this.state.model,\n            required: true,\n            onChange: e => this.setState({\n              model: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter Cors:\",\n            required: true,\n            onChange: e => this.setState({\n              cores: e.target.value\n            }),\n            value: this.state.cores\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter Threads:\",\n            required: true,\n            onChange: e => this.setState({\n              threads: e.target.value\n            }),\n            value: this.state.threads\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter Frequency:\",\n            required: true,\n            onChange: e => this.setState({\n              frequency: e.target.value\n            }),\n            value: this.state.frequency\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter Cache:\",\n            required: true,\n            onChange: e => this.setState({\n              cache: e.target.value\n            }),\n            value: this.state.cache\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter Type:\",\n            required: true,\n            onChange: e => this.setState({\n              memory_type: e.target.value\n            }),\n            value: this.state.memory_type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter Socket Type:\",\n            required: true,\n            onChange: e => this.setState({\n              socket: e.target.value\n            }),\n            value: this.state.socket\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            text: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.showResult,\n            children: this.state.showResult\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Button","PageLayout","Header","style","AddCpu","state","model","cores","threads","frequency","cache","memory_type","socket","showResult","modelArray","getModels","response","fetch","result","json","console","log","newArray","key","push","setState","componentDidMount","handleSubmit","e","preventDefault","alert","options","method","crossDomain","headers","Accept","body","JSON","stringify","status","setTimeout","render","bind","form","input","target","value"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/adminPages/pages/add/addComponents/addCpu/AddCpu.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '../../../../../commonComponents/button/Button';\r\nimport PageLayout from '../../../../layouts/pageLayout/PageLayout';\r\nimport Header from '../../../../../commonComponents/header/Header';\r\nimport style from '../addMotherboard/addMotherboard.module.css';\r\n\r\n/**\r\n * Description - This class add Cpu to the database\r\n */\r\nexport default class AddCpu extends Component {\r\n  state = {\r\n    model: '',\r\n    cores: '',\r\n    threads: '',\r\n    frequency: '',\r\n    cache: '',\r\n    memory_type: '',\r\n    socket: '',\r\n    showResult: '',\r\n    modelArray : []\r\n  };\r\n\r\n  async getModels() {\r\n    const response = await fetch('http://localhost:5000/getComponentsModels');\r\n    const result = await response.json();\r\n    console.log(result);\r\n    let newArray = [];\r\n    for (let key in result) {\r\n      console.log(result[key]);\r\n      for(let model of result[key])\r\n      newArray.push(model)\r\n    }\r\n    console.log(newArray);\r\n    this.setState({ modelArray  : newArray});\r\n    // this.setState({ cpuArray: result.Cpu });\r\n    // this.setState({ gpuArray: result.Gpu });\r\n    // this.setState({ caseArray: result.Case });\r\n    // this.setState({ cpuCoolerFanArray: result.CpuCoolerFan });\r\n    // this.setState({ cpuCoolerLiquidArray: result.CpuCoolerLiquid });\r\n    // this.setState({ motherboardArray: result.Motherboard });\r\n    // this.setState({ psuArray: result.Psu });\r\n    // this.setState({ ramArray: result.Ram });\r\n    // this.setState({ ssdM2Array: result.SsdM2 });\r\n    // this.setState({ ssdSataArray: result.SsdSata });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getModels();\r\n  }\r\n\r\n  /**\r\n   * Description - This function add cpu to collection\r\n   * @param {*} e - Cpu data from Admin\r\n   */\r\n  async handleSubmit(e) {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n    for(let model of this.state.modelArray){\r\n      if(model === this.state.model){\r\n        alert(\"\")\r\n      }\r\n    }\r\n    const options = {\r\n      method: 'POST',\r\n      crossDomain: true,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'Accept-Control-Allow-Origin': '*',\r\n      },\r\n      body: JSON.stringify(this.state),\r\n    };\r\n    const response = await fetch(\r\n      'http://localhost:5000/addComponent/cpu',\r\n      options\r\n    );\r\n    const result = await response.json();\r\n    if (result.status === 'ok') {\r\n      this.setState({ showResult: 'Component have added' });\r\n      setTimeout(() => {\r\n        this.setState({\r\n          showResult: '',\r\n          model: '',\r\n          cores: '',\r\n          threads: '',\r\n          frequency: '',\r\n          cache: '',\r\n          memory_type: '',\r\n          socket: '',\r\n        });\r\n      }, 1000);\r\n    } else if (result.status === 'Model already exist') {\r\n      this.setState({ showResult: 'Component already exist' });\r\n      setTimeout(() => {\r\n        this.setState({\r\n          showResult: '',\r\n        });\r\n      }, 1000);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='Add CPU' />\r\n        <section>\r\n          <form onSubmit={this.handleSubmit.bind(this)} className={style.form}>\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter Model:'\r\n              value={this.state.model}\r\n              required\r\n              onChange={e => this.setState({ model: e.target.value })}\r\n            />\r\n\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter Cors:'\r\n              required\r\n              onChange={e => this.setState({ cores: e.target.value })}\r\n              value={this.state.cores}\r\n            />\r\n\r\n            <input\r\n              type='text'\r\n              placeholder='Enter Threads:'\r\n              required\r\n              onChange={e => this.setState({ threads: e.target.value })}\r\n              value={this.state.threads}\r\n            />\r\n\r\n            <input\r\n              type='text'\r\n              placeholder='Enter Frequency:'\r\n              required\r\n              onChange={e => this.setState({ frequency: e.target.value })}\r\n              value={this.state.frequency}\r\n            />\r\n\r\n            <input\r\n              type='text'\r\n              placeholder='Enter Cache:'\r\n              required\r\n              onChange={e => this.setState({ cache: e.target.value })}\r\n              value={this.state.cache}\r\n            />\r\n\r\n            <input\r\n              type='text'\r\n              placeholder='Enter Type:'\r\n              required\r\n              onChange={e => this.setState({ memory_type: e.target.value })}\r\n              value={this.state.memory_type}\r\n            />\r\n\r\n            <input\r\n              type='text'\r\n              placeholder='Enter Socket Type:'\r\n              required\r\n              onChange={e => this.setState({ socket: e.target.value })}\r\n              value={this.state.socket}\r\n            />\r\n\r\n            <Button type='submit' text='submit' />\r\n            <p className={style.showResult}>{this.state.showResult}</p>\r\n          </form>\r\n        </section>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}