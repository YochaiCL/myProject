{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\userPages\\\\pages\\\\premium\\\\newQuestion\\\\NewQuestion.js\";\nimport React, { Component } from 'react';\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\nimport Header from '../../../../pageSettings/header/Header';\nimport style from './newQuestion.module.css';\nimport Button from '../../../../pageSettings/button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class NewQuestion extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      questionName: '',\n      questionText: ''\n    };\n  }\n  // Asynchronous function to handle form submission\n  async handleSubmit(e) {\n    // Preventing the default form submission behavior\n    e.preventDefault();\n    const options = {\n      method: 'POST',\n      crossDomain: true,\n      headers: {\n        // Setting headers for the HTTP request\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      // Converting the state object to JSON and setting it as the request body\n      body: JSON.stringify(this.state)\n    };\n    // Sending the POST request with options\n    const response = await fetch('http://localhost:5000/insert/case', options);\n    // Parsing the response as JSON\n    const result = await response.json();\n\n    // Checking the status of the response\n\n    // Updating the state to display a success message\n    if (result.status === 'ok') {\n      this.setState({\n        showResult: 'Component have added'\n      });\n    }\n    // Handling different response statuses\n    else if (result.status === 'Model already exist') {\n      this.setState({\n        showResult: 'Component already exist'\n      });\n    } else if (result.status === 'Error !! check your details') {}\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"New Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit.bind(this),\n          className: style.form,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter Question Name:\",\n            value: this.state.questionName,\n            required: true,\n            onChange: e => this.setState({\n              questionName: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            name: \"tarea\",\n            rows: \"6\",\n            cols: \"40\",\n            placeholder: \" Write text here\",\n            required: true,\n            onChange: e => this.setState({\n              questionText: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            text: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: this.state.q\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","PageLayout","Header","style","Button","NewQuestion","state","questionName","questionText","handleSubmit","e","preventDefault","options","method","crossDomain","headers","Accept","body","JSON","stringify","response","fetch","result","json","status","setState","showResult","render","bind","form","target","value","q"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/userPages/pages/premium/newQuestion/NewQuestion.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\r\nimport Header from '../../../../pageSettings/header/Header';\r\nimport style from './newQuestion.module.css';\r\nimport Button from '../../../../pageSettings/button/Button';\r\n\r\nexport default class NewQuestion extends Component {\r\n  state = {\r\n    questionName: '',\r\n    questionText: '',\r\n    \r\n  };\r\n  // Asynchronous function to handle form submission\r\n  async handleSubmit(e) {\r\n    // Preventing the default form submission behavior\r\n    e.preventDefault();\r\n    const options = {\r\n      method: 'POST',\r\n      crossDomain: true,\r\n      headers: {\r\n        // Setting headers for the HTTP request\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'Accept-Control-Allow-Origin': '*',\r\n      },\r\n      // Converting the state object to JSON and setting it as the request body\r\n      body: JSON.stringify(this.state),\r\n    };\r\n    // Sending the POST request with options\r\n    const response = await fetch('http://localhost:5000/insert/case', options);\r\n    // Parsing the response as JSON\r\n    const result = await response.json();\r\n\r\n    // Checking the status of the response\r\n\r\n    // Updating the state to display a success message\r\n    if (result.status === 'ok') {\r\n      this.setState({ showResult: 'Component have added' });\r\n    }\r\n    // Handling different response statuses\r\n    else if (result.status === 'Model already exist') {\r\n      this.setState({ showResult: 'Component already exist' });\r\n    } else if (result.status === 'Error !! check your details') {\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='New Question' />\r\n        <section>\r\n          <form onSubmit={this.handleSubmit.bind(this)} className={style.form}>\r\n            <input\r\n              type='text'\r\n              placeholder='Enter Question Name:'\r\n              value={this.state.questionName}\r\n              required\r\n              onChange={e => this.setState({ questionName: e.target.value })}\r\n            />\r\n\r\n            <textarea\r\n              name='tarea'\r\n              rows='6'\r\n              cols='40'\r\n              placeholder=' Write text here'\r\n              required\r\n              onChange={e => this.setState({ questionText: e.target.value })}\r\n            ></textarea>\r\n\r\n            <Button type='submit' text='submit' />\r\n            <p>{this.state.q}</p>\r\n          </form>\r\n        </section>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,UAAU,MAAM,wCAAwC;AAC/D,OAAOC,MAAM,MAAM,wCAAwC;AAC3D,OAAOC,KAAK,MAAM,0BAA0B;AAC5C,OAAOC,MAAM,MAAM,wCAAwC;AAAC;AAE5D,eAAe,MAAMC,WAAW,SAASL,SAAS,CAAC;EAAA;IAAA;IAAA,KACjDM,KAAK,GAAG;MACNC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE;IAEhB,CAAC;EAAA;EACD;EACA,MAAMC,YAAY,CAACC,CAAC,EAAE;IACpB;IACAA,CAAC,CAACC,cAAc,EAAE;IAClB,MAAMC,OAAO,GAAG;MACdC,MAAM,EAAE,MAAM;MACdC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE;QACP;QACA,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE,kBAAkB;QAC1B,6BAA6B,EAAE;MACjC,CAAC;MACD;MACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACb,KAAK;IACjC,CAAC;IACD;IACA,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAET,OAAO,CAAC;IAC1E;IACA,MAAMU,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;;IAEpC;;IAEA;IACA,IAAID,MAAM,CAACE,MAAM,KAAK,IAAI,EAAE;MAC1B,IAAI,CAACC,QAAQ,CAAC;QAAEC,UAAU,EAAE;MAAuB,CAAC,CAAC;IACvD;IACA;IAAA,KACK,IAAIJ,MAAM,CAACE,MAAM,KAAK,qBAAqB,EAAE;MAChD,IAAI,CAACC,QAAQ,CAAC;QAAEC,UAAU,EAAE;MAA0B,CAAC,CAAC;IAC1D,CAAC,MAAM,IAAIJ,MAAM,CAACE,MAAM,KAAK,6BAA6B,EAAE,CAC5D;EACF;EAEAG,MAAM,GAAG;IACP,oBACE,QAAC,UAAU;MAAA,wBACT,QAAC,MAAM;QAAC,SAAS,EAAC;MAAc;QAAA;QAAA;QAAA;MAAA,QAAG,eACnC;QAAA,uBACE;UAAM,QAAQ,EAAE,IAAI,CAAClB,YAAY,CAACmB,IAAI,CAAC,IAAI,CAAE;UAAC,SAAS,EAAEzB,KAAK,CAAC0B,IAAK;UAAA,wBAClE;YACE,IAAI,EAAC,MAAM;YACX,WAAW,EAAC,sBAAsB;YAClC,KAAK,EAAE,IAAI,CAACvB,KAAK,CAACC,YAAa;YAC/B,QAAQ;YACR,QAAQ,EAAEG,CAAC,IAAI,IAAI,CAACe,QAAQ,CAAC;cAAElB,YAAY,EAAEG,CAAC,CAACoB,MAAM,CAACC;YAAM,CAAC;UAAE;YAAA;YAAA;YAAA;UAAA,QAC/D,eAEF;YACE,IAAI,EAAC,OAAO;YACZ,IAAI,EAAC,GAAG;YACR,IAAI,EAAC,IAAI;YACT,WAAW,EAAC,kBAAkB;YAC9B,QAAQ;YACR,QAAQ,EAAErB,CAAC,IAAI,IAAI,CAACe,QAAQ,CAAC;cAAEjB,YAAY,EAAEE,CAAC,CAACoB,MAAM,CAACC;YAAM,CAAC;UAAE;YAAA;YAAA;YAAA;UAAA,QACrD,eAEZ,QAAC,MAAM;YAAC,IAAI,EAAC,QAAQ;YAAC,IAAI,EAAC;UAAQ;YAAA;YAAA;YAAA;UAAA,QAAG,eACtC;YAAA,UAAI,IAAI,CAACzB,KAAK,CAAC0B;UAAC;YAAA;YAAA;YAAA;UAAA,QAAK;QAAA;UAAA;UAAA;UAAA;QAAA;MAChB;QAAA;QAAA;QAAA;MAAA,QACC;IAAA;MAAA;MAAA;MAAA;IAAA,QACC;EAEjB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}