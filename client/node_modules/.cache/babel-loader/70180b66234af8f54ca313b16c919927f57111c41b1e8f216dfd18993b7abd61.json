{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\premiumPages\\\\pages\\\\premiumHome\\\\PremiumHome.js\";\nimport React, { Component } from 'react';\nimport Header from '../../../commonComponents/header/Header';\nimport style from './premiumHome.module.css';\nimport PageLayout from '../../layouts/pageLayout/PageLayout';\nimport DiagnosticInformationLayout from '../../../adminPages/layouts/diagnosticInformationLayout/DiagnosticInformationLayout';\n\n/**\r\n * Description - This class display the user question/answer and data of users in home page of premium\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class PremiumHome extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      usersData: [],\n      amountOfUsers: 0,\n      questionAnswerData: [],\n      userOpenQuestions: 0,\n      userClosedQuestions: 0,\n      premiumOpenQuestions: 0,\n      premiumClosedQuestions: 0,\n      overallUsersRate: 0\n    };\n  }\n  /**\r\n   * Description - This function activate functions when the page is uploaded\r\n   */\n  async componentDidMount() {\n    await this.getQuestionAnswer();\n    this.showQuestionAnswerData();\n    this.calculateRate();\n    await this.getUsersData();\n    this.showAmountOfUser();\n  }\n\n  /**\r\n   * Description - This function checks if the usersData and questionAnswerData state have changed since the previous update. If they have, it triggers the necessary functions to update the related data and calculations.\r\n   * @param {*} prevState - previous state of the functions\r\n   */\n  async componentDidUpdate(prevProps, prevState) {\n    if (prevState.usersData !== this.state.usersData) {\n      this.showAmountOfUser();\n    }\n    if (prevState.questionAnswerData !== this.state.questionAnswerData) {\n      this.showQuestionAnswerData();\n      this.calculateRate();\n    }\n    if (prevState.learnedData !== this.state.learnedData) {\n      this.calculateMostLearnedComponent();\n    }\n  }\n\n  /**\r\n   * Description - This function get all the data about the users from the server\r\n   */\n  async getUsersData() {\n    try {\n      const response = await fetch('http://localhost:5000/reports/getUsersData', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Accept-Control-Allow-Origin': '*'\n        }\n      });\n      const result = await response.json();\n      this.setState({\n        usersData: result\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n\n  /**\r\n   * Description - This function calculate the amount of \"User\" have sign up\r\n   */\n  showAmountOfUser() {\n    const usersData = this.state.usersData;\n    // console.log(usersData)\n    let amountOfUsers = 0;\n    for (let index = 0; index < usersData.length; index++) {\n      if (usersData[index].userType === 'User') {\n        amountOfUsers = amountOfUsers + 1;\n      }\n    }\n    this.setState({\n      amountOfUsers: amountOfUsers\n    });\n  }\n\n  /**\r\n   * Description - This function get all the data of Question / Answer from the server\r\n   */\n  async getQuestionAnswer() {\n    try {\n      const response = await fetch('http://localhost:5000/reports/getQuestionAnswerData', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Accept-Control-Allow-Origin': '*'\n        }\n      });\n      const result = await response.json();\n      this.setState({\n        questionAnswerData: result\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n\n  /**\r\n   * Description - This function show the amount of open and closed questions\r\n   */\n  showQuestionAnswerData() {\n    const questionAnswerData = this.state.questionAnswerData;\n    let userOpenQuestions = 0;\n    let userClosedQuestions = 0;\n    let premiumOpenQuestions = 0;\n    let premiumClosedQuestions = 0;\n    for (let index = 0; index < questionAnswerData.length; index++) {\n      if (questionAnswerData[index].questionAnswerText[index].userType !== 'Premium') {\n        if (!questionAnswerData[index].haveAnAnswer) {\n          userOpenQuestions++;\n        } else {\n          userClosedQuestions++;\n        }\n      }\n      if (questionAnswerData[index].questionAnswerText[index + 1].userType === 'Premium') {\n        if (!questionAnswerData[index].haveAnAnswer) {\n          premiumOpenQuestions++;\n        } else {\n          premiumClosedQuestions++;\n        }\n      }\n    }\n    this.setState({\n      userOpenQuestions: userOpenQuestions,\n      userClosedQuestions: userClosedQuestions,\n      premiumOpenQuestions: premiumOpenQuestions,\n      premiumClosedQuestions: premiumClosedQuestions\n    });\n  }\n\n  /**\r\n   * Description - This function show the average rate given by the users\r\n   */\n  calculateRate() {\n    const questionAnswerData = this.state.questionAnswerData;\n    let rate = 0;\n    let users = 0;\n    let index = 0;\n    for (; index < questionAnswerData.length; index++) {\n      if (questionAnswerData[index].haveAnAnswer && questionAnswerData[index].selectedStars > 0) {\n        rate = rate + questionAnswerData[index].selectedStars;\n        users = users + 1;\n      }\n    }\n    if (users > 0) {\n      const overallRate = rate / users;\n      this.setState({\n        overallUsersRate: overallRate\n      });\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"PC BUILDER Premium\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.premiumHome,\n        children: /*#__PURE__*/_jsxDEV(\"section\", {\n          className: style.section,\n          children: [/*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Users Questions\",\n            text: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"open \", this.state.userOpenQuestions, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 19\n              }, this), \"close \", this.state.userClosedQuestions]\n            }, void 0, true),\n            to: \"/questionsAnswersReportPremium\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Premium Questions\",\n            text: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [\"open \", this.state.premiumOpenQuestions, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 19\n              }, this), \"close \", this.state.premiumClosedQuestions]\n            }, void 0, true),\n            to: \"/existsQuestionsUser\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Overall Users Rate\",\n            text: this.state.overallUsersRate > 0 ? Array.from({\n              length: this.state.overallUsersRate\n            }, (_, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2605\"\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 37\n            }, this)) : 'No Data',\n            to: \"/questionsAnswersReportPremium\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DiagnosticInformationLayout, {\n            h2: \"Amount Of Users\",\n            text: this.state.amountOfUsers,\n            to: \"/usersDataReportPremium\",\n            name: \"More Info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Header","style","PageLayout","DiagnosticInformationLayout","PremiumHome","state","usersData","amountOfUsers","questionAnswerData","userOpenQuestions","userClosedQuestions","premiumOpenQuestions","premiumClosedQuestions","overallUsersRate","componentDidMount","getQuestionAnswer","showQuestionAnswerData","calculateRate","getUsersData","showAmountOfUser","componentDidUpdate","prevProps","prevState","learnedData","calculateMostLearnedComponent","response","fetch","method","crossDomain","headers","Accept","result","json","setState","error","console","index","length","userType","questionAnswerText","haveAnAnswer","rate","users","selectedStars","overallRate","render","premiumHome","section","Array","from","_"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/premiumPages/pages/premiumHome/PremiumHome.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Header from '../../../commonComponents/header/Header';\r\nimport style from './premiumHome.module.css';\r\nimport PageLayout from '../../layouts/pageLayout/PageLayout';\r\nimport DiagnosticInformationLayout from '../../../adminPages/layouts/diagnosticInformationLayout/DiagnosticInformationLayout';\r\n\r\n/**\r\n * Description - This class display the user question/answer and data of users in home page of premium\r\n */\r\nexport default class PremiumHome extends Component {\r\n  state = {\r\n    usersData: [],\r\n    amountOfUsers: 0,\r\n    questionAnswerData: [],\r\n    userOpenQuestions: 0,\r\n    userClosedQuestions: 0,\r\n    premiumOpenQuestions: 0,\r\n    premiumClosedQuestions: 0,\r\n    overallUsersRate: 0,\r\n  };\r\n\r\n  /**\r\n   * Description - This function activate functions when the page is uploaded\r\n   */\r\n  async componentDidMount() {\r\n    await this.getQuestionAnswer();\r\n    this.showQuestionAnswerData();\r\n    this.calculateRate();\r\n    await this.getUsersData();\r\n    this.showAmountOfUser();\r\n  }\r\n\r\n  /**\r\n   * Description - This function checks if the usersData and questionAnswerData state have changed since the previous update. If they have, it triggers the necessary functions to update the related data and calculations.\r\n   * @param {*} prevState - previous state of the functions\r\n   */\r\n  async componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.usersData !== this.state.usersData) {\r\n      this.showAmountOfUser();\r\n    }\r\n\r\n    if (prevState.questionAnswerData !== this.state.questionAnswerData) {\r\n      this.showQuestionAnswerData();\r\n      this.calculateRate();\r\n    }\r\n\r\n    if (prevState.learnedData !== this.state.learnedData) {\r\n      this.calculateMostLearnedComponent();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function get all the data about the users from the server\r\n   */\r\n  async getUsersData() {\r\n    try {\r\n      const response = await fetch(\r\n        'http://localhost:5000/reports/getUsersData',\r\n        {\r\n          method: 'POST',\r\n          crossDomain: true,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            'Accept-Control-Allow-Origin': '*',\r\n          },\r\n        }\r\n      );\r\n      const result = await response.json();\r\n      this.setState({\r\n        usersData: result,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function calculate the amount of \"User\" have sign up\r\n   */\r\n  showAmountOfUser() {\r\n    const usersData = this.state.usersData;\r\n    // console.log(usersData)\r\n    let amountOfUsers = 0;\r\n\r\n    for (let index = 0; index < usersData.length; index++) {\r\n      if (usersData[index].userType === 'User') {\r\n        amountOfUsers = amountOfUsers + 1;\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      amountOfUsers: amountOfUsers,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Description - This function get all the data of Question / Answer from the server\r\n   */\r\n  async getQuestionAnswer() {\r\n    try {\r\n      const response = await fetch(\r\n        'http://localhost:5000/reports/getQuestionAnswerData',\r\n        {\r\n          method: 'POST',\r\n          crossDomain: true,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            'Accept-Control-Allow-Origin': '*',\r\n          },\r\n        }\r\n      );\r\n      const result = await response.json();\r\n\r\n      this.setState({\r\n        questionAnswerData: result,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function show the amount of open and closed questions\r\n   */\r\n  showQuestionAnswerData() {\r\n    const questionAnswerData = this.state.questionAnswerData;\r\n    let userOpenQuestions = 0;\r\n    let userClosedQuestions = 0;\r\n    let premiumOpenQuestions = 0;\r\n    let premiumClosedQuestions = 0;\r\n\r\n    for (let index = 0; index < questionAnswerData.length; index++) {\r\n   \r\n      if (\r\n        questionAnswerData[index].questionAnswerText[index].userType !==\r\n        'Premium'\r\n      ) {\r\n        if (!questionAnswerData[index].haveAnAnswer) {\r\n          userOpenQuestions++;\r\n        } else {\r\n          userClosedQuestions++;\r\n        }\r\n      }\r\n      if (\r\n        questionAnswerData[index].questionAnswerText[index + 1].userType ===\r\n        'Premium'\r\n      ) {\r\n        if (!questionAnswerData[index].haveAnAnswer) {\r\n          premiumOpenQuestions++;\r\n        } else {\r\n          premiumClosedQuestions++;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      userOpenQuestions: userOpenQuestions,\r\n      userClosedQuestions: userClosedQuestions,\r\n      premiumOpenQuestions: premiumOpenQuestions,\r\n      premiumClosedQuestions: premiumClosedQuestions,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Description - This function show the average rate given by the users\r\n   */\r\n  calculateRate() {\r\n    const questionAnswerData = this.state.questionAnswerData;\r\n    let rate = 0;\r\n    let users = 0;\r\n    let index = 0;\r\n    for (; index < questionAnswerData.length; index++) {\r\n      if (\r\n        questionAnswerData[index].haveAnAnswer &&\r\n        questionAnswerData[index].selectedStars > 0\r\n      ) {\r\n        rate = rate + questionAnswerData[index].selectedStars;\r\n        users = users + 1;\r\n      }\r\n    }\r\n\r\n    if (users > 0) {\r\n      const overallRate = rate / users;\r\n      this.setState({\r\n        overallUsersRate: overallRate,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='PC BUILDER Premium' />\r\n        <div className={style.premiumHome}>\r\n          <section className={style.section}>\r\n            <DiagnosticInformationLayout\r\n              h2='Users Questions'\r\n              text={\r\n                <>\r\n                  open {this.state.userOpenQuestions}\r\n                  <br />\r\n                  close {this.state.userClosedQuestions}\r\n                </>\r\n              }\r\n              to='/questionsAnswersReportPremium'\r\n              name='More Info'\r\n            />\r\n\r\n            <DiagnosticInformationLayout\r\n              h2='Premium Questions'\r\n              text={\r\n                <>\r\n                  open {this.state.premiumOpenQuestions}\r\n                  <br />\r\n                  close {this.state.premiumClosedQuestions}\r\n                </>\r\n              }\r\n              to='/existsQuestionsUser'\r\n              name='More Info'\r\n            />\r\n\r\n            <DiagnosticInformationLayout\r\n              h2='Overall Users Rate'\r\n              text={\r\n                this.state.overallUsersRate > 0\r\n                  ? Array.from(\r\n                      { length: this.state.overallUsersRate },\r\n                      (_, index) => <span key={index}>★</span>\r\n                    )\r\n                  : 'No Data'\r\n              }\r\n              to='/questionsAnswersReportPremium'\r\n              name='More Info'\r\n            />\r\n\r\n            <DiagnosticInformationLayout\r\n              h2='Amount Of Users'\r\n              text={this.state.amountOfUsers}\r\n              to='/usersDataReportPremium'\r\n              name='More Info'\r\n            />\r\n          </section>\r\n        </div>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}