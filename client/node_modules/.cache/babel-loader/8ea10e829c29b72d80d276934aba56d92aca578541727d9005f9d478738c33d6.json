{"ast":null,"code":"// import React, { Component } from 'react';\n// import Header from '../../../commonComponents/header/Header';\n// import style from './premiumHome.module.css';\n// import PageLayout from '../../layouts/pageLayout/PageLayout';\n// import DiagnosticInformationLayout from '../../../adminPages/layouts/diagnosticInformationLayout/DiagnosticInformationLayout';\n\n// /**\n//  * Description - This class display the user question/answer and data of users in home page of premium\n//  */\n// export default class PremiumHome extends Component {\n//   state = {\n//     usersData: [],\n//     amountOfUsers: 0,\n//     questionAnswerData: [],\n//     userOpenQuestions: 0,\n//     userClosedQuestions: 0,\n//     premiumOpenQuestions: 0,\n//     premiumClosedQuestions: 0,\n//     overallUsersRate: 0,\n//   };\n\n//   /**\n//    * Description - This function activate functions when the page is uploaded\n//    */\n//   async componentDidMount() {\n//     await this.getQuestionAnswer();\n//     this.showQuestionAnswerData();\n//     this.calculateRate();\n//     await this.getUsersData();\n//     this.showAmountOfUser();\n//   }\n\n//   /**\n//    * Description - This function checks if the usersData and questionAnswerData state have changed since the previous update. If they have, it triggers the necessary functions to update the related data and calculations.\n//    * @param {*} prevState - previous state of the functions\n//    */\n//   async componentDidUpdate(prevProps, prevState) {\n//     if (prevState.usersData !== this.state.usersData) {\n//       this.showAmountOfUser();\n//     }\n\n//     if (prevState.questionAnswerData !== this.state.questionAnswerData) {\n//       this.showQuestionAnswerData();\n//       this.calculateRate();\n//     }\n\n//     if (prevState.learnedData !== this.state.learnedData) {\n//       this.calculateMostLearnedComponent();\n//     }\n//   }\n\n//   /**\n//    * Description - This function get all the data about the users from the server\n//    */\n//   async getUsersData() {\n//     try {\n//       const response = await fetch(\n//         'http://localhost:5000/reports/getUsersData',\n//         {\n//           method: 'POST',\n//           crossDomain: true,\n//           headers: {\n//             'Content-Type': 'application/json',\n//             Accept: 'application/json',\n//             'Accept-Control-Allow-Origin': '*',\n//           },\n//         }\n//       );\n//       const result = await response.json();\n//       this.setState({\n//         usersData: result,\n//       });\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   }\n\n//   /**\n//    * Description - This function calculate the amount of \"User\" have sign up\n//    */\n//   showAmountOfUser() {\n//     const usersData = this.state.usersData;\n//     // console.log(usersData)\n//     let amountOfUsers = 0;\n\n//     for (let index = 0; index < usersData.length; index++) {\n//       if (usersData[index].userType === 'User') {\n//         amountOfUsers = amountOfUsers + 1;\n//       }\n//     }\n\n//     this.setState({\n//       amountOfUsers: amountOfUsers,\n//     });\n//   }\n\n//   /**\n//    * Description - This function get all the data of Question / Answer from the server\n//    */\n//   async getQuestionAnswer() {\n//     try {\n//       const response = await fetch(\n//         'http://localhost:5000/reports/getQuestionAnswerData',\n//         {\n//           method: 'POST',\n//           crossDomain: true,\n//           headers: {\n//             'Content-Type': 'application/json',\n//             Accept: 'application/json',\n//             'Accept-Control-Allow-Origin': '*',\n//           },\n//         }\n//       );\n//       const result = await response.json();\n\n//       this.setState({\n//         questionAnswerData: result,\n//       });\n//     } catch (error) {\n//       console.error('Error fetching data:', error);\n//     }\n//   }\n\n//   /**\n//    * Description - This function show the amount of open and closed questions\n//    */\n//   showQuestionAnswerData() {\n//     const questionAnswerData = this.state.questionAnswerData;\n//     let userOpenQuestions = 0;\n//     let userClosedQuestions = 0;\n//     let premiumOpenQuestions = 0;\n//     let premiumClosedQuestions = 0;\n\n//     for (let index = 0; index < questionAnswerData.length; index++) {\n//       if (\n//         questionAnswerData[index].questionAnswerText[index + 1].userType !==\n//         'Premium'\n//       ) {\n//         if (!questionAnswerData[index].haveAnAnswer) {\n//           userOpenQuestions++;\n//         } else {\n//           userClosedQuestions++;\n//         }\n//       }\n//       if (\n//         questionAnswerData[index].questionAnswerText[index + 1].userType ===\n//         'Premium'\n//       ) {\n//         if (!questionAnswerData[index].haveAnAnswer) {\n//           premiumOpenQuestions++;\n//         } else {\n//           premiumClosedQuestions++;\n//         }\n//       }\n//     }\n\n//     this.setState({\n//       userOpenQuestions: userOpenQuestions,\n//       userClosedQuestions: userClosedQuestions,\n//       premiumOpenQuestions: premiumOpenQuestions,\n//       premiumClosedQuestions: premiumClosedQuestions,\n//     });\n//   }\n\n//   /**\n//    * Description - This function show the average rate given by the users\n//    */\n//   calculateRate() {\n//     const questionAnswerData = this.state.questionAnswerData;\n//     let rate = 0;\n//     let users = 0;\n//     let index = 0;\n//     for (; index < questionAnswerData.length; index++) {\n//       if (\n//         questionAnswerData[index].haveAnAnswer &&\n//         questionAnswerData[index].selectedStars > 0\n//       ) {\n//         rate = rate + questionAnswerData[index].selectedStars;\n//         users = users + 1;\n//       }\n//     }\n\n//     if (users > 0) {\n//       const overallRate = rate / users;\n//       this.setState({\n//         overallUsersRate: overallRate,\n//       });\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <PageLayout>\n//         <Header h1Heading='PC BUILDER Premium' />\n//         <div className={style.premiumHome}>\n//           <section className={style.section}>\n//             <DiagnosticInformationLayout\n//               h2='Users Questions'\n//               text={\n//                 <>\n//                   open {this.state.userOpenQuestions}\n//                   <br />\n//                   close {this.state.userClosedQuestions}\n//                 </>\n//               }\n//               to='/questionsAnswersReportPremium'\n//               name='More Info'\n//             />\n\n//             <DiagnosticInformationLayout\n//               h2='Premium Questions'\n//               text={\n//                 <>\n//                   open {this.state.premiumOpenQuestions}\n//                   <br />\n//                   close {this.state.premiumClosedQuestions}\n//                 </>\n//               }\n//               to='/existsQuestionsUser'\n//               name='More Info'\n//             />\n\n//             <DiagnosticInformationLayout\n//               h2='Overall Users Rate'\n//               text={\n//                 this.state.overallUsersRate > 0\n//                   ? Array.from(\n//                       { length: this.state.overallUsersRate },\n//                       (_, index) => <span key={index}>â˜…</span>\n//                     )\n//                   : 'No Data'\n//               }\n//               to='/questionsAnswersReportPremium'\n//               name='More Info'\n//             />\n\n//             <DiagnosticInformationLayout\n//               h2='Amount Of Users'\n//               text={this.state.amountOfUsers}\n//               to='/usersDataReportPremium'\n//               name='More Info'\n//             />\n//           </section>\n//         </div>\n//       </PageLayout>\n//     );\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/premiumPages/pages/premiumHome/PremiumHome.js"],"sourcesContent":["// import React, { Component } from 'react';\r\n// import Header from '../../../commonComponents/header/Header';\r\n// import style from './premiumHome.module.css';\r\n// import PageLayout from '../../layouts/pageLayout/PageLayout';\r\n// import DiagnosticInformationLayout from '../../../adminPages/layouts/diagnosticInformationLayout/DiagnosticInformationLayout';\r\n\r\n// /**\r\n//  * Description - This class display the user question/answer and data of users in home page of premium\r\n//  */\r\n// export default class PremiumHome extends Component {\r\n//   state = {\r\n//     usersData: [],\r\n//     amountOfUsers: 0,\r\n//     questionAnswerData: [],\r\n//     userOpenQuestions: 0,\r\n//     userClosedQuestions: 0,\r\n//     premiumOpenQuestions: 0,\r\n//     premiumClosedQuestions: 0,\r\n//     overallUsersRate: 0,\r\n//   };\r\n\r\n//   /**\r\n//    * Description - This function activate functions when the page is uploaded\r\n//    */\r\n//   async componentDidMount() {\r\n//     await this.getQuestionAnswer();\r\n//     this.showQuestionAnswerData();\r\n//     this.calculateRate();\r\n//     await this.getUsersData();\r\n//     this.showAmountOfUser();\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function checks if the usersData and questionAnswerData state have changed since the previous update. If they have, it triggers the necessary functions to update the related data and calculations.\r\n//    * @param {*} prevState - previous state of the functions\r\n//    */\r\n//   async componentDidUpdate(prevProps, prevState) {\r\n//     if (prevState.usersData !== this.state.usersData) {\r\n//       this.showAmountOfUser();\r\n//     }\r\n\r\n//     if (prevState.questionAnswerData !== this.state.questionAnswerData) {\r\n//       this.showQuestionAnswerData();\r\n//       this.calculateRate();\r\n//     }\r\n\r\n//     if (prevState.learnedData !== this.state.learnedData) {\r\n//       this.calculateMostLearnedComponent();\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function get all the data about the users from the server\r\n//    */\r\n//   async getUsersData() {\r\n//     try {\r\n//       const response = await fetch(\r\n//         'http://localhost:5000/reports/getUsersData',\r\n//         {\r\n//           method: 'POST',\r\n//           crossDomain: true,\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//             Accept: 'application/json',\r\n//             'Accept-Control-Allow-Origin': '*',\r\n//           },\r\n//         }\r\n//       );\r\n//       const result = await response.json();\r\n//       this.setState({\r\n//         usersData: result,\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error fetching data:', error);\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function calculate the amount of \"User\" have sign up\r\n//    */\r\n//   showAmountOfUser() {\r\n//     const usersData = this.state.usersData;\r\n//     // console.log(usersData)\r\n//     let amountOfUsers = 0;\r\n\r\n//     for (let index = 0; index < usersData.length; index++) {\r\n//       if (usersData[index].userType === 'User') {\r\n//         amountOfUsers = amountOfUsers + 1;\r\n//       }\r\n//     }\r\n\r\n//     this.setState({\r\n//       amountOfUsers: amountOfUsers,\r\n//     });\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function get all the data of Question / Answer from the server\r\n//    */\r\n//   async getQuestionAnswer() {\r\n//     try {\r\n//       const response = await fetch(\r\n//         'http://localhost:5000/reports/getQuestionAnswerData',\r\n//         {\r\n//           method: 'POST',\r\n//           crossDomain: true,\r\n//           headers: {\r\n//             'Content-Type': 'application/json',\r\n//             Accept: 'application/json',\r\n//             'Accept-Control-Allow-Origin': '*',\r\n//           },\r\n//         }\r\n//       );\r\n//       const result = await response.json();\r\n\r\n//       this.setState({\r\n//         questionAnswerData: result,\r\n//       });\r\n//     } catch (error) {\r\n//       console.error('Error fetching data:', error);\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function show the amount of open and closed questions\r\n//    */\r\n//   showQuestionAnswerData() {\r\n//     const questionAnswerData = this.state.questionAnswerData;\r\n//     let userOpenQuestions = 0;\r\n//     let userClosedQuestions = 0;\r\n//     let premiumOpenQuestions = 0;\r\n//     let premiumClosedQuestions = 0;\r\n\r\n//     for (let index = 0; index < questionAnswerData.length; index++) {\r\n//       if (\r\n//         questionAnswerData[index].questionAnswerText[index + 1].userType !==\r\n//         'Premium'\r\n//       ) {\r\n//         if (!questionAnswerData[index].haveAnAnswer) {\r\n//           userOpenQuestions++;\r\n//         } else {\r\n//           userClosedQuestions++;\r\n//         }\r\n//       }\r\n//       if (\r\n//         questionAnswerData[index].questionAnswerText[index + 1].userType ===\r\n//         'Premium'\r\n//       ) {\r\n//         if (!questionAnswerData[index].haveAnAnswer) {\r\n//           premiumOpenQuestions++;\r\n//         } else {\r\n//           premiumClosedQuestions++;\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//     this.setState({\r\n//       userOpenQuestions: userOpenQuestions,\r\n//       userClosedQuestions: userClosedQuestions,\r\n//       premiumOpenQuestions: premiumOpenQuestions,\r\n//       premiumClosedQuestions: premiumClosedQuestions,\r\n//     });\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function show the average rate given by the users\r\n//    */\r\n//   calculateRate() {\r\n//     const questionAnswerData = this.state.questionAnswerData;\r\n//     let rate = 0;\r\n//     let users = 0;\r\n//     let index = 0;\r\n//     for (; index < questionAnswerData.length; index++) {\r\n//       if (\r\n//         questionAnswerData[index].haveAnAnswer &&\r\n//         questionAnswerData[index].selectedStars > 0\r\n//       ) {\r\n//         rate = rate + questionAnswerData[index].selectedStars;\r\n//         users = users + 1;\r\n//       }\r\n//     }\r\n\r\n//     if (users > 0) {\r\n//       const overallRate = rate / users;\r\n//       this.setState({\r\n//         overallUsersRate: overallRate,\r\n//       });\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <PageLayout>\r\n//         <Header h1Heading='PC BUILDER Premium' />\r\n//         <div className={style.premiumHome}>\r\n//           <section className={style.section}>\r\n//             <DiagnosticInformationLayout\r\n//               h2='Users Questions'\r\n//               text={\r\n//                 <>\r\n//                   open {this.state.userOpenQuestions}\r\n//                   <br />\r\n//                   close {this.state.userClosedQuestions}\r\n//                 </>\r\n//               }\r\n//               to='/questionsAnswersReportPremium'\r\n//               name='More Info'\r\n//             />\r\n\r\n//             <DiagnosticInformationLayout\r\n//               h2='Premium Questions'\r\n//               text={\r\n//                 <>\r\n//                   open {this.state.premiumOpenQuestions}\r\n//                   <br />\r\n//                   close {this.state.premiumClosedQuestions}\r\n//                 </>\r\n//               }\r\n//               to='/existsQuestionsUser'\r\n//               name='More Info'\r\n//             />\r\n\r\n//             <DiagnosticInformationLayout\r\n//               h2='Overall Users Rate'\r\n//               text={\r\n//                 this.state.overallUsersRate > 0\r\n//                   ? Array.from(\r\n//                       { length: this.state.overallUsersRate },\r\n//                       (_, index) => <span key={index}>â˜…</span>\r\n//                     )\r\n//                   : 'No Data'\r\n//               }\r\n//               to='/questionsAnswersReportPremium'\r\n//               name='More Info'\r\n//             />\r\n\r\n//             <DiagnosticInformationLayout\r\n//               h2='Amount Of Users'\r\n//               text={this.state.amountOfUsers}\r\n//               to='/usersDataReportPremium'\r\n//               name='More Info'\r\n//             />\r\n//           </section>\r\n//         </div>\r\n//       </PageLayout>\r\n//     );\r\n//   }\r\n// }\r\n\r\n\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}