{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\userPages\\\\pages\\\\questionAnswerUser\\\\newQuestion\\\\NewQuestion.js\";\nimport React, { Component } from 'react';\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\nimport Header from '../../../../commonComponents/header/Header';\nimport style from './newQuestion.module.css';\nimport Button from '../../../../commonComponents/button/Button';\n\n/**\r\n * Description - This class add question to the server\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class NewQuestion extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      userId: JSON.parse(localStorage.getItem('user'))._id,\n      userEmail: JSON.parse(localStorage.getItem('user')).email,\n      userFullName: JSON.parse(localStorage.getItem('user')).fullName,\n      questionName: '',\n      questionText: '',\n      answerText: '',\n      haveAnAnswer: false,\n      showResult: '',\n      selectedStars: 0,\n      date: new Date(),\n      questionDate: ''\n    };\n  }\n  /**\r\n   * Description - This function add the question data to the server\r\n   * @param {*} e - Question data\r\n   */\n  async handleSubmit(e) {\n    let day = date.getDate();\n    let month = date.getMonth() + 1;\n    let year = date.getFullYear();\n    console.log(this.state.date);\n    e.preventDefault();\n    const questionInputData = {\n      method: 'POST',\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify(this.state)\n    };\n    const response = await fetch('http://localhost:5000/userQuestionAnswer/newQuestion', questionInputData);\n    const result = await response.json();\n    if (result.status === 'ok') {\n      this.setState({\n        showResult: 'The Question has been added'\n      });\n      setTimeout(() => {\n        this.setState({\n          questionName: '',\n          questionText: '',\n          showResult: ''\n        });\n      }, 1000);\n    } else if (result.status === 'Question already exist') {\n      setTimeout(() => {\n        this.setState({\n          showResult: 'This question name already exist'\n        });\n      }, 1000);\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"New Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit.bind(this),\n          className: style.form,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter Question Name:\",\n            value: this.state.questionName,\n            required: true,\n            onChange: e => this.setState({\n              questionName: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: style.textArea,\n            value: this.state.questionText,\n            name: \"tarea\",\n            rows: \"6\",\n            cols: \"40\",\n            placeholder: \" Write text here\",\n            required: true,\n            onChange: e => this.setState({\n              questionText: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            text: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.showResult,\n            children: this.state.showResult\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","PageLayout","Header","style","Button","NewQuestion","state","userId","JSON","parse","localStorage","getItem","_id","userEmail","email","userFullName","fullName","questionName","questionText","answerText","haveAnAnswer","showResult","selectedStars","date","Date","questionDate","handleSubmit","e","day","getDate","month","getMonth","year","getFullYear","console","log","preventDefault","questionInputData","method","crossDomain","headers","Accept","body","stringify","response","fetch","result","json","status","setState","setTimeout","render","bind","form","input","target","value","textArea"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/userPages/pages/questionAnswerUser/newQuestion/NewQuestion.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\r\nimport Header from '../../../../commonComponents/header/Header';\r\nimport style from './newQuestion.module.css';\r\nimport Button from '../../../../commonComponents/button/Button';\r\n\r\n/**\r\n * Description - This class add question to the server\r\n */\r\nexport default class NewQuestion extends Component {\r\n  state = {\r\n    userId: JSON.parse(localStorage.getItem('user'))._id,\r\n    userEmail: JSON.parse(localStorage.getItem('user')).email,\r\n    userFullName: JSON.parse(localStorage.getItem('user')).fullName,\r\n    questionName: '',\r\n    questionText: '',\r\n    answerText: '',\r\n    haveAnAnswer: false,\r\n    showResult: '',\r\n    selectedStars: 0,\r\n    date: new Date(),\r\n    questionDate :''\r\n\r\n\r\n  };\r\n\r\n  /**\r\n   * Description - This function add the question data to the server\r\n   * @param {*} e - Question data\r\n   */\r\n  async handleSubmit(e) {\r\n    let day = date.getDate();\r\nlet month = date.getMonth() + 1;\r\nlet year = date.getFullYear();\r\n    console.log(this.state.date);\r\n    e.preventDefault();\r\n    const questionInputData = {\r\n      method: 'POST',\r\n      crossDomain: true,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'Accept-Control-Allow-Origin': '*',\r\n      },\r\n      body: JSON.stringify(this.state),\r\n    };\r\n\r\n    const response = await fetch(\r\n      'http://localhost:5000/userQuestionAnswer/newQuestion',\r\n      questionInputData\r\n    );\r\n    const result = await response.json();\r\n    if (result.status === 'ok') {\r\n      this.setState({\r\n        showResult: 'The Question has been added',\r\n      });\r\n\r\n      setTimeout(() => {\r\n        this.setState({\r\n          questionName: '',\r\n          questionText: '',\r\n          showResult: '',\r\n        });\r\n      }, 1000);\r\n    } else if (result.status === 'Question already exist') {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          showResult: 'This question name already exist',\r\n        });\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='New Question' />\r\n        <section>\r\n          <form onSubmit={this.handleSubmit.bind(this)} className={style.form}>\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter Question Name:'\r\n              value={this.state.questionName}\r\n              required\r\n              onChange={e => this.setState({ questionName: e.target.value })}\r\n            />\r\n\r\n            <textarea\r\n              className={style.textArea}\r\n              value={this.state.questionText}\r\n              name='tarea'\r\n              rows='6'\r\n              cols='40'\r\n              placeholder=' Write text here'\r\n              required\r\n              onChange={e => this.setState({ questionText: e.target.value })}\r\n            ></textarea>\r\n\r\n            <Button type='submit' text='submit' />\r\n            <p className={style.showResult}>{this.state.showResult}</p>\r\n          </form>\r\n        </section>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}