{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\adminPages\\\\pages\\\\update\\\\updateAssemblies\\\\UpdateAssemblies.js\";\nimport React, { Component } from 'react';\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\nimport Header from '../../../../pageSettings/header/Header';\nimport style from './updateAssemblies.module.css';\nimport Button from '../../../../pageSettings/button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UpdateAssemblies extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      assembly: [{\n        assemblyName: 'Loading data...'\n      }],\n      showData: false,\n      selectIndex: null,\n      assemblyName: '',\n      modelCase: '',\n      modelMotherboard: '',\n      modelCPU: '',\n      modelCPUCooler: '',\n      modelGPU: '',\n      modelPSU: '',\n      modelRAM: '',\n      modelSSD: '',\n      cpuArray: [],\n      // Array to store CPU models\n      gpuArray: [],\n      // Array to store GPU models\n      caseArray: [],\n      // Array to store Case models\n      cpuCoolerFanArray: [],\n      // Array to store CPU COOLER FAN models\n      cpuCoolerLiquidArray: [],\n      // Array to store CPU COOLER LIQUID models\n      fanArray: [],\n      // Array to store FAN models\n      motherboardArray: [],\n      // Array to store MOTHERBOARD models\n      psuArray: [],\n      // Array to store PSU models\n      ramArray: [],\n      // Array to store RAM models\n      ssdM2Array: [],\n      // Array to store SSD M2 models\n      ssdSataArray: [],\n      // Array to store SSD SATA models\n      showResult: ''\n    };\n    this.handelClick = index => {\n      this.setState({\n        showData: true,\n        selectIndex: index\n      });\n    };\n  }\n  async getAssembly() {\n    const response = await fetch('http://localhost:5000/getAssemblies/assemblies');\n    const result = await response.json();\n    console.log(result);\n    this.setState({\n      assembly: result\n    });\n  }\n\n  // Asynchronous function to fetch component models\n  async getModels() {\n    // Fetching component models from the server\n    const response = await fetch('http://localhost:5000/showComponentsData/modals');\n    // Parsing the response as JSON\n    const result = await response.json();\n    // Updating the CPU array in the component state with fetched models\n    this.setState({\n      cpuArray: result.cpu\n    });\n    // Updating the GPU array in the component state with fetched models\n    this.setState({\n      gpuArray: result.gpu\n    });\n    // Updating the CASE array in the component state with fetched models\n    this.setState({\n      caseArray: result.case\n    });\n    // Updating the CPU COOLER FAN array in the component state with fetched models\n    this.setState({\n      cpuCoolerFanArray: result.cpuCoolerFan\n    });\n    // Updating the CPU COOLER LIQUID array in the component state with fetched models\n    this.setState({\n      cpuCoolerLiquidArray: result.cpuCoolerLiquid\n    });\n    // Updating the MOTHERBOARD array in the component state with fetched models\n    this.setState({\n      motherboardArray: result.motherboard\n    });\n    // Updating the PSU array in the component state with fetched models\n    this.setState({\n      psuArray: result.psu\n    });\n    // Updating the RAM array in the component state with fetched models\n    this.setState({\n      ramArray: result.ram\n    });\n    // Updating the SSD M2 array in the component state with fetched models\n    this.setState({\n      ssdM2Array: result.ssdM2\n    });\n    // Updating the SSD SATA array in the component state with fetched models\n    this.setState({\n      ssdSataArray: result.ssdSata\n    });\n  }\n\n  // Asynchronous function to handle form submission\n  async handleSubmit(e) {\n    // Preventing the default form submission behavior\n    e.preventDefault();\n    const options = {\n      method: 'POST',\n      crossDomain: true,\n      // Setting headers for the HTTP request\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      // Converting the state object to JSON and setting it as the request body\n      body: JSON.stringify(this.state)\n    };\n    const response = await fetch('http://localhost:5000/addAssemblies', options);\n    // Parsing the response as JSON\n    const result = await response.json();\n    console.log(result);\n    // Checking if the request was successful\n    if (result.status === 'ok') {\n      this.setState({\n        showResult: 'The Assembly has been added'\n      });\n    } else if (result.status === 'Assembly already exist') {\n      this.setState({\n        showResult: 'This assembly already  exist'\n      });\n    }\n  }\n\n  // Lifecycle method called after the component is mounted\n  componentDidMount() {\n    // Fetching the component models when the component is mounted\n    this.getModels();\n    this.getAssembly();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"Update Assemblies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), this.state.showData && this.state.selectIndex !== null && /*#__PURE__*/_jsxDEV(\"section\", {\n        className: style.showAllData,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: style.h2,\n          children: \"Assembly Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.handleSubmit.bind(this),\n            className: style.form,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: this.state.assembly[this.state.selectIndex].assemblyName,\n              value: this.state.assemblyName,\n              required: true,\n              onChange: e => this.setState({\n                assemblyName: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: this.state.modelMotherboard,\n              label: \"MOTHERBOARD\",\n              onChange: e => this.setState({\n                modelMotherboard: e.target.value\n              }),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                disabled: true,\n                children: this.state.assembly[this.state.selectIndex].modelMotherboard\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 19\n              }, this), this.state.motherboardArray.map(itemMotherboard => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemMotherboard,\n                  children: itemMotherboard\n                }, itemMotherboard, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: this.state.modelCPU,\n              label: \"CPU\",\n              onChange: e => this.setState({\n                modelCPU: e.target.value\n              }),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                disabled: true,\n                children: this.state.assembly[this.state.selectIndex].modelCPU\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 19\n              }, this), this.state.cpuArray.map(itemCpu => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCpu,\n                  children: itemCpu\n                }, itemCpu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: this.state.modelCPUCooler,\n              label: \"CPU Cooler\",\n              onChange: e => this.setState({\n                modelCPUCooler: e.target.value\n              }),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                disabled: true,\n                children: this.state.assembly[this.state.selectIndex].modelCPUCooler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 19\n              }, this), [...this.state.cpuCoolerFanArray, ...this.state.cpuCoolerLiquidArray].map(itemCpuCooler => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCpuCooler,\n                  children: itemCpuCooler\n                }, itemCpuCooler, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 205,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: this.state.modelGPU,\n              label: \"GPU\",\n              onChange: e => this.setState({\n                modelGPU: e.target.value\n              }),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                disabled: true,\n                children: this.state.assembly[this.state.selectIndex].modelGPU\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 19\n              }, this), this.state.gpuArray.map(itemGpu => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemGpu,\n                  children: itemGpu\n                }, itemGpu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: this.state.modelPSU,\n              label: \"PSU\",\n              onChange: e => this.setState({\n                modelPSU: e.target.value\n              }),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                disabled: true,\n                children: this.state.assembly[this.state.selectIndex].modelPSU\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 19\n              }, this), this.state.psuArray.map(itemPsu => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemPsu,\n                  children: itemPsu\n                }, itemPsu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: this.state.modelRAM,\n              label: \"RAM\",\n              onChange: e => this.setState({\n                modelRAM: e.target.value\n              }),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                disabled: true,\n                children: this.state.assembly[this.state.selectIndex].modelRAM\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 19\n              }, this), this.state.ramArray.map(itemRam => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemRam,\n                  children: itemRam\n                }, itemRam, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: this.state.modelSSD,\n              label: \"SSD\",\n              onChange: e => this.setState({\n                modelSSD: e.target.value\n              }),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                disabled: true,\n                children: this.state.assembly[this.state.selectIndex].modelSSD\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 19\n              }, this), [...this.state.ssdM2Array, ...this.state.ssdSataArray].map(itemSSD => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemSSD,\n                  children: itemSSD\n                }, itemSSD, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 25\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: this.state.modelCase,\n              label: \"CASE\",\n              onChange: e => this.setState({\n                modelCase: e.target.value\n              }),\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                disabled: true,\n                children: this.state.assembly[this.state.selectIndex].modelCase\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 19\n              }, this), this.state.caseArray.map(itemCase => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCase,\n                  children: itemCase\n                }, itemCase, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              text: \"submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: this.state.showResult\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","PageLayout","Header","style","Button","UpdateAssemblies","state","assembly","assemblyName","showData","selectIndex","modelCase","modelMotherboard","modelCPU","modelCPUCooler","modelGPU","modelPSU","modelRAM","modelSSD","cpuArray","gpuArray","caseArray","cpuCoolerFanArray","cpuCoolerLiquidArray","fanArray","motherboardArray","psuArray","ramArray","ssdM2Array","ssdSataArray","showResult","handelClick","index","setState","getAssembly","response","fetch","result","json","console","log","getModels","cpu","gpu","case","cpuCoolerFan","cpuCoolerLiquid","motherboard","psu","ram","ssdM2","ssdSata","handleSubmit","e","preventDefault","options","method","crossDomain","headers","Accept","body","JSON","stringify","status","componentDidMount","render","showAllData","h2","bind","form","target","value","map","itemMotherboard","itemCpu","itemCpuCooler","itemGpu","itemPsu","itemRam","itemSSD","itemCase"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/adminPages/pages/update/updateAssemblies/UpdateAssemblies.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport PageLayout from '../../../layouts/pageLayout/PageLayout'\r\nimport Header from '../../../../pageSettings/header/Header'\r\nimport style from './updateAssemblies.module.css'\r\nimport Button from '../../../../pageSettings/button/Button'\r\n\r\nexport default class UpdateAssemblies extends Component {\r\n  state = {\r\n    assembly: [{ assemblyName: 'Loading data...' }],\r\n    showData: false,\r\n    selectIndex: null,\r\n    assemblyName: '',\r\n    modelCase: '',\r\n    modelMotherboard: '',\r\n    modelCPU: '',\r\n    modelCPUCooler: '',\r\n    modelGPU: '',\r\n    modelPSU: '',\r\n    modelRAM: '',\r\n    modelSSD: '',\r\n    cpuArray: [], // Array to store CPU models\r\n    gpuArray: [], // Array to store GPU models\r\n    caseArray: [], // Array to store Case models\r\n    cpuCoolerFanArray: [], // Array to store CPU COOLER FAN models\r\n    cpuCoolerLiquidArray: [], // Array to store CPU COOLER LIQUID models\r\n    fanArray: [], // Array to store FAN models\r\n    motherboardArray: [], // Array to store MOTHERBOARD models\r\n    psuArray: [], // Array to store PSU models\r\n    ramArray: [], // Array to store RAM models\r\n    ssdM2Array: [], // Array to store SSD M2 models\r\n    ssdSataArray: [], // Array to store SSD SATA models\r\n    showResult: '',\r\n  };\r\n\r\n  async getAssembly() {\r\n    const response = await fetch(\r\n      'http://localhost:5000/getAssemblies/assemblies'\r\n    );\r\n    const result = await response.json();\r\n    console.log(result);\r\n    this.setState({ assembly: result });\r\n  }\r\n\r\n  // Asynchronous function to fetch component models\r\n  async getModels() {\r\n    // Fetching component models from the server\r\n    const response = await fetch(\r\n      'http://localhost:5000/showComponentsData/modals'\r\n    );\r\n    // Parsing the response as JSON\r\n    const result = await response.json();\r\n    // Updating the CPU array in the component state with fetched models\r\n    this.setState({ cpuArray: result.cpu });\r\n    // Updating the GPU array in the component state with fetched models\r\n    this.setState({ gpuArray: result.gpu });\r\n    // Updating the CASE array in the component state with fetched models\r\n    this.setState({ caseArray: result.case });\r\n    // Updating the CPU COOLER FAN array in the component state with fetched models\r\n    this.setState({ cpuCoolerFanArray: result.cpuCoolerFan });\r\n    // Updating the CPU COOLER LIQUID array in the component state with fetched models\r\n    this.setState({ cpuCoolerLiquidArray: result.cpuCoolerLiquid });\r\n    // Updating the MOTHERBOARD array in the component state with fetched models\r\n    this.setState({ motherboardArray: result.motherboard });\r\n    // Updating the PSU array in the component state with fetched models\r\n    this.setState({ psuArray: result.psu });\r\n    // Updating the RAM array in the component state with fetched models\r\n    this.setState({ ramArray: result.ram });\r\n    // Updating the SSD M2 array in the component state with fetched models\r\n    this.setState({ ssdM2Array: result.ssdM2 });\r\n    // Updating the SSD SATA array in the component state with fetched models\r\n    this.setState({ ssdSataArray: result.ssdSata });\r\n  }\r\n\r\n  // Asynchronous function to handle form submission\r\n  async handleSubmit(e) {\r\n    // Preventing the default form submission behavior\r\n    e.preventDefault();\r\n    const options = {\r\n      method: 'POST',\r\n      crossDomain: true,\r\n      // Setting headers for the HTTP request\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'Accept-Control-Allow-Origin': '*',\r\n      },\r\n      // Converting the state object to JSON and setting it as the request body\r\n      body: JSON.stringify(this.state),\r\n    };\r\n    const response = await fetch(\r\n      'http://localhost:5000/addAssemblies',\r\n      options\r\n    );\r\n    // Parsing the response as JSON\r\n    const result = await response.json();\r\n    console.log(result);\r\n    // Checking if the request was successful\r\n    if (result.status === 'ok') {\r\n      this.setState({\r\n        showResult: 'The Assembly has been added',\r\n      });\r\n    } else if (result.status === 'Assembly already exist') {\r\n      this.setState({\r\n        showResult: 'This assembly already  exist',\r\n      });\r\n    }\r\n  }\r\n\r\n  // Lifecycle method called after the component is mounted\r\n  componentDidMount() {\r\n    // Fetching the component models when the component is mounted\r\n    this.getModels();\r\n     this.getAssembly();\r\n  }\r\n  handelClick = index => {\r\n    this.setState({\r\n      showData: true,\r\n      selectIndex: index,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='Update Assemblies' />\r\n\r\n        {this.state.showData && this.state.selectIndex !== null && (\r\n          <section className={style.showAllData}>\r\n            <h2 className={style.h2}>Assembly Data</h2>\r\n            <div></div>\r\n\r\n            <section>\r\n              <form\r\n                onSubmit={this.handleSubmit.bind(this)}\r\n                className={style.form}\r\n              >\r\n                <input\r\n                  type='text'\r\n                  placeholder={\r\n                    this.state.assembly[this.state.selectIndex].assemblyName\r\n                  }\r\n                  value={this.state.assemblyName}\r\n                  required\r\n                  onChange={e =>\r\n                    this.setState({ assemblyName: e.target.value })\r\n                  }\r\n                />\r\n\r\n                <select\r\n                  value={this.state.modelMotherboard}\r\n                  label='MOTHERBOARD'\r\n                  onChange={e =>\r\n                    this.setState({ modelMotherboard: e.target.value })\r\n                  }\r\n                  required\r\n                >\r\n                  <option value='' disabled>\r\n                    {\r\n                      this.state.assembly[this.state.selectIndex]\r\n                        .modelMotherboard\r\n                    }\r\n                  </option>\r\n                  {this.state.motherboardArray.map(itemMotherboard => {\r\n                    return (\r\n                      <option key={itemMotherboard} value={itemMotherboard}>\r\n                        {itemMotherboard}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </select>\r\n\r\n                <select\r\n                  value={this.state.modelCPU}\r\n                  label='CPU'\r\n                  onChange={e => this.setState({ modelCPU: e.target.value })}\r\n                  required\r\n                >\r\n                  <option value='' disabled>\r\n                    {this.state.assembly[this.state.selectIndex].modelCPU}\r\n                  </option>\r\n                  {this.state.cpuArray.map(itemCpu => {\r\n                    return (\r\n                      <option key={itemCpu} value={itemCpu}>\r\n                        {itemCpu}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </select>\r\n\r\n                <select\r\n                  value={this.state.modelCPUCooler}\r\n                  label='CPU Cooler'\r\n                  onChange={e =>\r\n                    this.setState({ modelCPUCooler: e.target.value })\r\n                  }\r\n                  required\r\n                >\r\n                  <option value='' disabled>\r\n                    {this.state.assembly[this.state.selectIndex].modelCPUCooler}\r\n                  </option>\r\n                  {[\r\n                    ...this.state.cpuCoolerFanArray,\r\n                    ...this.state.cpuCoolerLiquidArray,\r\n                  ].map(itemCpuCooler => {\r\n                    return (\r\n                      <option key={itemCpuCooler} value={itemCpuCooler}>\r\n                        {itemCpuCooler}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </select>\r\n\r\n                <select\r\n                  value={this.state.modelGPU}\r\n                  label='GPU'\r\n                  onChange={e => this.setState({ modelGPU: e.target.value })}\r\n                  required\r\n                >\r\n                  <option value='' disabled>\r\n                    {this.state.assembly[this.state.selectIndex].modelGPU}\r\n                  </option>\r\n                  {this.state.gpuArray.map(itemGpu => {\r\n                    return (\r\n                      <option key={itemGpu} value={itemGpu}>\r\n                        {itemGpu}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </select>\r\n\r\n                <select\r\n                  value={this.state.modelPSU}\r\n                  label='PSU'\r\n                  onChange={e => this.setState({ modelPSU: e.target.value })}\r\n                  required\r\n                >\r\n                  <option value='' disabled>\r\n                    {this.state.assembly[this.state.selectIndex].modelPSU}\r\n                  </option>\r\n                  {this.state.psuArray.map(itemPsu => {\r\n                    return (\r\n                      <option key={itemPsu} value={itemPsu}>\r\n                        {itemPsu}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </select>\r\n\r\n                <select\r\n                  value={this.state.modelRAM}\r\n                  label='RAM'\r\n                  onChange={e => this.setState({ modelRAM: e.target.value })}\r\n                  required\r\n                >\r\n                  <option value='' disabled>\r\n                    {this.state.assembly[this.state.selectIndex].modelRAM}\r\n                  </option>\r\n                  {this.state.ramArray.map(itemRam => {\r\n                    return (\r\n                      <option key={itemRam} value={itemRam}>\r\n                        {itemRam}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </select>\r\n\r\n                <select\r\n                  value={this.state.modelSSD}\r\n                  label='SSD'\r\n                  onChange={e => this.setState({ modelSSD: e.target.value })}\r\n                  required\r\n                >\r\n                  <option value='' disabled>\r\n                    {this.state.assembly[this.state.selectIndex].modelSSD}\r\n                  </option>\r\n                  {[...this.state.ssdM2Array, ...this.state.ssdSataArray].map(\r\n                    itemSSD => {\r\n                      return (\r\n                        <option key={itemSSD} value={itemSSD}>\r\n                          {itemSSD}\r\n                        </option>\r\n                      );\r\n                    }\r\n                  )}\r\n                </select>\r\n\r\n                <select\r\n                  value={this.state.modelCase}\r\n                  label='CASE'\r\n                  onChange={e => this.setState({ modelCase: e.target.value })}\r\n                  required\r\n                >\r\n                  <option value='' disabled>\r\n                    {this.state.assembly[this.state.selectIndex].modelCase}\r\n                  </option>\r\n                  {this.state.caseArray.map(itemCase => {\r\n                    return (\r\n                      <option key={itemCase} value={itemCase}>\r\n                        {itemCase}\r\n                      </option>\r\n                    );\r\n                  })}\r\n                </select>\r\n\r\n                <Button type='submit' text='submit' />\r\n                <p>{this.state.showResult}</p>\r\n              </form>\r\n            </section>\r\n          </section>\r\n        )}\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}