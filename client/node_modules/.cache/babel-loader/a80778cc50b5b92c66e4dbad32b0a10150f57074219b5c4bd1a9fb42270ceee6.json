{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\adminPages\\\\pages\\\\add\\\\addComponents\\\\addGpu\\\\AddGpu.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../../../commonComponents/button/Button';\nimport PageLayout from '../../../../layouts/pageLayout/PageLayout';\nimport Header from '../../../../../commonComponents/header/Header';\nimport style from '../addMotherboard/addMotherboard.module.css';\n\n/**\r\n * Description - This class add Gpu to the database\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class AddGpu extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      model: '',\n      bus: '',\n      memory: '',\n      engine_clock: '',\n      cuda_core: '',\n      maximum_display: '',\n      psu: '',\n      showResult: ''\n    };\n  }\n  /**\r\n   * Description - This function get all models names from the server and set them on array\r\n   */\n  async getModels() {\n    const response = await fetch('http://localhost:5000/getComponentsModels');\n    const result = await response.json();\n    // console.log(result);\n    let allModels = [];\n    for (let key in result) {\n      // console.log(result[key]);\n      for (let model of result[key]) allModels.push(model);\n    }\n    // console.log(allModels);\n    this.setState({\n      modelsArray: allModels\n    });\n  }\n\n  /**\r\n   * Description - This function activate the getModels function when the page is upload\r\n   */\n  componentDidMount() {\n    this.getModels();\n  }\n  /**\r\n   * Description - This function add gpu to collection\r\n   * @param {*} e - gpu data from Admin\r\n   */\n  async handleSubmit(e) {\n    e.preventDefault();\n    for (let model of this.state.modelsArray) {\n      if (model === this.state.model) {\n        this.setState({\n          showResult: 'This model name already exists'\n        });\n        return;\n      }\n    }\n    const options = {\n      method: 'POST',\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify(this.state)\n    };\n    const response = await fetch('http://localhost:5000/addComponent/gpu', options);\n    const result = await response.json();\n    if (result.status === 'ok') {\n      this.setState({\n        showResult: 'Component have added'\n      });\n      setTimeout(() => {\n        this.setState({\n          showResult: '',\n          model: '',\n          bus: '',\n          memory: '',\n          engine_clock: '',\n          cuda_core: '',\n          maximum_display: '',\n          psu: ''\n        });\n      }, 1000);\n    } else if (result.status === 'Model already exist') {\n      this.setState({\n        showResult: 'Component already exist'\n      });\n      setTimeout(() => {\n        this.setState({\n          showResult: ''\n        });\n      }, 1000);\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"Add GPU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit.bind(this),\n          className: style.form,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter Model:\",\n            value: this.state.model,\n            required: true,\n            onChange: e => this.setState({\n              model: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter Bus:\",\n            required: true,\n            value: this.state.bus,\n            onChange: e => this.setState({\n              bus: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter Memory:\",\n            required: true,\n            value: this.state.memory,\n            onChange: e => this.setState({\n              memory: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter Engine Clock:\",\n            required: true,\n            value: this.state.engine_clock,\n            onChange: e => this.setState({\n              engine_clock: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter Cuda Core:\",\n            required: true,\n            value: this.state.cuda_core,\n            onChange: e => this.setState({\n              cuda_core: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter Maximum Displays:\",\n            required: true,\n            value: this.state.maximum_display,\n            onChange: e => this.setState({\n              maximum_display: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter PSU:\",\n            required: true,\n            value: this.state.psu,\n            onChange: e => this.setState({\n              psu: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            text: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.showResult,\n            children: this.state.showResult\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Button","PageLayout","Header","style","AddGpu","state","model","bus","memory","engine_clock","cuda_core","maximum_display","psu","showResult","getModels","response","fetch","result","json","allModels","key","push","setState","modelsArray","componentDidMount","handleSubmit","e","preventDefault","options","method","crossDomain","headers","Accept","body","JSON","stringify","status","setTimeout","render","bind","form","input","target","value"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/adminPages/pages/add/addComponents/addGpu/AddGpu.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '../../../../../commonComponents/button/Button';\r\nimport PageLayout from '../../../../layouts/pageLayout/PageLayout';\r\nimport Header from '../../../../../commonComponents/header/Header';\r\nimport style from '../addMotherboard/addMotherboard.module.css';\r\n\r\n/**\r\n * Description - This class add Gpu to the database\r\n */\r\nexport default class AddGpu extends Component {\r\n  state = {\r\n    model: '',\r\n    bus: '',\r\n    memory: '',\r\n    engine_clock: '',\r\n    cuda_core: '',\r\n    maximum_display: '',\r\n    psu: '',\r\n    showResult: '',\r\n  };\r\n\r\n  /**\r\n   * Description - This function get all models names from the server and set them on array\r\n   */\r\n  async getModels() {\r\n    const response = await fetch('http://localhost:5000/getComponentsModels');\r\n    const result = await response.json();\r\n    // console.log(result);\r\n    let allModels = [];\r\n    for (let key in result) {\r\n      // console.log(result[key]);\r\n      for (let model of result[key]) allModels.push(model);\r\n    }\r\n    // console.log(allModels);\r\n    this.setState({ modelsArray: allModels });\r\n  }\r\n\r\n  /**\r\n   * Description - This function activate the getModels function when the page is upload\r\n   */\r\n  componentDidMount() {\r\n    this.getModels();\r\n  }\r\n  /**\r\n   * Description - This function add gpu to collection\r\n   * @param {*} e - gpu data from Admin\r\n   */\r\n  async handleSubmit(e) {\r\n    e.preventDefault();\r\n    for (let model of this.state.modelsArray) {\r\n      if (model === this.state.model) {\r\n        this.setState({ showResult: 'This model name already exists' });\r\n        return;\r\n      }\r\n    }\r\n    const options = {\r\n      method: 'POST',\r\n      crossDomain: true,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'Accept-Control-Allow-Origin': '*',\r\n      },\r\n      body: JSON.stringify(this.state),\r\n    };\r\n    const response = await fetch(\r\n      'http://localhost:5000/addComponent/gpu',\r\n      options\r\n    );\r\n    const result = await response.json();\r\n    if (result.status === 'ok') {\r\n      this.setState({ showResult: 'Component have added' });\r\n      setTimeout(() => {\r\n        this.setState({\r\n          showResult: '',\r\n          model: '',\r\n          bus: '',\r\n          memory: '',\r\n          engine_clock: '',\r\n          cuda_core: '',\r\n          maximum_display: '',\r\n          psu: '',\r\n        });\r\n      }, 1000);\r\n    } else if (result.status === 'Model already exist') {\r\n      this.setState({ showResult: 'Component already exist' });\r\n      setTimeout(() => {\r\n        this.setState({\r\n          showResult: '',\r\n        });\r\n      }, 1000);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='Add GPU' />\r\n        <section>\r\n          <form onSubmit={this.handleSubmit.bind(this)} className={style.form}>\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter Model:'\r\n              value={this.state.model}\r\n              required\r\n              onChange={e => this.setState({ model: e.target.value })}\r\n            />\r\n\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter Bus:'\r\n              required\r\n              value={this.state.bus}\r\n              onChange={e => this.setState({ bus: e.target.value })}\r\n            />\r\n\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter Memory:'\r\n              required\r\n              value={this.state.memory}\r\n              onChange={e => this.setState({ memory: e.target.value })}\r\n            />\r\n\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter Engine Clock:'\r\n              required\r\n              value={this.state.engine_clock}\r\n              onChange={e => this.setState({ engine_clock: e.target.value })}\r\n            />\r\n\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter Cuda Core:'\r\n              required\r\n              value={this.state.cuda_core}\r\n              onChange={e => this.setState({ cuda_core: e.target.value })}\r\n            />\r\n\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter Maximum Displays:'\r\n              required\r\n              value={this.state.maximum_display}\r\n              onChange={e => this.setState({ maximum_display: e.target.value })}\r\n            />\r\n\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter PSU:'\r\n              required\r\n              value={this.state.psu}\r\n              onChange={e => this.setState({ psu: e.target.value })}\r\n            />\r\n\r\n            <Button type='submit' text='submit' />\r\n            <p className={style.showResult}>{this.state.showResult}</p>\r\n          </form>\r\n        </section>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}