{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\premiumPages\\\\pages\\\\questionAnswerPremium\\\\QuestionAnswerPremium.js\";\n// import React, { Component } from 'react';\n// import PageLayout from '../../layouts/pageLayout/PageLayout';\n// import Header from '../../../commonComponents/header/Header';\n// import style from './questionAnswerPremium.module.css';\n// import Button from '../../../commonComponents/button/Button';\n\n// /**\n//  * Description - This class show all question from the users and this class answering those questions\n//  */\n// export default class QuestionAnswerPremium extends Component {\n//   state = {\n//     questionAnswerData: [],\n//     questions: [],\n//     messages: [],\n//     users: [],\n//     showData: false,\n//     answerText: '',\n//     selectIndex: null,\n//     showQuestionsNames: false,\n//     questionIndex: null,\n//   };\n\n//   /**\n//    * Description - This function get all the data from the server\n//    */\n//   async getQuestionAnswer() {\n//     const response = await fetch(\n//       'http://localhost:5000/premiumQuestionAnswer/getData',\n//       {\n//         method: 'POST',\n//         crossDomain: true,\n//         headers: {\n//           'Content-Type': 'application/json',\n//           Accept: 'application/json',\n//           'Accept-Control-Allow-Origin': '*',\n//         },\n//       }\n//     );\n//     const result = await response.json();\n//     console.log(result);\n//     this.setState({ questionAnswerData: result });\n\n//     for (let user of result) {\n//       if (!this.state.users.includes(user.userEmail)) {\n//         this.state.users.push(user.userEmail);\n//       }\n//     }\n//   }\n\n//   /**\n//    * Description - This function activate the getQuestionAnswer function when the page is uploaded\n//    */\n//   componentDidMount() {\n//     this.getQuestionAnswer();\n//   }\n\n//   /**\n//    * Description - This function show all the data by click on selected item\n//    * @param {*} index  - Selected item\n//    */\n//   handelClick = index => {\n//     if (index >= this.state.questions.length) {\n//       this.setState({\n//         showData: true,\n//         selectIndex: 0,\n//         messages: this.state.questions[0].questionAnswerText,\n//       });\n//     } else {\n//       this.setState({\n//         showData: true,\n//         selectIndex: index,\n//         messages: this.state.questions[index].questionAnswerText,\n//       });\n//     }\n//   };\n\n//   /**\n//    *Description  - This function show all the question of the selected user\n//    * @param {*} qA - Selsected user\n//    */\n//   handelClickQuestion = qA => {\n//     this.setState({ questions: [] });\n//     if (this.state.selectIndex) {\n//       this.setState({ selectIndex: 0 });\n//     }\n//     let array = [];\n//     for (let data of this.state.questionAnswerData) {\n//       if (data.userEmail === qA) {\n//         array.push(data);\n//         this.setState(prevState => ({\n//           showQuestionsNames: true,\n//         }));\n//       }\n//     }\n//     this.setState({\n//       questions: array,\n//       messages: [...array[0].questionAnswerText],\n//     });\n//   };\n\n//   /**\n//    * Description - This function update an answer to the selected question\n//    * @param {*} e - Selected question\n//    */\n//   async handleSubmit(e) {\n//     e.preventDefault();\n\n//     let dataToSend;\n//     if (!this.state.questions[this.state.selectIndex].haveAnAnswer) {\n//       dataToSend = {\n//         userId: this.state.questions[this.state.selectIndex].userId,\n//         userEmail: this.state.questions[this.state.selectIndex].userEmail,\n//         answerText: this.state.answerText,\n//         questionText: this.state.answerText,\n//         userType: JSON.parse(localStorage.getItem('user')).userType,\n//         questionName: this.state.questions[this.state.selectIndex].questionName,\n//       };\n//     } else {\n//       dataToSend = {\n//         userId: this.state.questions[this.state.selectIndex].userId,\n//         userType: JSON.parse(localStorage.getItem('user')).userType,\n//         answerText: this.state.answerText,\n//         questionText: this.state.answerText,\n//         userEmail: this.state.questions[this.state.selectIndex].userEmail,\n//         questionName: this.state.questions[this.state.selectIndex].questionName,\n//       };\n//     }\n//     const questionInputData = {\n//       method: 'POST',\n//       crossDomain: true,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Accept: 'application/json',\n//         'Accept-Control-Allow-Origin': '*',\n//       },\n//       body: JSON.stringify(dataToSend),\n//     };\n\n//     const response = await fetch(\n//       'http://localhost:5000/premiumQuestionAnswer/updateAnswer',\n//       questionInputData\n//     );\n//     const result = await response.json();\n\n//     this.setState({ messages: [...this.state.messages, dataToSend] });\n//     if (result.status === 'Email send') {\n//       this.setState({\n//         answerText: this.state.answerText,\n//         showResult: 'The Answer has been updated',\n//       });\n//     }\n//     let object = this.state.questions[this.state.selectIndex];\n//     object.haveAnAnswer = true;\n//     console.log(object);\n//     let array = [...this.state.questionAnswerData];\n//     let newArray = array.filter(\n//       qa => qa._id !== this.state.questions[this.state.selectIndex]._id\n//     );\n//     console.log(newArray);\n//     newArray.push(object);\n//     this.setState({\n//       questionAnswerData: [...newArray],\n//     });\n//     this.setState({ answerText: '' });\n//     setTimeout(() => {\n//       this.setState({\n//         showResult: '',\n//       });\n//     }, 2000);\n//     this.getQuestionAnswer();\n//   }\n\n//   /**\n//    * Description - This function check if the all question of the user get an answer\n//    * @param {*} userEmail  - User data\n//    * @returns - True if all question are answered and false otherwise\n//    */\n//   checkUserAllHaveAnswers(userEmail) {\n//     let array = [];\n//     for (let data of this.state.questionAnswerData) {\n//       if (data.userEmail === userEmail) {\n//         array.push(data);\n//       }\n//     }\n//     return array.every(\n//       data => data.userEmail === userEmail && data.haveAnAnswer\n//     );\n//   }\n//   render() {\n//     const { showData, selectIndex, showQuestionsNames } = this.state;\n\n//     return (\n//       <PageLayout>\n//         <Header h1Heading='Question Answer' />\n//         <section className={style.external}>\n//           <section className={style.model}>\n//             <h2>List Of Questions/Answers</h2>\n//             {this.state.users.map((qA, index) => (\n//               <section key={index}>\n//                 {this.state.questionAnswerData[index].questionAnswerText[0]\n//                   .userType === 'Premium' ? null : (\n//                   <button\n//                     onClick={() => {\n//                       this.handelClickQuestion(qA, index);\n//                     }}\n//                     className={`${style.productButton} ${\n//                       this.checkUserAllHaveAnswers(qA)\n//                         ? style.greenBackground\n//                         : style.redBackground\n//                     }`}\n//                   >\n//                     {qA}\n//                   </button>\n//                 )}\n//               </section>\n//             ))}\n\n//             {showQuestionsNames ? (\n//               <section className={style.questions}>\n//                 <h3>Questions:</h3>\n//                 {this.state.questions.map((qA, index) => {\n//                   const hasAnswer = this.state.questionAnswerData.find(\n//                     data => data._id === qA._id\n//                   ).haveAnAnswer;\n\n//                   return (\n//                     <section key={qA._id}>\n//                       <button\n//                         className={`${style.btn} ${\n//                           hasAnswer\n//                             ? style.greenBackground\n//                             : style.redBackground\n//                         }`}\n//                         onClick={() => {\n//                           this.handelClick(index);\n//                         }}\n//                       >\n//                         {qA.questionName}\n//                       </button>\n//                     </section>\n//                   );\n//                 })}\n//               </section>\n//             ) : (\n//               ''\n//             )}\n//           </section>\n\n//           {showData &&\n//             selectIndex !== null &&\n//             selectIndex < this.state.questions.length && (\n//               <section className={style.showAllData}>\n//                 <h2 className={style.h2}>Question/Answer Data</h2>\n//                 <div>\n//                   <h3 className={style.h3}>\n//                     <span className={style.span}> Question Date:</span>\n//                     {this.state.questions[selectIndex].questionDate}\n//                   </h3>\n//                   <h3 className={style.h3}>\n//                     <span className={style.span}> Question Name:</span>\n\n//                     {this.state.questions[selectIndex].questionName}\n//                   </h3>\n//                   <h3>Conversation:</h3>\n//                   {this.state.messages.map((oneMessage, index) => {\n//                     if (oneMessage.userType !== 'Premium') {\n//                       return (\n//                         <section className={style.user} key={index}>\n//                           <p>User: {oneMessage.questionText}</p>\n//                         </section>\n//                       );\n//                     } else {\n//                       return (\n//                         <section className={style.premium} key={index}>\n//                           <p>Premium: {oneMessage.questionText}</p>\n//                         </section>\n//                       );\n//                     }\n//                   })}\n\n//                   <section>\n//                     <form\n//                       onSubmit={this.handleSubmit.bind(this)}\n//                       className={style.form}\n//                     >\n//                       <textarea\n//                         className={style.textArea}\n//                         value={this.state.answerText}\n//                         name='tarea'\n//                         rows='6'\n//                         cols='40'\n//                         placeholder=' Write text here'\n//                         required\n//                         onChange={e =>\n//                           this.setState({ answerText: e.target.value })\n//                         }\n//                       ></textarea>\n\n//                       <Button type='submit' text='submit' />\n\n//                       <p className={style.showResult}>\n//                         {this.state.showResult}\n//                       </p>\n//                     </form>\n//                   </section>\n//                 </div>\n//               </section>\n//             )}\n//         </section>\n//       </PageLayout>\n//     );\n//   }\n// }\n\nimport React, { Component } from 'react';\nimport PageLayout from '../../../premiumPages/layouts/pageLayout/PageLayout';\nimport Header from '../../../../components/commonComponents/header/Header';\nimport style from './questionAnswerPremium.module.css';\n/**\r\n * Description - This class display the question/answer report\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class QuestionAnswerReportPremium extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      questionAnswerData: [],\n      openQuestions: 0,\n      closedQuestions: 0\n    };\n  }\n  /**\r\n   * Description - This function activate the function getQuestionAnswer when the page is uploaded\r\n   */\n  async componentDidMount() {\n    this.getQuestionAnswer();\n  }\n  /**\r\n   * Description - This function get all the data of the question/answer from the server\r\n   */\n  async getQuestionAnswer() {\n    try {\n      const response = await fetch('http://localhost:5000/adminReports/getQuestionAnswerData', 'http://localhost:5000/reports/getQuestionAnswerData', {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Accept-Control-Allow-Origin': '*'\n        }\n      });\n      const result = await response.json();\n      this.setState({\n        questionAnswerData: result\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"Question Answer Reports\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: style.table,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: style.tr,\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"User Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"User Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Question Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Question Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Answer Text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Have an Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Selected Stars\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Question Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.state.questionAnswerData.map(data => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.userFullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.userEmail\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.questionName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.questionText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.answerText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.haveAnAnswer ? 'Yes' : 'No'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.selectedStars\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: data.questionDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 17\n            }, this)]\n          }, data._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","PageLayout","Header","style","QuestionAnswerReportPremium","state","questionAnswerData","openQuestions","closedQuestions","componentDidMount","getQuestionAnswer","response","fetch","method","crossDomain","headers","Accept","result","json","setState","error","console","render","table","tr","map","data","userFullName","userEmail","questionName","questionText","answerText","haveAnAnswer","selectedStars","questionDate","_id"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/premiumPages/pages/questionAnswerPremium/QuestionAnswerPremium.js"],"sourcesContent":["// import React, { Component } from 'react';\r\n// import PageLayout from '../../layouts/pageLayout/PageLayout';\r\n// import Header from '../../../commonComponents/header/Header';\r\n// import style from './questionAnswerPremium.module.css';\r\n// import Button from '../../../commonComponents/button/Button';\r\n\r\n// /**\r\n//  * Description - This class show all question from the users and this class answering those questions\r\n//  */\r\n// export default class QuestionAnswerPremium extends Component {\r\n//   state = {\r\n//     questionAnswerData: [],\r\n//     questions: [],\r\n//     messages: [],\r\n//     users: [],\r\n//     showData: false,\r\n//     answerText: '',\r\n//     selectIndex: null,\r\n//     showQuestionsNames: false,\r\n//     questionIndex: null,\r\n//   };\r\n\r\n//   /**\r\n//    * Description - This function get all the data from the server\r\n//    */\r\n//   async getQuestionAnswer() {\r\n//     const response = await fetch(\r\n//       'http://localhost:5000/premiumQuestionAnswer/getData',\r\n//       {\r\n//         method: 'POST',\r\n//         crossDomain: true,\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           Accept: 'application/json',\r\n//           'Accept-Control-Allow-Origin': '*',\r\n//         },\r\n//       }\r\n//     );\r\n//     const result = await response.json();\r\n//     console.log(result);\r\n//     this.setState({ questionAnswerData: result });\r\n\r\n//     for (let user of result) {\r\n//       if (!this.state.users.includes(user.userEmail)) {\r\n//         this.state.users.push(user.userEmail);\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function activate the getQuestionAnswer function when the page is uploaded\r\n//    */\r\n//   componentDidMount() {\r\n//     this.getQuestionAnswer();\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function show all the data by click on selected item\r\n//    * @param {*} index  - Selected item\r\n//    */\r\n//   handelClick = index => {\r\n//     if (index >= this.state.questions.length) {\r\n//       this.setState({\r\n//         showData: true,\r\n//         selectIndex: 0,\r\n//         messages: this.state.questions[0].questionAnswerText,\r\n//       });\r\n//     } else {\r\n//       this.setState({\r\n//         showData: true,\r\n//         selectIndex: index,\r\n//         messages: this.state.questions[index].questionAnswerText,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   /**\r\n//    *Description  - This function show all the question of the selected user\r\n//    * @param {*} qA - Selsected user\r\n//    */\r\n//   handelClickQuestion = qA => {\r\n//     this.setState({ questions: [] });\r\n//     if (this.state.selectIndex) {\r\n//       this.setState({ selectIndex: 0 });\r\n//     }\r\n//     let array = [];\r\n//     for (let data of this.state.questionAnswerData) {\r\n//       if (data.userEmail === qA) {\r\n//         array.push(data);\r\n//         this.setState(prevState => ({\r\n//           showQuestionsNames: true,\r\n//         }));\r\n//       }\r\n//     }\r\n//     this.setState({\r\n//       questions: array,\r\n//       messages: [...array[0].questionAnswerText],\r\n//     });\r\n//   };\r\n\r\n//   /**\r\n//    * Description - This function update an answer to the selected question\r\n//    * @param {*} e - Selected question\r\n//    */\r\n//   async handleSubmit(e) {\r\n//     e.preventDefault();\r\n\r\n//     let dataToSend;\r\n//     if (!this.state.questions[this.state.selectIndex].haveAnAnswer) {\r\n//       dataToSend = {\r\n//         userId: this.state.questions[this.state.selectIndex].userId,\r\n//         userEmail: this.state.questions[this.state.selectIndex].userEmail,\r\n//         answerText: this.state.answerText,\r\n//         questionText: this.state.answerText,\r\n//         userType: JSON.parse(localStorage.getItem('user')).userType,\r\n//         questionName: this.state.questions[this.state.selectIndex].questionName,\r\n//       };\r\n//     } else {\r\n//       dataToSend = {\r\n//         userId: this.state.questions[this.state.selectIndex].userId,\r\n//         userType: JSON.parse(localStorage.getItem('user')).userType,\r\n//         answerText: this.state.answerText,\r\n//         questionText: this.state.answerText,\r\n//         userEmail: this.state.questions[this.state.selectIndex].userEmail,\r\n//         questionName: this.state.questions[this.state.selectIndex].questionName,\r\n//       };\r\n//     }\r\n//     const questionInputData = {\r\n//       method: 'POST',\r\n//       crossDomain: true,\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         Accept: 'application/json',\r\n//         'Accept-Control-Allow-Origin': '*',\r\n//       },\r\n//       body: JSON.stringify(dataToSend),\r\n//     };\r\n\r\n//     const response = await fetch(\r\n//       'http://localhost:5000/premiumQuestionAnswer/updateAnswer',\r\n//       questionInputData\r\n//     );\r\n//     const result = await response.json();\r\n\r\n//     this.setState({ messages: [...this.state.messages, dataToSend] });\r\n//     if (result.status === 'Email send') {\r\n//       this.setState({\r\n//         answerText: this.state.answerText,\r\n//         showResult: 'The Answer has been updated',\r\n//       });\r\n//     }\r\n//     let object = this.state.questions[this.state.selectIndex];\r\n//     object.haveAnAnswer = true;\r\n//     console.log(object);\r\n//     let array = [...this.state.questionAnswerData];\r\n//     let newArray = array.filter(\r\n//       qa => qa._id !== this.state.questions[this.state.selectIndex]._id\r\n//     );\r\n//     console.log(newArray);\r\n//     newArray.push(object);\r\n//     this.setState({\r\n//       questionAnswerData: [...newArray],\r\n//     });\r\n//     this.setState({ answerText: '' });\r\n//     setTimeout(() => {\r\n//       this.setState({\r\n//         showResult: '',\r\n//       });\r\n//     }, 2000);\r\n//     this.getQuestionAnswer();\r\n//   }\r\n\r\n//   /**\r\n//    * Description - This function check if the all question of the user get an answer\r\n//    * @param {*} userEmail  - User data\r\n//    * @returns - True if all question are answered and false otherwise\r\n//    */\r\n//   checkUserAllHaveAnswers(userEmail) {\r\n//     let array = [];\r\n//     for (let data of this.state.questionAnswerData) {\r\n//       if (data.userEmail === userEmail) {\r\n//         array.push(data);\r\n//       }\r\n//     }\r\n//     return array.every(\r\n//       data => data.userEmail === userEmail && data.haveAnAnswer\r\n//     );\r\n//   }\r\n//   render() {\r\n//     const { showData, selectIndex, showQuestionsNames } = this.state;\r\n\r\n//     return (\r\n//       <PageLayout>\r\n//         <Header h1Heading='Question Answer' />\r\n//         <section className={style.external}>\r\n//           <section className={style.model}>\r\n//             <h2>List Of Questions/Answers</h2>\r\n//             {this.state.users.map((qA, index) => (\r\n//               <section key={index}>\r\n//                 {this.state.questionAnswerData[index].questionAnswerText[0]\r\n//                   .userType === 'Premium' ? null : (\r\n//                   <button\r\n//                     onClick={() => {\r\n//                       this.handelClickQuestion(qA, index);\r\n//                     }}\r\n//                     className={`${style.productButton} ${\r\n//                       this.checkUserAllHaveAnswers(qA)\r\n//                         ? style.greenBackground\r\n//                         : style.redBackground\r\n//                     }`}\r\n//                   >\r\n//                     {qA}\r\n//                   </button>\r\n//                 )}\r\n//               </section>\r\n//             ))}\r\n\r\n//             {showQuestionsNames ? (\r\n//               <section className={style.questions}>\r\n//                 <h3>Questions:</h3>\r\n//                 {this.state.questions.map((qA, index) => {\r\n//                   const hasAnswer = this.state.questionAnswerData.find(\r\n//                     data => data._id === qA._id\r\n//                   ).haveAnAnswer;\r\n\r\n//                   return (\r\n//                     <section key={qA._id}>\r\n//                       <button\r\n//                         className={`${style.btn} ${\r\n//                           hasAnswer\r\n//                             ? style.greenBackground\r\n//                             : style.redBackground\r\n//                         }`}\r\n//                         onClick={() => {\r\n//                           this.handelClick(index);\r\n//                         }}\r\n//                       >\r\n//                         {qA.questionName}\r\n//                       </button>\r\n//                     </section>\r\n//                   );\r\n//                 })}\r\n//               </section>\r\n//             ) : (\r\n//               ''\r\n//             )}\r\n//           </section>\r\n\r\n//           {showData &&\r\n//             selectIndex !== null &&\r\n//             selectIndex < this.state.questions.length && (\r\n//               <section className={style.showAllData}>\r\n//                 <h2 className={style.h2}>Question/Answer Data</h2>\r\n//                 <div>\r\n//                   <h3 className={style.h3}>\r\n//                     <span className={style.span}> Question Date:</span>\r\n//                     {this.state.questions[selectIndex].questionDate}\r\n//                   </h3>\r\n//                   <h3 className={style.h3}>\r\n//                     <span className={style.span}> Question Name:</span>\r\n\r\n//                     {this.state.questions[selectIndex].questionName}\r\n//                   </h3>\r\n//                   <h3>Conversation:</h3>\r\n//                   {this.state.messages.map((oneMessage, index) => {\r\n//                     if (oneMessage.userType !== 'Premium') {\r\n//                       return (\r\n//                         <section className={style.user} key={index}>\r\n//                           <p>User: {oneMessage.questionText}</p>\r\n//                         </section>\r\n//                       );\r\n//                     } else {\r\n//                       return (\r\n//                         <section className={style.premium} key={index}>\r\n//                           <p>Premium: {oneMessage.questionText}</p>\r\n//                         </section>\r\n//                       );\r\n//                     }\r\n//                   })}\r\n\r\n//                   <section>\r\n//                     <form\r\n//                       onSubmit={this.handleSubmit.bind(this)}\r\n//                       className={style.form}\r\n//                     >\r\n//                       <textarea\r\n//                         className={style.textArea}\r\n//                         value={this.state.answerText}\r\n//                         name='tarea'\r\n//                         rows='6'\r\n//                         cols='40'\r\n//                         placeholder=' Write text here'\r\n//                         required\r\n//                         onChange={e =>\r\n//                           this.setState({ answerText: e.target.value })\r\n//                         }\r\n//                       ></textarea>\r\n\r\n//                       <Button type='submit' text='submit' />\r\n\r\n//                       <p className={style.showResult}>\r\n//                         {this.state.showResult}\r\n//                       </p>\r\n//                     </form>\r\n//                   </section>\r\n//                 </div>\r\n//               </section>\r\n//             )}\r\n//         </section>\r\n//       </PageLayout>\r\n//     );\r\n//   }\r\n// }\r\n\r\nimport React, { Component } from 'react';\r\nimport PageLayout from '../../../premiumPages/layouts/pageLayout/PageLayout';\r\nimport Header from '../../../../components/commonComponents/header/Header';\r\nimport style from './questionAnswerPremium.module.css';\r\n/**\r\n * Description - This class display the question/answer report\r\n */\r\nexport default class QuestionAnswerReportPremium extends Component {\r\n  state = {\r\n    questionAnswerData: [],\r\n    openQuestions: 0,\r\n    closedQuestions: 0,\r\n  };\r\n  /**\r\n   * Description - This function activate the function getQuestionAnswer when the page is uploaded\r\n   */\r\n  async componentDidMount() {\r\n    this.getQuestionAnswer();\r\n  }\r\n  /**\r\n   * Description - This function get all the data of the question/answer from the server\r\n   */\r\n  async getQuestionAnswer() {\r\n    try {\r\n      const response = await fetch(\r\n        'http://localhost:5000/adminReports/getQuestionAnswerData',\r\n        'http://localhost:5000/reports/getQuestionAnswerData',\r\n        {\r\n          method: 'POST',\r\n          crossDomain: true,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            Accept: 'application/json',\r\n            'Accept-Control-Allow-Origin': '*',\r\n          },\r\n        }\r\n      );\r\n      const result = await response.json();\r\n      this.setState({\r\n        questionAnswerData: result,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='Question Answer Reports' />\r\n        <table className={style.table}>\r\n          <thead>\r\n            <tr className={style.tr}>\r\n              <th>User Name</th>\r\n              <th>User Email</th>\r\n              <th>Question Name</th>\r\n              <th>Question Text</th>\r\n              <th>Answer Text</th>\r\n              <th>Have an Answer</th>\r\n              <th>Selected Stars</th>\r\n              <th>Question Date</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.questionAnswerData.map(data => (\r\n              <tr key={data._id}>\r\n                <td>{data.userFullName}</td>\r\n                <td>{data.userEmail}</td>\r\n                <td>{data.questionName}</td>\r\n                <td>{data.questionText}</td>\r\n                <td>{data.answerText}</td>\r\n                <td>{data.haveAnAnswer ? 'Yes' : 'No'}</td>\r\n                <td>{data.selectedStars}</td>\r\n                <td>{data.questionDate}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}