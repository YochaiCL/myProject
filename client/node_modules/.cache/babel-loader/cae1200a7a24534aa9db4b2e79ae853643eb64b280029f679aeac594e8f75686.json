{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\adminPages\\\\pages\\\\update\\\\updateComponents\\\\updateGpu\\\\UpdateGpu.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../../../pageSettings/button/Button';\nimport PageLayout from '../../../../layouts/pageLayout/PageLayout';\nimport Header from '../../../../../pageSettings/header/Header';\nimport style from '../updateMotherboard/updateMotherboard.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UpdateGpu extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      products: [{\n        model: 'Loading data...'\n      }],\n      showData: false,\n      selectIndex: null,\n      model: '',\n      bus: '',\n      memory: '',\n      engine_clock: '',\n      cuda_core: '',\n      maximum_display: '',\n      psu: '',\n      showResult: ''\n    };\n    this.handelClick = index => {\n      this.setState({\n        showData: true,\n        selectIndex: index\n      });\n    };\n  }\n  componentDidMount() {\n    this.getProducts();\n  }\n  async getProducts() {\n    const response = await fetch('http://localhost:5000/getData/cpuCoolerLiquid');\n    const result = await response.json();\n    console.log(result);\n    this.setState({\n      products: result\n    });\n  }\n\n  // Asynchronous function to handle form submission\n  async handleSubmit(e) {\n    // Preventing the default form submission behavior\n    e.preventDefault();\n    const options = {\n      // Setting headers for the HTTP request\n      method: 'POST',\n      crossDomain: true,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      // Converting the state object to JSON and setting it as the request body\n      body: JSON.stringify(this.state)\n    };\n    // Sending the POST request with options\n    const response = await fetch('http://localhost:5000/insert/gpu', options);\n    // Parsing the response as JSON\n    const result = await response.json();\n\n    // Checking the status of the response\n\n    // Updating the state to display a success message\n    if (result.status === 'ok') {\n      this.setState({\n        showResult: 'Component have added'\n      });\n    } // Handling different response statuses\n    else if (result.status === 'Model already exist') {\n      this.setState({\n        showResult: 'Component already exist'\n      });\n    } else if (result.status === 'Error !! check your details') {}\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: /*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"Update GPU\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Button","PageLayout","Header","style","UpdateGpu","state","products","model","showData","selectIndex","bus","memory","engine_clock","cuda_core","maximum_display","psu","showResult","handelClick","index","setState","componentDidMount","getProducts","response","fetch","result","json","console","log","handleSubmit","e","preventDefault","options","method","crossDomain","headers","Accept","body","JSON","stringify","status","render"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/adminPages/pages/update/updateComponents/updateGpu/UpdateGpu.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '../../../../../pageSettings/button/Button';\r\nimport PageLayout from '../../../../layouts/pageLayout/PageLayout';\r\nimport Header from '../../../../../pageSettings/header/Header';\r\nimport style from '../updateMotherboard/updateMotherboard.module.css';\r\n\r\nexport default class UpdateGpu extends Component {\r\n  // Initializing state variables for component properties\r\n  state = {\r\n    products: [{ model: 'Loading data...' }],\r\n    showData: false,\r\n    selectIndex: null,\r\n    model: '',\r\n    bus: '',\r\n    memory: '',\r\n    engine_clock: '',\r\n    cuda_core: '',\r\n    maximum_display: '',\r\n    psu: '',\r\n    showResult: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getProducts();\r\n  }\r\n\r\n  handelClick = index => {\r\n    this.setState({\r\n      showData: true,\r\n      selectIndex: index,\r\n    });\r\n  };\r\n  async getProducts() {\r\n    const response = await fetch(\r\n      'http://localhost:5000/getData/cpuCoolerLiquid'\r\n    );\r\n    const result = await response.json();\r\n    console.log(result);\r\n    this.setState({ products: result });\r\n  }\r\n\r\n  // Asynchronous function to handle form submission\r\n  async handleSubmit(e) {\r\n    // Preventing the default form submission behavior\r\n    e.preventDefault();\r\n    const options = {\r\n      // Setting headers for the HTTP request\r\n      method: 'POST',\r\n      crossDomain: true,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'Accept-Control-Allow-Origin': '*',\r\n      },\r\n      // Converting the state object to JSON and setting it as the request body\r\n      body: JSON.stringify(this.state),\r\n    };\r\n    // Sending the POST request with options\r\n    const response = await fetch('http://localhost:5000/insert/gpu', options);\r\n    // Parsing the response as JSON\r\n    const result = await response.json();\r\n\r\n    // Checking the status of the response\r\n\r\n    // Updating the state to display a success message\r\n    if (result.status === 'ok') {\r\n      this.setState({ showResult: 'Component have added' });\r\n    } // Handling different response statuses\r\n    else if (result.status === 'Model already exist') {\r\n      this.setState({ showResult: 'Component already exist' });\r\n    } else if (result.status === 'Error !! check your details') {\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='Update GPU' />\r\n        \r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,2CAA2C;AAC9D,OAAOC,UAAU,MAAM,2CAA2C;AAClE,OAAOC,MAAM,MAAM,2CAA2C;AAC9D,OAAOC,KAAK,MAAM,mDAAmD;AAAC;AAEtE,eAAe,MAAMC,SAAS,SAASL,SAAS,CAAC;EAAA;IAAA;IAAA,KAE/CM,KAAK,GAAG;MACNC,QAAQ,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAkB,CAAC,CAAC;MACxCC,QAAQ,EAAE,KAAK;MACfC,WAAW,EAAE,IAAI;MACjBF,KAAK,EAAE,EAAE;MACTG,GAAG,EAAE,EAAE;MACPC,MAAM,EAAE,EAAE;MACVC,YAAY,EAAE,EAAE;MAChBC,SAAS,EAAE,EAAE;MACbC,eAAe,EAAE,EAAE;MACnBC,GAAG,EAAE,EAAE;MACPC,UAAU,EAAE;IACd,CAAC;IAAA,KAMDC,WAAW,GAAGC,KAAK,IAAI;MACrB,IAAI,CAACC,QAAQ,CAAC;QACZX,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAES;MACf,CAAC,CAAC;IACJ,CAAC;EAAA;EATDE,iBAAiB,GAAG;IAClB,IAAI,CAACC,WAAW,EAAE;EACpB;EAQA,MAAMA,WAAW,GAAG;IAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,+CAA+C,CAChD;IACD,MAAMC,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IACpCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;IACnB,IAAI,CAACL,QAAQ,CAAC;MAAEb,QAAQ,EAAEkB;IAAO,CAAC,CAAC;EACrC;;EAEA;EACA,MAAMI,YAAY,CAACC,CAAC,EAAE;IACpB;IACAA,CAAC,CAACC,cAAc,EAAE;IAClB,MAAMC,OAAO,GAAG;MACd;MACAC,MAAM,EAAE,MAAM;MACdC,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClCC,MAAM,EAAE,kBAAkB;QAC1B,6BAA6B,EAAE;MACjC,CAAC;MACD;MACAC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACjC,KAAK;IACjC,CAAC;IACD;IACA,MAAMiB,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAEQ,OAAO,CAAC;IACzE;IACA,MAAMP,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;;IAEpC;;IAEA;IACA,IAAID,MAAM,CAACe,MAAM,KAAK,IAAI,EAAE;MAC1B,IAAI,CAACpB,QAAQ,CAAC;QAAEH,UAAU,EAAE;MAAuB,CAAC,CAAC;IACvD,CAAC,CAAC;IAAA,KACG,IAAIQ,MAAM,CAACe,MAAM,KAAK,qBAAqB,EAAE;MAChD,IAAI,CAACpB,QAAQ,CAAC;QAAEH,UAAU,EAAE;MAA0B,CAAC,CAAC;IAC1D,CAAC,MAAM,IAAIQ,MAAM,CAACe,MAAM,KAAK,6BAA6B,EAAE,CAC5D;EACF;EACAC,MAAM,GAAG;IACP,oBACE,QAAC,UAAU;MAAA,uBACT,QAAC,MAAM;QAAC,SAAS,EAAC;MAAY;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QAEtB;EAEjB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}