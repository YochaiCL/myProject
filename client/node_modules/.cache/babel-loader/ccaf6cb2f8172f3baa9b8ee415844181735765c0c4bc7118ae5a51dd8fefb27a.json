{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\userPages\\\\pages\\\\testYourSelf\\\\testWithHelp\\\\TestWithHelp.js\";\nimport React, { Component } from 'react';\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\nimport style from './testWithHelp.module.css';\nimport Button from '../../../../commonComponents/button/Button';\nimport Header from '../../../../commonComponents/header/Header';\n\n/**\r\n * Description - This class activate assembly test to the user with help\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class TestWithHelp extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      testName: '',\n      modelCase: '',\n      modelMotherboard: '',\n      modelCPU: '',\n      modelCPUCooler: '',\n      modelGPU: '',\n      modelPSU: '',\n      modelRAM: '',\n      modelSSD: '',\n      cpuArray: [],\n      gpuArray: [],\n      caseArray: [],\n      cpuCoolerFanArray: [],\n      cpuCoolerLiquidArray: [],\n      fanArray: [],\n      motherboardArray: [],\n      psuArray: [],\n      ramArray: [],\n      ssdM2Array: [],\n      ssdSataArray: [],\n      assembly: [],\n      showResult: '',\n      chosenOption: null,\n      selectedTest: [],\n      userId: JSON.parse(localStorage.getItem('user'))\n    };\n  }\n  /**\r\n   * Description - This function get all models of all components from database\r\n   */\n  async getModels() {\n    const response = await fetch('http://localhost:5000/getComponentsModels');\n    const result = await response.json();\n    // console.log(result);\n    this.setState({\n      cpuArray: result.Cpu\n    });\n    this.setState({\n      gpuArray: result.Gpu\n    });\n    this.setState({\n      caseArray: result.Case\n    });\n    this.setState({\n      cpuCoolerFanArray: result.CpuCoolerFan\n    });\n    this.setState({\n      cpuCoolerLiquidArray: result.CpuCoolerLiquid\n    });\n    this.setState({\n      motherboardArray: result.Motherboard\n    });\n    this.setState({\n      psuArray: result.Psu\n    });\n    this.setState({\n      ramArray: result.Ram\n    });\n    this.setState({\n      ssdM2Array: result.SsdM2\n    });\n    this.setState({\n      ssdSataArray: result.SsdSata\n    });\n  }\n\n  /**\r\n   *Description - This Function save the choose assembly in the database\r\n   * @param {*} e - Components selected by the admin\r\n   */\n  async handleSubmit(e) {\n    e.preventDefault();\n    const propertiesToCheck = ['modelCPU', 'modelGPU', 'modelMotherboard', 'modelCPUCooler', 'modelSSD', 'modelRAM', 'modelCase', 'modelPSU'];\n    let allConditionsMet = true;\n    for (const property of propertiesToCheck) {\n      if (this.state[property] !== this.state.chosenOption[property]) {\n        allConditionsMet = false;\n        setTimeout(() => {\n          this.setState({\n            showResult: 'Please choose only the Green Rows'\n          });\n        }, 1000);\n        break;\n      }\n    }\n    if (allConditionsMet) {\n      const options = {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Accept-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify(this.state)\n      };\n      const response = await fetch('http://localhost:5000/testWithHelp', options);\n      const result = await response.json();\n      // console.log(result);\n      if (result.status === 'ok') {\n        this.setState({\n          showResult: 'The Test has been added'\n        });\n        setTimeout(() => {\n          window.location.href = '/testWithHelp';\n        }, 2000);\n      } else if (result.status === 'Test already exist') {\n        this.setState({\n          showResult: 'This test already  exist'\n        });\n      }\n    }\n  }\n\n  /**\r\n   * Description - This function display the assembly products\r\n   */\n  async getAssembly() {\n    const response = await fetch('http://localhost:5000/getAssembly');\n    const result = await response.json();\n    result.sort((a, b) => a.assemblyName.localeCompare(b.assemblyName));\n    // console.log(result);\n    this.setState({\n      assembly: result\n    });\n    this.getAssembly();\n  }\n\n  /**\r\n   *Description - This function start when the page is upload and activate the function getModels\r\n   */\n  componentDidMount() {\n    this.getModels();\n    this.getAssembly();\n  }\n  isComponentMatch(selectedComponent, assemblyComponent) {\n    // Add your comparison logic here, for example, if the names are the same:\n    return selectedComponent === assemblyComponent;\n  }\n  render() {\n    const motherboardMatch = this.isComponentMatch(this.state.modelMotherboard, this.state.currentMotherboard);\n    const cpuMatch = this.isComponentMatch(this.state.modelCPU, this.state.currentCpu);\n    const cpuCoolerMatch = this.isComponentMatch(this.state.modelCPUCooler, this.state.currentCPUCooler);\n    const gpuMatch = this.isComponentMatch(this.state.modelGPU, this.state.currentGPU);\n    const psuMatch = this.isComponentMatch(this.state.modelPSU, this.state.currentPSU);\n    const ssdMatch = this.isComponentMatch(this.state.modelSSD, this.state.currentSSD);\n    const ramMatch = this.isComponentMatch(this.state.modelRAM, this.state.currentRAM);\n    const caseMatch = this.isComponentMatch(this.state.modelCase, this.state.currentCase);\n    const isMotherboardSelected = motherboardMatch && cpuMatch && gpuMatch && ramMatch && caseMatch;\n    const isCpuSelected = cpuMatch && motherboardMatch && gpuMatch && ramMatch && caseMatch;\n    const isCpuCoolerSelected = cpuCoolerMatch && cpuMatch;\n    const isGpuSelected = gpuMatch && motherboardMatch && cpuMatch && ramMatch && caseMatch;\n    const isPsuSelected = psuMatch && gpuMatch && motherboardMatch && cpuMatch && ramMatch && caseMatch;\n    const isSsdSelected = ssdMatch && motherboardMatch && cpuMatch && gpuMatch && ramMatch && caseMatch;\n    const isRamSelected = ramMatch && motherboardMatch && cpuMatch && gpuMatch && caseMatch;\n    const isCaseSelected = caseMatch && motherboardMatch && cpuMatch && gpuMatch && ramMatch;\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"Test With Help\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit.bind(this),\n          className: style.form,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter Test Name:\",\n            value: this.state.testName,\n            required: true,\n            onChange: e => this.setState({\n              testName: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isMotherboardSelected ? style.backgroundGreen : ''}`,\n            value: this.state.modelMotherboard,\n            label: \"MOTHERBOARD\",\n            onChange: e => {\n              this.setState({\n                modelMotherboard: e.target.value\n              }, () => {\n                for (let option of this.state.assembly) {\n                  if (this.state.modelMotherboard === option.modelMotherboard) {\n                    this.setState({\n                      chosenOption: option,\n                      currentMotherboard: this.state.modelMotherboard,\n                      currentCpu: option.modelCPU,\n                      currentGPU: option.modelGPU,\n                      currentRAM: option.modelRAM,\n                      currentCase: option.modelCase,\n                      currentSSD: option.modelSSD\n                    });\n                    this.state.selectedTest.push(this.state.modelMotherboard);\n                  }\n                }\n              });\n            },\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a Motherboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this), this.state.motherboardArray.map(itemMotherboard => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: itemMotherboard,\n                children: itemMotherboard\n              }, itemMotherboard, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isCpuSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelCPU,\n            label: \"CPU\",\n            onChange: e => {\n              this.setState({\n                modelCPU: e.target.value\n              }, () => {\n                this.setState({\n                  currentCPUCooler: this.state.chosenOption.modelCPUCooler\n                });\n                this.state.selectedTest.push(this.state.modelCPU);\n              });\n            },\n            required: true,\n            disabled: !isMotherboardSelected,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a CPU\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this), this.state.cpuArray.map(itemCpu => {\n              if (this.state.currentCpu === itemCpu) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCpu,\n                  className: style.nextComp,\n                  children: itemCpu\n                }, itemCpu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 284,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCpu,\n                  children: itemCpu\n                }, itemCpu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isCpuCoolerSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelCPUCooler,\n            label: \"CPU Cooler\",\n            onChange: e => {\n              this.setState({\n                modelCPUCooler: e.target.value\n              });\n              this.state.selectedTest.push(this.state.modelCPUCooler);\n            },\n            required: true,\n            disabled: !isCpuSelected,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a CPU Cooler\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 15\n            }, this), [...this.state.cpuCoolerFanArray, ...this.state.cpuCoolerLiquidArray].map(itemCpuCooler => {\n              if (this.state.currentCPUCooler === itemCpuCooler) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCpuCooler,\n                  className: style.nextComp,\n                  children: itemCpuCooler\n                }, itemCpuCooler, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCpuCooler,\n                  children: itemCpuCooler\n                }, itemCpuCooler, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isGpuSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelGPU,\n            label: \"GPU\",\n            onChange: e => {\n              this.setState({\n                modelGPU: e.target.value\n              }, () => {\n                this.setState({\n                  currentPSU: this.state.chosenOption.modelPSU\n                });\n                this.state.selectedTest.push(this.state.modelGPU);\n              });\n            },\n            required: true,\n            disabled: !isMotherboardSelected,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a GPU\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 15\n            }, this), this.state.gpuArray.map(itemGpu => {\n              if (this.state.currentGPU === itemGpu) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemGpu,\n                  className: style.nextComp,\n                  children: itemGpu\n                }, itemGpu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemGpu,\n                  children: itemGpu\n                }, itemGpu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 379,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isPsuSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelPSU,\n            label: \"PSU\",\n            onChange: e => {\n              this.setState({\n                modelPSU: e.target.value\n              }, () => {\n                this.state.selectedTest.push(this.state.modelPSU);\n              });\n            },\n            required: true,\n            disabled: !isGpuSelected,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a PSU\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 15\n            }, this), this.state.psuArray.map(itemPsu => {\n              if (this.state.currentPSU === itemPsu) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemPsu,\n                  className: style.nextComp,\n                  children: itemPsu\n                }, itemPsu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 408,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemPsu,\n                  children: itemPsu\n                }, itemPsu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 418,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isRamSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelRAM,\n            label: \"RAM\",\n            onChange: e => {\n              this.setState({\n                modelRAM: e.target.value\n              }, () => {\n                this.state.selectedTest.push(this.state.modelRAM);\n              });\n            },\n            required: true,\n            disabled: !isMotherboardSelected,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a RAM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 15\n            }, this), this.state.ramArray.map(itemRam => {\n              if (this.state.currentRAM === itemRam) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemRam,\n                  className: style.nextComp,\n                  children: itemRam\n                }, itemRam, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 447,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemRam,\n                  children: itemRam\n                }, itemRam, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 457,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isSsdSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelSSD,\n            label: \"SSD\",\n            onChange: e => {\n              this.setState({\n                modelSSD: e.target.value\n              }, () => {\n                this.state.selectedTest.push(this.state.modelSSD);\n              });\n            },\n            required: true,\n            disabled: !isMotherboardSelected,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a SSD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 15\n            }, this), [...this.state.ssdM2Array, ...this.state.ssdSataArray].map(itemSSD => {\n              if (this.state.currentSSD === itemSSD) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemSSD,\n                  className: style.nextComp,\n                  children: itemSSD\n                }, itemSSD, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 487,\n                  columnNumber: 23\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemSSD,\n                  children: itemSSD\n                }, itemSSD, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 497,\n                  columnNumber: 23\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isCaseSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelCase,\n            label: \"CASE\",\n            onChange: e => {\n              this.setState({\n                modelCase: e.target.value\n              }, () => {\n                this.state.selectedTest.push(this.state.modelCase);\n              });\n            },\n            required: true,\n            disabled: !isMotherboardSelected,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a Case\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 521,\n              columnNumber: 15\n            }, this), this.state.caseArray.map(itemCase => {\n              if (this.state.currentCase === itemCase) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCase,\n                  className: style.nextComp,\n                  children: itemCase\n                }, itemCase, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCase,\n                  children: itemCase\n                }, itemCase, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 537,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            text: \"save test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.showResult,\n            children: this.state.showResult\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","PageLayout","style","Button","Header","TestWithHelp","state","testName","modelCase","modelMotherboard","modelCPU","modelCPUCooler","modelGPU","modelPSU","modelRAM","modelSSD","cpuArray","gpuArray","caseArray","cpuCoolerFanArray","cpuCoolerLiquidArray","fanArray","motherboardArray","psuArray","ramArray","ssdM2Array","ssdSataArray","assembly","showResult","chosenOption","selectedTest","userId","JSON","parse","localStorage","getItem","getModels","response","fetch","result","json","setState","Cpu","Gpu","Case","CpuCoolerFan","CpuCoolerLiquid","Motherboard","Psu","Ram","SsdM2","SsdSata","handleSubmit","e","preventDefault","propertiesToCheck","allConditionsMet","property","setTimeout","options","method","crossDomain","headers","Accept","body","stringify","status","window","location","href","getAssembly","sort","a","b","assemblyName","localeCompare","componentDidMount","isComponentMatch","selectedComponent","assemblyComponent","render","motherboardMatch","currentMotherboard","cpuMatch","currentCpu","cpuCoolerMatch","currentCPUCooler","gpuMatch","currentGPU","psuMatch","currentPSU","ssdMatch","currentSSD","ramMatch","currentRAM","caseMatch","currentCase","isMotherboardSelected","isCpuSelected","isCpuCoolerSelected","isGpuSelected","isPsuSelected","isSsdSelected","isRamSelected","isCaseSelected","bind","form","input","target","value","select","backgroundGreen","option","push","map","itemMotherboard","backgroundRed","itemCpu","nextComp","itemCpuCooler","itemGpu","itemPsu","itemRam","itemSSD","itemCase"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/userPages/pages/testYourSelf/testWithHelp/TestWithHelp.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\r\nimport style from './testWithHelp.module.css';\r\nimport Button from '../../../../commonComponents/button/Button';\r\nimport Header from '../../../../commonComponents/header/Header';\r\n\r\n/**\r\n * Description - This class activate assembly test to the user with help\r\n */\r\nexport default class TestWithHelp extends Component {\r\n  state = {\r\n    testName: '',\r\n    modelCase: '',\r\n    modelMotherboard: '',\r\n    modelCPU: '',\r\n    modelCPUCooler: '',\r\n    modelGPU: '',\r\n    modelPSU: '',\r\n    modelRAM: '',\r\n    modelSSD: '',\r\n    cpuArray: [],\r\n    gpuArray: [],\r\n    caseArray: [],\r\n    cpuCoolerFanArray: [],\r\n    cpuCoolerLiquidArray: [],\r\n    fanArray: [],\r\n    motherboardArray: [],\r\n    psuArray: [],\r\n    ramArray: [],\r\n    ssdM2Array: [],\r\n    ssdSataArray: [],\r\n    assembly: [],\r\n    showResult: '',\r\n    chosenOption: null,\r\n    selectedTest: [],\r\n    userId: JSON.parse(localStorage.getItem('user')),\r\n  };\r\n\r\n  /**\r\n   * Description - This function get all models of all components from database\r\n   */\r\n  async getModels() {\r\n    const response = await fetch('http://localhost:5000/getComponentsModels');\r\n    const result = await response.json();\r\n    // console.log(result);\r\n    this.setState({ cpuArray: result.Cpu });\r\n    this.setState({ gpuArray: result.Gpu });\r\n    this.setState({ caseArray: result.Case });\r\n    this.setState({ cpuCoolerFanArray: result.CpuCoolerFan });\r\n    this.setState({ cpuCoolerLiquidArray: result.CpuCoolerLiquid });\r\n    this.setState({ motherboardArray: result.Motherboard });\r\n    this.setState({ psuArray: result.Psu });\r\n    this.setState({ ramArray: result.Ram });\r\n    this.setState({ ssdM2Array: result.SsdM2 });\r\n    this.setState({ ssdSataArray: result.SsdSata });\r\n  }\r\n\r\n  /**\r\n   *Description - This Function save the choose assembly in the database\r\n   * @param {*} e - Components selected by the admin\r\n   */\r\n  async handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const propertiesToCheck = [\r\n      'modelCPU',\r\n      'modelGPU',\r\n      'modelMotherboard',\r\n      'modelCPUCooler',\r\n      'modelSSD',\r\n      'modelRAM',\r\n      'modelCase',\r\n      'modelPSU',\r\n    ];\r\n\r\n    let allConditionsMet = true;\r\n    for (const property of propertiesToCheck) {\r\n      if (this.state[property] !== this.state.chosenOption[property]) {\r\n        allConditionsMet = false;\r\n        setTimeout(() => {\r\n          this.setState({\r\n            showResult: 'Please choose only the Green Rows',\r\n          });\r\n        }, 1000);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (allConditionsMet) {\r\n      const options = {\r\n        method: 'POST',\r\n        crossDomain: true,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          'Accept-Control-Allow-Origin': '*',\r\n        },\r\n        body: JSON.stringify(this.state),\r\n      };\r\n      const response = await fetch(\r\n        'http://localhost:5000/testWithHelp',\r\n        options\r\n      );\r\n      const result = await response.json();\r\n      // console.log(result);\r\n      if (result.status === 'ok') {\r\n        this.setState({\r\n          showResult: 'The Test has been added',\r\n        });\r\n        setTimeout(() => {\r\n          window.location.href = '/testWithHelp';\r\n        }, 2000);\r\n      } else if (result.status === 'Test already exist') {\r\n        this.setState({\r\n          showResult: 'This test already  exist',\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function display the assembly products\r\n   */\r\n  async getAssembly() {\r\n    const response = await fetch('http://localhost:5000/getAssembly');\r\n    const result = await response.json();\r\n    result.sort((a, b) => a.assemblyName.localeCompare(b.assemblyName));\r\n    // console.log(result);\r\n    this.setState({ assembly: result });\r\n    this.getAssembly();\r\n  }\r\n\r\n  /**\r\n   *Description - This function start when the page is upload and activate the function getModels\r\n   */\r\n  componentDidMount() {\r\n    this.getModels();\r\n    this.getAssembly();\r\n  }\r\n\r\n  isComponentMatch(selectedComponent, assemblyComponent) {\r\n    // Add your comparison logic here, for example, if the names are the same:\r\n    return selectedComponent === assemblyComponent;\r\n  }\r\n\r\n  render() {\r\n    const motherboardMatch = this.isComponentMatch(\r\n      this.state.modelMotherboard,\r\n      this.state.currentMotherboard\r\n    );\r\n    const cpuMatch = this.isComponentMatch(\r\n      this.state.modelCPU,\r\n      this.state.currentCpu\r\n    );\r\n    const cpuCoolerMatch = this.isComponentMatch(\r\n      this.state.modelCPUCooler,\r\n      this.state.currentCPUCooler\r\n    );\r\n    const gpuMatch = this.isComponentMatch(\r\n      this.state.modelGPU,\r\n      this.state.currentGPU\r\n    );\r\n    const psuMatch = this.isComponentMatch(\r\n      this.state.modelPSU,\r\n      this.state.currentPSU\r\n    );\r\n    const ssdMatch = this.isComponentMatch(\r\n      this.state.modelSSD,\r\n      this.state.currentSSD\r\n    );\r\n    const ramMatch = this.isComponentMatch(\r\n      this.state.modelRAM,\r\n      this.state.currentRAM\r\n    );\r\n    const caseMatch = this.isComponentMatch(\r\n      this.state.modelCase,\r\n      this.state.currentCase\r\n    );\r\n    const isMotherboardSelected =\r\n      motherboardMatch && cpuMatch && gpuMatch && ramMatch && caseMatch;\r\n    const isCpuSelected =\r\n      cpuMatch && motherboardMatch && gpuMatch && ramMatch && caseMatch;\r\n    const isCpuCoolerSelected = cpuCoolerMatch && cpuMatch;\r\n    const isGpuSelected =\r\n      gpuMatch && motherboardMatch && cpuMatch && ramMatch && caseMatch;\r\n    const isPsuSelected =\r\n      psuMatch &&\r\n      gpuMatch &&\r\n      motherboardMatch &&\r\n      cpuMatch &&\r\n      ramMatch &&\r\n      caseMatch;\r\n    const isSsdSelected =\r\n      ssdMatch &&\r\n      motherboardMatch &&\r\n      cpuMatch &&\r\n      gpuMatch &&\r\n      ramMatch &&\r\n      caseMatch;\r\n    const isRamSelected =\r\n      ramMatch && motherboardMatch && cpuMatch && gpuMatch && caseMatch;\r\n    const isCaseSelected =\r\n      caseMatch && motherboardMatch && cpuMatch && gpuMatch && ramMatch;\r\n\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='Test With Help' />\r\n        <section>\r\n          <form onSubmit={this.handleSubmit.bind(this)} className={style.form}>\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter Test Name:'\r\n              value={this.state.testName}\r\n              required\r\n              onChange={e => this.setState({ testName: e.target.value })}\r\n            />\r\n\r\n            {/* motherboard */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isMotherboardSelected ? style.backgroundGreen : ''\r\n              }`}\r\n              value={this.state.modelMotherboard}\r\n              label='MOTHERBOARD'\r\n              onChange={e => {\r\n                this.setState({ modelMotherboard: e.target.value }, () => {\r\n                  for (let option of this.state.assembly) {\r\n                    if (\r\n                      this.state.modelMotherboard === option.modelMotherboard\r\n                    ) {\r\n                      this.setState({\r\n                        chosenOption: option,\r\n                        currentMotherboard: this.state.modelMotherboard,\r\n                        currentCpu: option.modelCPU,\r\n                        currentGPU: option.modelGPU,\r\n                        currentRAM: option.modelRAM,\r\n                        currentCase: option.modelCase,\r\n                        currentSSD: option.modelSSD,\r\n                      });\r\n                      this.state.selectedTest.push(this.state.modelMotherboard);\r\n                    }\r\n                  }\r\n                });\r\n              }}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a Motherboard\r\n              </option>\r\n              {this.state.motherboardArray.map(itemMotherboard => {\r\n                return (\r\n                  <option key={itemMotherboard} value={itemMotherboard}>\r\n                    {itemMotherboard}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n\r\n            {/* cpu */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isCpuSelected ? style.backgroundGreen : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelCPU}\r\n              label='CPU'\r\n              onChange={e => {\r\n                this.setState({ modelCPU: e.target.value }, () => {\r\n                  this.setState({\r\n                    currentCPUCooler: this.state.chosenOption.modelCPUCooler,\r\n                  });\r\n                  this.state.selectedTest.push(this.state.modelCPU);\r\n                });\r\n              }}\r\n              required\r\n              disabled={!isMotherboardSelected}\r\n            >\r\n              <option value='' disabled>\r\n                Select a CPU\r\n              </option>\r\n              {this.state.cpuArray.map(itemCpu => {\r\n                if (this.state.currentCpu === itemCpu) {\r\n                  return (\r\n                    <option\r\n                      key={itemCpu}\r\n                      value={itemCpu}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemCpu}\r\n                    </option>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <option key={itemCpu} value={itemCpu}>\r\n                      {itemCpu}\r\n                    </option>\r\n                  );\r\n                }\r\n              })}\r\n            </select>\r\n\r\n            {/* cpu cooler */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isCpuCoolerSelected\r\n                  ? style.backgroundGreen\r\n                  : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelCPUCooler}\r\n              label='CPU Cooler'\r\n              onChange={e => {\r\n                this.setState({ modelCPUCooler: e.target.value });\r\n                this.state.selectedTest.push(this.state.modelCPUCooler);\r\n              }}\r\n              required\r\n              disabled={!isCpuSelected}\r\n            >\r\n              <option value='' disabled>\r\n                Select a CPU Cooler\r\n              </option>\r\n              {[\r\n                ...this.state.cpuCoolerFanArray,\r\n                ...this.state.cpuCoolerLiquidArray,\r\n              ].map(itemCpuCooler => {\r\n                if (this.state.currentCPUCooler === itemCpuCooler) {\r\n                  return (\r\n                    <option\r\n                      key={itemCpuCooler}\r\n                      value={itemCpuCooler}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemCpuCooler}\r\n                    </option>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <option key={itemCpuCooler} value={itemCpuCooler}>\r\n                      {itemCpuCooler}\r\n                    </option>\r\n                  );\r\n                }\r\n              })}\r\n            </select>\r\n\r\n            {/* gpu */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isGpuSelected ? style.backgroundGreen : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelGPU}\r\n              label='GPU'\r\n              onChange={e => {\r\n                this.setState({ modelGPU: e.target.value }, () => {\r\n                  this.setState({\r\n                    currentPSU: this.state.chosenOption.modelPSU,\r\n                  });\r\n                  this.state.selectedTest.push(this.state.modelGPU);\r\n                });\r\n              }}\r\n              required\r\n              disabled={!isMotherboardSelected}\r\n            >\r\n              <option value='' disabled>\r\n                Select a GPU\r\n              </option>\r\n              {this.state.gpuArray.map(itemGpu => {\r\n                if (this.state.currentGPU === itemGpu) {\r\n                  return (\r\n                    <option\r\n                      key={itemGpu}\r\n                      value={itemGpu}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemGpu}\r\n                    </option>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <option key={itemGpu} value={itemGpu}>\r\n                      {itemGpu}\r\n                    </option>\r\n                  );\r\n                }\r\n              })}\r\n            </select>\r\n\r\n            {/* psu */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isPsuSelected ? style.backgroundGreen : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelPSU}\r\n              label='PSU'\r\n              onChange={e => {\r\n                this.setState({ modelPSU: e.target.value }, () => {\r\n                  this.state.selectedTest.push(this.state.modelPSU);\r\n                });\r\n              }}\r\n              required\r\n              disabled={!isGpuSelected}\r\n            >\r\n              <option value='' disabled>\r\n                Select a PSU\r\n              </option>\r\n              {this.state.psuArray.map(itemPsu => {\r\n                if (this.state.currentPSU === itemPsu) {\r\n                  return (\r\n                    <option\r\n                      key={itemPsu}\r\n                      value={itemPsu}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemPsu}\r\n                    </option>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <option key={itemPsu} value={itemPsu}>\r\n                      {itemPsu}\r\n                    </option>\r\n                  );\r\n                }\r\n              })}\r\n            </select>\r\n\r\n            {/* ram */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isRamSelected ? style.backgroundGreen : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelRAM}\r\n              label='RAM'\r\n              onChange={e => {\r\n                this.setState({ modelRAM: e.target.value }, () => {\r\n                  this.state.selectedTest.push(this.state.modelRAM);\r\n                });\r\n              }}\r\n              required\r\n              disabled={!isMotherboardSelected}\r\n            >\r\n              <option value='' disabled>\r\n                Select a RAM\r\n              </option>\r\n              {this.state.ramArray.map(itemRam => {\r\n                if (this.state.currentRAM === itemRam) {\r\n                  return (\r\n                    <option\r\n                      key={itemRam}\r\n                      value={itemRam}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemRam}\r\n                    </option>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <option key={itemRam} value={itemRam}>\r\n                      {itemRam}\r\n                    </option>\r\n                  );\r\n                }\r\n              })}\r\n            </select>\r\n\r\n            {/* ssd */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isSsdSelected ? style.backgroundGreen : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelSSD}\r\n              label='SSD'\r\n              onChange={e => {\r\n                this.setState({ modelSSD: e.target.value }, () => {\r\n                  this.state.selectedTest.push(this.state.modelSSD);\r\n                });\r\n              }}\r\n              required\r\n              disabled={!isMotherboardSelected}\r\n            >\r\n              <option value='' disabled>\r\n                Select a SSD\r\n              </option>\r\n              {[...this.state.ssdM2Array, ...this.state.ssdSataArray].map(\r\n                itemSSD => {\r\n                  if (this.state.currentSSD === itemSSD) {\r\n                    return (\r\n                      <option\r\n                        key={itemSSD}\r\n                        value={itemSSD}\r\n                        className={style.nextComp}\r\n                      >\r\n                        {itemSSD}\r\n                      </option>\r\n                    );\r\n                  } else {\r\n                    return (\r\n                      <option key={itemSSD} value={itemSSD}>\r\n                        {itemSSD}\r\n                      </option>\r\n                    );\r\n                  }\r\n                }\r\n              )}\r\n            </select>\r\n\r\n            {/* case */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isCaseSelected ? style.backgroundGreen : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelCase}\r\n              label='CASE'\r\n              onChange={e => {\r\n                this.setState({ modelCase: e.target.value }, () => {\r\n                  this.state.selectedTest.push(this.state.modelCase);\r\n                });\r\n              }}\r\n              required\r\n              disabled={!isMotherboardSelected}\r\n            >\r\n              <option value='' disabled>\r\n                Select a Case\r\n              </option>\r\n              {this.state.caseArray.map(itemCase => {\r\n                if (this.state.currentCase === itemCase) {\r\n                  return (\r\n                    <option\r\n                      key={itemCase}\r\n                      value={itemCase}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemCase}\r\n                    </option>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <option key={itemCase} value={itemCase}>\r\n                      {itemCase}\r\n                    </option>\r\n                  );\r\n                }\r\n              })}\r\n            </select>\r\n            <Button type='submit' text='save test' />\r\n            <p className={style.showResult}>{this.state.showResult}</p>\r\n          </form>\r\n        </section>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}