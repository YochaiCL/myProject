{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\userPages\\\\pages\\\\testYourSelf\\\\testWithHelp\\\\TestWithHelp.js\";\nimport React, { Component } from 'react';\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\nimport style from './testWithHelp.module.css';\nimport Button from '../../../../commonComponents/button/Button';\nimport Header from '../../../../commonComponents/header/Header';\n\n/**\r\n * Description - This class activate assembly test to the user with help\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class TestWithHelp extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      testName: '',\n      modelCase: '',\n      modelMotherboard: '',\n      modelCPU: '',\n      modelCPUCooler: '',\n      modelGPU: '',\n      modelPSU: '',\n      modelRAM: '',\n      modelSSD: '',\n      cpuArray: [],\n      gpuArray: [],\n      caseArray: [],\n      cpuCoolerFanArray: [],\n      cpuCoolerLiquidArray: [],\n      fanArray: [],\n      motherboardArray: [],\n      psuArray: [],\n      ramArray: [],\n      ssdM2Array: [],\n      ssdSataArray: [],\n      assembly: [],\n      showResult: '',\n      chosenOption: null,\n      selectedTest: []\n    };\n  }\n  /**\r\n   * Description - This function get all models of all components from database\r\n   */\n  async getModels() {\n    const response = await fetch('http://localhost:5000/getComponentsModels');\n    const result = await response.json();\n    // console.log(result);\n    this.setState({\n      cpuArray: result.Cpu\n    });\n    this.setState({\n      gpuArray: result.Gpu\n    });\n    this.setState({\n      caseArray: result.Case\n    });\n    this.setState({\n      cpuCoolerFanArray: result.CpuCoolerFan\n    });\n    this.setState({\n      cpuCoolerLiquidArray: result.CpuCoolerLiquid\n    });\n    this.setState({\n      motherboardArray: result.Motherboard\n    });\n    this.setState({\n      psuArray: result.Psu\n    });\n    this.setState({\n      ramArray: result.Ram\n    });\n    this.setState({\n      ssdM2Array: result.SsdM2\n    });\n    this.setState({\n      ssdSataArray: result.SsdSata\n    });\n  }\n\n  /**\r\n   *Description - This Function save the choose assembly in the database\r\n   * @param {*} e - Components selected by the admin\r\n   */\n  async handleSubmit(e) {\n    e.preventDefault();\n    const propertiesToCheck = ['modelCPU', 'modelGPU', 'modelMotherboard', 'modelCPUCooler', 'modelSSD', 'modelRAM', 'modelCase', 'modelPSU'];\n    let allConditionsMet = true;\n    for (const property of propertiesToCheck) {\n      if (this.state[property] !== this.state.chosenOption[property]) {\n        allConditionsMet = false;\n        setTimeout(() => {\n          this.setState({\n            showResult: 'Please choose only the Green Rows'\n          });\n        }, 1000);\n        break;\n      }\n    }\n    if (allConditionsMet) {\n      const options = {\n        method: 'POST',\n        crossDomain: true,\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n          'Accept-Control-Allow-Origin': '*'\n        },\n        body: JSON.stringify(this.state)\n      };\n      const response = await fetch('http://localhost:5000/testWithHelp', options);\n      const result = await response.json();\n      // console.log(result);\n      if (result.status === 'ok') {\n        this.setState({\n          showResult: 'The Test has been added'\n        });\n        setTimeout(() => {\n          this.setState({\n            showResult: '',\n            modelCase: '',\n            modelMotherboard: '',\n            modelCPU: '',\n            modelCPUCooler: '',\n            modelGPU: '',\n            modelPSU: '',\n            modelRAM: '',\n            modelSSD: '',\n            currentMotherboard: '',\n            currentCpu: '',\n            currentCPUCooler: '',\n            currentGPU: '',\n            currentPSU: '',\n            currentRAM: '',\n            currentSSD: '',\n            currentCase: '',\n            testName: ''\n          });\n        }, 1000);\n      } else if (result.status === 'Test already exist') {\n        this.setState({\n          showResult: 'This test already  exist'\n        });\n      }\n    }\n  }\n\n  /**\r\n   * Description - This function display the assembly products\r\n   */\n  async getAssembly() {\n    const response = await fetch('http://localhost:5000/getAssembly');\n    const result = await response.json();\n    result.sort((a, b) => a.assemblyName.localeCompare(b.assemblyName));\n    // console.log(result);\n    this.setState({\n      assembly: result\n    });\n    this.getAssembly();\n  }\n\n  /**\r\n   *Description - This function start when the page is upload and activate the function getModels\r\n   */\n  componentDidMount() {\n    this.getModels();\n    this.getAssembly();\n  }\n  render() {\n    const isCpuSelected = this.state.modelCPU === this.state.currentCpu;\n    const isCpuCoolerSelected = this.state.modelCPUCooler === this.state.currentCPUCooler;\n    const isGpuSelected = this.state.modelGPU === this.state.currentGPU;\n    const isPsuSelected = this.state.modelPSU === this.state.currentPSU;\n    const isSsdSelected = this.state.modelSSD === this.state.currentSSD;\n    const isRamSelected = this.state.modelRAM === this.state.currentRAM;\n    const isCaseSelected = this.state.modelCase === this.state.currentCase;\n    const isMotherboardSelected = this.state.modelMotherboard === this.state.currentMotherboard;\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"Test With Help\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit.bind(this),\n          className: style.form,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: style.input,\n            type: \"text\",\n            placeholder: \"Enter Test Name:\",\n            value: this.state.testName,\n            required: true,\n            onChange: e => this.setState({\n              testName: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isMotherboardSelected ? style.backgroundGreen : ''}`,\n            value: this.state.modelMotherboard,\n            label: \"MOTHERBOARD\",\n            onChange: e => {\n              this.setState({\n                modelMotherboard: e.target.value\n              }, () => {\n                for (let option of this.state.assembly) {\n                  if (this.state.modelMotherboard === option.modelMotherboard) {\n                    this.setState({\n                      chosenOption: option,\n                      currentMotherboard: this.state.modelMotherboard,\n                      currentCpu: option.modelCPU,\n                      currentGPU: option.modelGPU,\n                      currentRAM: option.modelRAM,\n                      currentCase: option.modelCase\n                    });\n                    this.state.selectedTest.push(this.state.modelMotherboard);\n                  }\n                }\n              });\n            },\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a Motherboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), this.state.motherboardArray.map(itemMotherboard => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: itemMotherboard,\n                children: itemMotherboard\n              }, itemMotherboard, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isCpuSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelCPU,\n            label: \"CPU\",\n            onChange: e => {\n              this.setState({\n                modelCPU: e.target.value\n              }, () => {\n                this.setState({\n                  currentCPUCooler: this.state.chosenOption.modelCPUCooler\n                });\n                this.state.selectedTest.push(this.state.modelCPU);\n              });\n            },\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a CPU\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this), this.state.cpuArray.map(itemCpu => {\n              if (this.state.currentCpu === itemCpu) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCpu,\n                  className: style.nextComp,\n                  children: itemCpu\n                }, itemCpu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCpu,\n                  children: itemCpu\n                }, itemCpu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isCpuCoolerSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelCPUCooler,\n            label: \"CPU Cooler\",\n            onChange: e => {\n              this.setState({\n                modelCPUCooler: e.target.value\n              });\n              this.state.selectedTest.push(this.state.modelCPUCooler);\n            },\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a CPU Cooler\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this), [...this.state.cpuCoolerFanArray, ...this.state.cpuCoolerLiquidArray].map(itemCpuCooler => {\n              if (this.state.currentCPUCooler === itemCpuCooler) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCpuCooler,\n                  className: style.nextComp,\n                  children: itemCpuCooler\n                }, itemCpuCooler, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCpuCooler,\n                  children: itemCpuCooler\n                }, itemCpuCooler, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 300,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isGpuSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelGPU,\n            label: \"GPU\",\n            onChange: e => {\n              this.setState({\n                modelGPU: e.target.value\n              }, () => {\n                this.setState({\n                  currentPSU: this.state.chosenOption.modelPSU\n                });\n                this.state.selectedTest.push(this.state.modelGPU);\n              });\n            },\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a GPU\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this), this.state.gpuArray.map(itemGpu => {\n              if (this.state.currentGPU === itemGpu) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemGpu,\n                  className: style.nextComp,\n                  children: itemGpu\n                }, itemGpu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 331,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemGpu,\n                  children: itemGpu\n                }, itemGpu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 341,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isPsuSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelPSU,\n            label: \"PSU\",\n            onChange: e => {\n              this.setState({\n                modelPSU: e.target.value\n              }, () => {\n                this.state.selectedTest.push(this.state.modelPSU);\n              });\n            },\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a PSU\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 15\n            }, this), this.state.psuArray.map(itemPsu => {\n              if (this.state.currentPSU === itemPsu) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemPsu,\n                  className: style.nextComp,\n                  children: itemPsu\n                }, itemPsu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemPsu,\n                  children: itemPsu\n                }, itemPsu, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 379,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isRamSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelRAM,\n            label: \"RAM\",\n            onChange: e => {\n              this.setState({\n                modelRAM: e.target.value\n              }, () => {\n                this.state.selectedTest.push(this.state.modelRAM);\n              });\n            },\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a RAM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 15\n            }, this), this.state.ramArray.map(itemRam => {\n              if (this.state.currentRAM === itemRam) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemRam,\n                  className: style.nextComp,\n                  children: itemRam\n                }, itemRam, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemRam,\n                  children: itemRam\n                }, itemRam, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 417,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isSsdSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelSSD,\n            label: \"SSD\",\n            onChange: e => {\n              this.setState({\n                modelSSD: e.target.value\n              }, () => {\n                this.state.selectedTest.push(this.state.modelSSD);\n              });\n            },\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a SSD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 15\n            }, this), [...this.state.ssdM2Array, ...this.state.ssdSataArray].map(itemSSD => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: itemSSD,\n                className: style.nextComp,\n                children: itemSSD\n              }, itemSSD, false, {\n                fileName: _jsxFileName,\n                lineNumber: 446,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: `${style.select} ${isCaseSelected ? style.backgroundGreen : style.backgroundRed}`,\n            value: this.state.modelCase,\n            label: \"CASE\",\n            onChange: e => {\n              this.setState({\n                modelCase: e.target.value\n              }, () => {\n                this.state.selectedTest.push(this.state.modelCase);\n                this.setState({\n                  currentCase: this.state.modelCase\n                });\n              });\n            },\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a Case\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 15\n            }, this), this.state.caseArray.map(itemCase => {\n              if (this.state.currentCase === itemCase) {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCase,\n                  className: style.nextComp,\n                  children: itemCase\n                }, itemCase, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 481,\n                  columnNumber: 21\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: itemCase,\n                  children: itemCase\n                }, itemCase, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 491,\n                  columnNumber: 21\n                }, this);\n              }\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            text: \"save test\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: style.showResult,\n            children: this.state.showResult\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","PageLayout","style","Button","Header","TestWithHelp","state","testName","modelCase","modelMotherboard","modelCPU","modelCPUCooler","modelGPU","modelPSU","modelRAM","modelSSD","cpuArray","gpuArray","caseArray","cpuCoolerFanArray","cpuCoolerLiquidArray","fanArray","motherboardArray","psuArray","ramArray","ssdM2Array","ssdSataArray","assembly","showResult","chosenOption","selectedTest","getModels","response","fetch","result","json","setState","Cpu","Gpu","Case","CpuCoolerFan","CpuCoolerLiquid","Motherboard","Psu","Ram","SsdM2","SsdSata","handleSubmit","e","preventDefault","propertiesToCheck","allConditionsMet","property","setTimeout","options","method","crossDomain","headers","Accept","body","JSON","stringify","status","currentMotherboard","currentCpu","currentCPUCooler","currentGPU","currentPSU","currentRAM","currentSSD","currentCase","getAssembly","sort","a","b","assemblyName","localeCompare","componentDidMount","render","isCpuSelected","isCpuCoolerSelected","isGpuSelected","isPsuSelected","isSsdSelected","isRamSelected","isCaseSelected","isMotherboardSelected","bind","form","input","target","value","select","backgroundGreen","option","push","map","itemMotherboard","backgroundRed","itemCpu","nextComp","itemCpuCooler","itemGpu","itemPsu","itemRam","itemSSD","itemCase"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/userPages/pages/testYourSelf/testWithHelp/TestWithHelp.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\r\nimport style from './testWithHelp.module.css';\r\nimport Button from '../../../../commonComponents/button/Button';\r\nimport Header from '../../../../commonComponents/header/Header';\r\n\r\n/**\r\n * Description - This class activate assembly test to the user with help\r\n */\r\nexport default class TestWithHelp extends Component {\r\n  state = {\r\n    testName: '',\r\n    modelCase: '',\r\n    modelMotherboard: '',\r\n    modelCPU: '',\r\n    modelCPUCooler: '',\r\n    modelGPU: '',\r\n    modelPSU: '',\r\n    modelRAM: '',\r\n    modelSSD: '',\r\n    cpuArray: [],\r\n    gpuArray: [],\r\n    caseArray: [],\r\n    cpuCoolerFanArray: [],\r\n    cpuCoolerLiquidArray: [],\r\n    fanArray: [],\r\n    motherboardArray: [],\r\n    psuArray: [],\r\n    ramArray: [],\r\n    ssdM2Array: [],\r\n    ssdSataArray: [],\r\n    assembly: [],\r\n    showResult: '',\r\n    chosenOption: null,\r\n    selectedTest: [],\r\n  };\r\n\r\n  /**\r\n   * Description - This function get all models of all components from database\r\n   */\r\n  async getModels() {\r\n    const response = await fetch('http://localhost:5000/getComponentsModels');\r\n    const result = await response.json();\r\n    // console.log(result);\r\n    this.setState({ cpuArray: result.Cpu });\r\n    this.setState({ gpuArray: result.Gpu });\r\n    this.setState({ caseArray: result.Case });\r\n    this.setState({ cpuCoolerFanArray: result.CpuCoolerFan });\r\n    this.setState({ cpuCoolerLiquidArray: result.CpuCoolerLiquid });\r\n    this.setState({ motherboardArray: result.Motherboard });\r\n    this.setState({ psuArray: result.Psu });\r\n    this.setState({ ramArray: result.Ram });\r\n    this.setState({ ssdM2Array: result.SsdM2 });\r\n    this.setState({ ssdSataArray: result.SsdSata });\r\n  }\r\n\r\n  /**\r\n   *Description - This Function save the choose assembly in the database\r\n   * @param {*} e - Components selected by the admin\r\n   */\r\n  async handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const propertiesToCheck = [\r\n      'modelCPU',\r\n      'modelGPU',\r\n      'modelMotherboard',\r\n      'modelCPUCooler',\r\n      'modelSSD',\r\n      'modelRAM',\r\n      'modelCase',\r\n      'modelPSU',\r\n    ];\r\n\r\n    let allConditionsMet = true;\r\n    for (const property of propertiesToCheck) {\r\n      if (this.state[property] !== this.state.chosenOption[property]) {\r\n        allConditionsMet = false;\r\n        setTimeout(() => {\r\n          this.setState({\r\n            showResult: 'Please choose only the Green Rows',\r\n          });\r\n        }, 1000);\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (allConditionsMet) {\r\n      const options = {\r\n        method: 'POST',\r\n        crossDomain: true,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          'Accept-Control-Allow-Origin': '*',\r\n        },\r\n        body: JSON.stringify(this.state),\r\n      };\r\n      const response = await fetch(\r\n        'http://localhost:5000/testWithHelp',\r\n        options\r\n      );\r\n      const result = await response.json();\r\n      // console.log(result);\r\n      if (result.status === 'ok') {\r\n        this.setState({\r\n          showResult: 'The Test has been added',\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({\r\n            showResult: '',\r\n            modelCase: '',\r\n            modelMotherboard: '',\r\n            modelCPU: '',\r\n            modelCPUCooler: '',\r\n            modelGPU: '',\r\n            modelPSU: '',\r\n            modelRAM: '',\r\n            modelSSD: '',\r\n            currentMotherboard: '',\r\n            currentCpu: '',\r\n            currentCPUCooler: '',\r\n            currentGPU: '',\r\n            currentPSU: '',\r\n            currentRAM: '',\r\n            currentSSD: '',\r\n            currentCase: '',\r\n            testName: '',\r\n          });\r\n        }, 1000);\r\n      } else if (result.status === 'Test already exist') {\r\n        this.setState({\r\n          showResult: 'This test already  exist',\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Description - This function display the assembly products\r\n   */\r\n  async getAssembly() {\r\n    const response = await fetch('http://localhost:5000/getAssembly');\r\n    const result = await response.json();\r\n    result.sort((a, b) => a.assemblyName.localeCompare(b.assemblyName));\r\n    // console.log(result);\r\n    this.setState({ assembly: result });\r\n    this.getAssembly();\r\n  }\r\n\r\n  /**\r\n   *Description - This function start when the page is upload and activate the function getModels\r\n   */\r\n  componentDidMount() {\r\n    this.getModels();\r\n    this.getAssembly();\r\n  }\r\n\r\n  render() {\r\n    const isCpuSelected = this.state.modelCPU === this.state.currentCpu;\r\n    const isCpuCoolerSelected =\r\n      this.state.modelCPUCooler === this.state.currentCPUCooler;\r\n    const isGpuSelected = this.state.modelGPU === this.state.currentGPU;\r\n    const isPsuSelected = this.state.modelPSU === this.state.currentPSU;\r\n    const isSsdSelected = this.state.modelSSD === this.state.currentSSD;\r\n    const isRamSelected = this.state.modelRAM === this.state.currentRAM;\r\n    const isCaseSelected = this.state.modelCase === this.state.currentCase;\r\n    const isMotherboardSelected =\r\n      this.state.modelMotherboard === this.state.currentMotherboard;\r\n\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='Test With Help' />\r\n        <section>\r\n          <form onSubmit={this.handleSubmit.bind(this)} className={style.form}>\r\n            <input\r\n              className={style.input}\r\n              type='text'\r\n              placeholder='Enter Test Name:'\r\n              value={this.state.testName}\r\n              required\r\n              onChange={e => this.setState({ testName: e.target.value })}\r\n            />\r\n\r\n            {/* motherboard */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isMotherboardSelected ? style.backgroundGreen : ''\r\n              }`}\r\n              value={this.state.modelMotherboard}\r\n              label='MOTHERBOARD'\r\n              onChange={e => {\r\n                this.setState({ modelMotherboard: e.target.value }, () => {\r\n                  for (let option of this.state.assembly) {\r\n                    if (\r\n                      this.state.modelMotherboard === option.modelMotherboard\r\n                    ) {\r\n                      this.setState({\r\n                        chosenOption: option,\r\n                        currentMotherboard: this.state.modelMotherboard,\r\n                        currentCpu: option.modelCPU,\r\n                        currentGPU: option.modelGPU,\r\n                        currentRAM: option.modelRAM,\r\n                        currentCase: option.modelCase,\r\n                      });\r\n                      this.state.selectedTest.push(this.state.modelMotherboard);\r\n                    }\r\n                  }\r\n                });\r\n              }}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a Motherboard\r\n              </option>\r\n              {this.state.motherboardArray.map(itemMotherboard => {\r\n                return (\r\n                  <option key={itemMotherboard} value={itemMotherboard}>\r\n                    {itemMotherboard}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n\r\n            {/* cpu */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isCpuSelected ? style.backgroundGreen : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelCPU}\r\n              label='CPU'\r\n              onChange={e => {\r\n                this.setState({ modelCPU: e.target.value }, () => {\r\n                  this.setState({\r\n                    currentCPUCooler: this.state.chosenOption.modelCPUCooler,\r\n                  });\r\n                  this.state.selectedTest.push(this.state.modelCPU);\r\n                });\r\n              }}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a CPU\r\n              </option>\r\n              {this.state.cpuArray.map(itemCpu => {\r\n                if (this.state.currentCpu === itemCpu) {\r\n                  return (\r\n                    <option\r\n                      key={itemCpu}\r\n                      value={itemCpu}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemCpu}\r\n                    </option>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <option key={itemCpu} value={itemCpu}>\r\n                      {itemCpu}\r\n                    </option>\r\n                  );\r\n                }\r\n              })}\r\n            </select>\r\n\r\n            {/* cpu cooler */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isCpuCoolerSelected\r\n                  ? style.backgroundGreen\r\n                  : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelCPUCooler}\r\n              label='CPU Cooler'\r\n              onChange={e => {\r\n                this.setState({ modelCPUCooler: e.target.value });\r\n                this.state.selectedTest.push(this.state.modelCPUCooler);\r\n              }}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a CPU Cooler\r\n              </option>\r\n              {[\r\n                ...this.state.cpuCoolerFanArray,\r\n                ...this.state.cpuCoolerLiquidArray,\r\n              ].map(itemCpuCooler => {\r\n                if (this.state.currentCPUCooler === itemCpuCooler) {\r\n                  return (\r\n                    <option\r\n                      key={itemCpuCooler}\r\n                      value={itemCpuCooler}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemCpuCooler}\r\n                    </option>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <option key={itemCpuCooler} value={itemCpuCooler}>\r\n                      {itemCpuCooler}\r\n                    </option>\r\n                  );\r\n                }\r\n              })}\r\n            </select>\r\n\r\n            {/* gpu */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isGpuSelected ? style.backgroundGreen : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelGPU}\r\n              label='GPU'\r\n              onChange={e => {\r\n                this.setState({ modelGPU: e.target.value }, () => {\r\n                  this.setState({\r\n                    currentPSU: this.state.chosenOption.modelPSU,\r\n                  });\r\n                  this.state.selectedTest.push(this.state.modelGPU);\r\n                });\r\n              }}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a GPU\r\n              </option>\r\n              {this.state.gpuArray.map(itemGpu => {\r\n                if (this.state.currentGPU === itemGpu) {\r\n                  return (\r\n                    <option\r\n                      key={itemGpu}\r\n                      value={itemGpu}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemGpu}\r\n                    </option>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <option key={itemGpu} value={itemGpu}>\r\n                      {itemGpu}\r\n                    </option>\r\n                  );\r\n                }\r\n              })}\r\n            </select>\r\n\r\n            {/* psu */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isPsuSelected ? style.backgroundGreen : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelPSU}\r\n              label='PSU'\r\n              onChange={e => {\r\n                this.setState({ modelPSU: e.target.value }, () => {\r\n                  this.state.selectedTest.push(this.state.modelPSU);\r\n                });\r\n              }}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a PSU\r\n              </option>\r\n              {this.state.psuArray.map(itemPsu => {\r\n                if (this.state.currentPSU === itemPsu) {\r\n                  return (\r\n                    <option\r\n                      key={itemPsu}\r\n                      value={itemPsu}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemPsu}\r\n                    </option>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <option key={itemPsu} value={itemPsu}>\r\n                      {itemPsu}\r\n                    </option>\r\n                  );\r\n                }\r\n              })}\r\n            </select>\r\n\r\n            {/* ram */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isRamSelected ? style.backgroundGreen : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelRAM}\r\n              label='RAM'\r\n              onChange={e => {\r\n                this.setState({ modelRAM: e.target.value }, () => {\r\n                  this.state.selectedTest.push(this.state.modelRAM);\r\n                });\r\n              }}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a RAM\r\n              </option>\r\n              {this.state.ramArray.map(itemRam => {\r\n                if (this.state.currentRAM === itemRam) {\r\n                  return (\r\n                    <option\r\n                      key={itemRam}\r\n                      value={itemRam}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemRam}\r\n                    </option>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <option key={itemRam} value={itemRam}>\r\n                      {itemRam}\r\n                    </option>\r\n                  );\r\n                }\r\n              })}\r\n            </select>\r\n\r\n            {/* ssd */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isSsdSelected ? style.backgroundGreen : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelSSD}\r\n              label='SSD'\r\n              onChange={e => {\r\n                this.setState({ modelSSD: e.target.value }, () => {\r\n                  this.state.selectedTest.push(this.state.modelSSD);\r\n                  \r\n                });\r\n              }}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a SSD\r\n              </option>\r\n              {[...this.state.ssdM2Array, ...this.state.ssdSataArray].map(\r\n                itemSSD => {\r\n                  return (\r\n                    <option\r\n                      key={itemSSD}\r\n                      value={itemSSD}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemSSD}\r\n                    </option>\r\n                  );\r\n                }\r\n              )}\r\n            </select>\r\n\r\n            {/* case */}\r\n            <select\r\n              className={`${style.select} ${\r\n                isCaseSelected ? style.backgroundGreen : style.backgroundRed\r\n              }`}\r\n              value={this.state.modelCase}\r\n              label='CASE'\r\n              onChange={e => {\r\n                this.setState({ modelCase: e.target.value }, () => {\r\n                  this.state.selectedTest.push(this.state.modelCase);\r\n                  this.setState({\r\n                    currentCase: this.state.modelCase,\r\n                  });\r\n                });\r\n              }}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a Case\r\n              </option>\r\n              {this.state.caseArray.map(itemCase => {\r\n                if (this.state.currentCase === itemCase) {\r\n                  return (\r\n                    <option\r\n                      key={itemCase}\r\n                      value={itemCase}\r\n                      className={style.nextComp}\r\n                    >\r\n                      {itemCase}\r\n                    </option>\r\n                  );\r\n                } else {\r\n                  return (\r\n                    <option key={itemCase} value={itemCase}>\r\n                      {itemCase}\r\n                    </option>\r\n                  );\r\n                }\r\n              })}\r\n            </select>\r\n            <Button type='submit' text='save test' />\r\n            <p className={style.showResult}>{this.state.showResult}</p>\r\n          </form>\r\n        </section>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}