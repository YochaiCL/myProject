{"ast":null,"code":"// import React, { Component } from 'react';\n// import PageLayout from '../../../layouts/pageLayout/PageLayout';\n// import Header from '../../../../commonComponents/header/Header';\n// import style from './newQuestion.module.css';\n// import Button from '../../../../commonComponents/button/Button';\n\n// /**\n//  * Description - This class add question to the server\n//  */\n// export default class NewQuestion extends Component {\n//   state = {\n//     questionName: '',\n//     questionText: '',\n//     showResult: '',\n//   };\n\n//   /**\n//    * Description - This function add the question data to the server\n//    * @param {*} e - Question data\n//    */\n//   async handleSubmit(e) {\n//     const date = new Date();\n//     let day = date.getDate();\n//     let month = date.getMonth() + 1;\n//     let year = date.getFullYear();\n\n//     const questionDate = `${day}/${month}/${year}`;\n\n//     const userId = JSON.parse(localStorage.getItem('user'));\n\n//     const dataToSend = {\n//       userId: userId._id,\n//       userEmail: userId.email,\n//       userFullName: userId.fullName,\n//       questionName: this.state.questionName,\n//       questionText: this.state.questionText,\n//       answerText: '',\n//       haveAnAnswer: false,\n//       selectedStars: 0,\n//       questionDate,\n//     };\n\n//     e.preventDefault();\n//     const questionInputData = {\n//       method: 'POST',\n//       crossDomain: true,\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Accept: 'application/json',\n//         'Accept-Control-Allow-Origin': '*',\n//       },\n//       body: JSON.stringify(dataToSend),\n//     };\n\n//     const response = await fetch(\n//       'http://localhost:5000/userQuestionAnswer/newQuestion',\n//       questionInputData\n//     );\n//     const result = await response.json();\n//     if (result.status === 'ok') {\n//       this.setState({\n//         showResult: 'The Question has been added',\n//       });\n\n//       setTimeout(() => {\n//         this.setState({\n//           questionName: '',\n//           questionText: '',\n//           showResult: '',\n//         });\n//       }, 1000);\n//     } else if (result.status === 'Question already exist') {\n//       setTimeout(() => {\n//         this.setState({\n//           showResult: 'This question name already exist',\n//         });\n//       }, 1000);\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <PageLayout>\n//         <Header h1Heading='New Question' />\n//         <section>\n//           <form onSubmit={this.handleSubmit.bind(this)} className={style.form}>\n//             <input\n//               className={style.input}\n//               type='text'\n//               placeholder='Enter Question Name:'\n//               value={this.state.questionName}\n//               required\n//               onChange={e => this.setState({ questionName: e.target.value })}\n//             />\n\n//             <textarea\n//               className={style.textArea}\n//               value={this.state.questionText}\n//               name='tarea'\n//               rows='6'\n//               cols='40'\n//               placeholder=' Write text here'\n//               required\n//               onChange={e => this.setState({ questionText: e.target.value })}\n//             ></textarea>\n\n//             <Button type='submit' text='submit' />\n//             <p className={style.showResult}>{this.state.showResult}</p>\n//           </form>\n//         </section>\n//       </PageLayout>\n//     );\n//   }\n// }","map":{"version":3,"names":[],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/userPages/pages/questionAnswerUser/newQuestion/NewQuestion.js"],"sourcesContent":["// import React, { Component } from 'react';\r\n// import PageLayout from '../../../layouts/pageLayout/PageLayout';\r\n// import Header from '../../../../commonComponents/header/Header';\r\n// import style from './newQuestion.module.css';\r\n// import Button from '../../../../commonComponents/button/Button';\r\n\r\n// /**\r\n//  * Description - This class add question to the server\r\n//  */\r\n// export default class NewQuestion extends Component {\r\n//   state = {\r\n//     questionName: '',\r\n//     questionText: '',\r\n//     showResult: '',\r\n//   };\r\n\r\n//   /**\r\n//    * Description - This function add the question data to the server\r\n//    * @param {*} e - Question data\r\n//    */\r\n//   async handleSubmit(e) {\r\n//     const date = new Date();\r\n//     let day = date.getDate();\r\n//     let month = date.getMonth() + 1;\r\n//     let year = date.getFullYear();\r\n\r\n//     const questionDate = `${day}/${month}/${year}`;\r\n\r\n//     const userId = JSON.parse(localStorage.getItem('user'));\r\n\r\n//     const dataToSend = {\r\n//       userId: userId._id,\r\n//       userEmail: userId.email,\r\n//       userFullName: userId.fullName,\r\n//       questionName: this.state.questionName,\r\n//       questionText: this.state.questionText,\r\n//       answerText: '',\r\n//       haveAnAnswer: false,\r\n//       selectedStars: 0,\r\n//       questionDate,\r\n//     };\r\n\r\n//     e.preventDefault();\r\n//     const questionInputData = {\r\n//       method: 'POST',\r\n//       crossDomain: true,\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         Accept: 'application/json',\r\n//         'Accept-Control-Allow-Origin': '*',\r\n//       },\r\n//       body: JSON.stringify(dataToSend),\r\n//     };\r\n\r\n//     const response = await fetch(\r\n//       'http://localhost:5000/userQuestionAnswer/newQuestion',\r\n//       questionInputData\r\n//     );\r\n//     const result = await response.json();\r\n//     if (result.status === 'ok') {\r\n//       this.setState({\r\n//         showResult: 'The Question has been added',\r\n//       });\r\n\r\n//       setTimeout(() => {\r\n//         this.setState({\r\n//           questionName: '',\r\n//           questionText: '',\r\n//           showResult: '',\r\n//         });\r\n//       }, 1000);\r\n//     } else if (result.status === 'Question already exist') {\r\n//       setTimeout(() => {\r\n//         this.setState({\r\n//           showResult: 'This question name already exist',\r\n//         });\r\n//       }, 1000);\r\n//     }\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <PageLayout>\r\n//         <Header h1Heading='New Question' />\r\n//         <section>\r\n//           <form onSubmit={this.handleSubmit.bind(this)} className={style.form}>\r\n//             <input\r\n//               className={style.input}\r\n//               type='text'\r\n//               placeholder='Enter Question Name:'\r\n//               value={this.state.questionName}\r\n//               required\r\n//               onChange={e => this.setState({ questionName: e.target.value })}\r\n//             />\r\n\r\n//             <textarea\r\n//               className={style.textArea}\r\n//               value={this.state.questionText}\r\n//               name='tarea'\r\n//               rows='6'\r\n//               cols='40'\r\n//               placeholder=' Write text here'\r\n//               required\r\n//               onChange={e => this.setState({ questionText: e.target.value })}\r\n//             ></textarea>\r\n\r\n//             <Button type='submit' text='submit' />\r\n//             <p className={style.showResult}>{this.state.showResult}</p>\r\n//           </form>\r\n//         </section>\r\n//       </PageLayout>\r\n//     );\r\n//   }\r\n// }\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}