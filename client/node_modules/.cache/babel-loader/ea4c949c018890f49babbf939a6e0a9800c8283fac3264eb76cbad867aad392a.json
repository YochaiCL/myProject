{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\adminPages\\\\pages\\\\update\\\\updateAssemblies\\\\UpdateAssemblies.js\";\nimport React, { Component } from 'react';\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\nimport Header from '../../../../pageSettings/header/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UpdateAssemblies extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      assembly: [{\n        assemblyName: 'Loading data...'\n      }],\n      showData: false,\n      selectIndex: null,\n      assemblyName: '',\n      modelCase: '',\n      modelMotherboard: '',\n      modelCPU: '',\n      modelCPUCooler: '',\n      modelGPU: '',\n      modelPSU: '',\n      modelRAM: '',\n      modelSSD: '',\n      cpuArray: [],\n      // Array to store CPU models\n      gpuArray: [],\n      // Array to store GPU models\n      caseArray: [],\n      // Array to store Case models\n      cpuCoolerFanArray: [],\n      // Array to store CPU COOLER FAN models\n      cpuCoolerLiquidArray: [],\n      // Array to store CPU COOLER LIQUID models\n      fanArray: [],\n      // Array to store FAN models\n      motherboardArray: [],\n      // Array to store MOTHERBOARD models\n      psuArray: [],\n      // Array to store PSU models\n      ramArray: [],\n      // Array to store RAM models\n      ssdM2Array: [],\n      // Array to store SSD M2 models\n      ssdSataArray: [],\n      // Array to store SSD SATA models\n      showResult: ''\n    };\n    this.handelClick = index => {\n      this.setState({\n        showData: true,\n        selectIndex: index\n      });\n    };\n  }\n  // Asynchronous function to fetch component models\n  async getModels() {\n    // Fetching component models from the server\n    const response = await fetch('http://localhost:5000/showComponentsData/modals');\n    // Parsing the response as JSON\n    const result = await response.json();\n    // Updating the CPU array in the component state with fetched models\n    this.setState({\n      cpuArray: result.cpu\n    });\n    // Updating the GPU array in the component state with fetched models\n    this.setState({\n      gpuArray: result.gpu\n    });\n    // Updating the CASE array in the component state with fetched models\n    this.setState({\n      caseArray: result.case\n    });\n    // Updating the CPU COOLER FAN array in the component state with fetched models\n    this.setState({\n      cpuCoolerFanArray: result.cpuCoolerFan\n    });\n    // Updating the CPU COOLER LIQUID array in the component state with fetched models\n    this.setState({\n      cpuCoolerLiquidArray: result.cpuCoolerLiquid\n    });\n    // Updating the MOTHERBOARD array in the component state with fetched models\n    this.setState({\n      motherboardArray: result.motherboard\n    });\n    // Updating the PSU array in the component state with fetched models\n    this.setState({\n      psuArray: result.psu\n    });\n    // Updating the RAM array in the component state with fetched models\n    this.setState({\n      ramArray: result.ram\n    });\n    // Updating the SSD M2 array in the component state with fetched models\n    this.setState({\n      ssdM2Array: result.ssdM2\n    });\n    // Updating the SSD SATA array in the component state with fetched models\n    this.setState({\n      ssdSataArray: result.ssdSata\n    });\n  }\n\n  // Asynchronous function to handle form submission\n  async handleSubmit(e) {\n    // Preventing the default form submission behavior\n    e.preventDefault();\n    const options = {\n      method: 'POST',\n      crossDomain: true,\n      // Setting headers for the HTTP request\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      // Converting the state object to JSON and setting it as the request body\n      body: JSON.stringify(this.state)\n    };\n    const response = await fetch('http://localhost:5000/addAssemblies', options);\n    // Parsing the response as JSON\n    const result = await response.json();\n    console.log(result);\n    // Checking if the request was successful\n    if (result.status === 'ok') {\n      this.setState({\n        showResult: 'The Assembly has been added'\n      });\n    } else if (result.status === 'Assembly already exist') {\n      this.setState({\n        showResult: 'This assembly already  exist'\n      });\n    }\n  }\n\n  // Lifecycle method called after the component is mounted\n  componentDidMount() {\n    // Fetching the component models when the component is mounted\n    this.getModels();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: /*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"Update Assemblies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","PageLayout","Header","UpdateAssemblies","state","assembly","assemblyName","showData","selectIndex","modelCase","modelMotherboard","modelCPU","modelCPUCooler","modelGPU","modelPSU","modelRAM","modelSSD","cpuArray","gpuArray","caseArray","cpuCoolerFanArray","cpuCoolerLiquidArray","fanArray","motherboardArray","psuArray","ramArray","ssdM2Array","ssdSataArray","showResult","handelClick","index","setState","getModels","response","fetch","result","json","cpu","gpu","case","cpuCoolerFan","cpuCoolerLiquid","motherboard","psu","ram","ssdM2","ssdSata","handleSubmit","e","preventDefault","options","method","crossDomain","headers","Accept","body","JSON","stringify","console","log","status","componentDidMount","render"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/adminPages/pages/update/updateAssemblies/UpdateAssemblies.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport PageLayout from '../../../layouts/pageLayout/PageLayout'\r\nimport Header from '../../../../pageSettings/header/Header'\r\n\r\nexport default class UpdateAssemblies extends Component {\r\n  state = {\r\n    assembly: [{ assemblyName: 'Loading data...' }],\r\n    showData: false,\r\n    selectIndex: null,\r\n    assemblyName: '',\r\n    modelCase: '',\r\n    modelMotherboard: '',\r\n    modelCPU: '',\r\n    modelCPUCooler: '',\r\n    modelGPU: '',\r\n    modelPSU: '',\r\n    modelRAM: '',\r\n    modelSSD: '',\r\n    cpuArray: [], // Array to store CPU models\r\n    gpuArray: [], // Array to store GPU models\r\n    caseArray: [], // Array to store Case models\r\n    cpuCoolerFanArray: [], // Array to store CPU COOLER FAN models\r\n    cpuCoolerLiquidArray: [], // Array to store CPU COOLER LIQUID models\r\n    fanArray: [], // Array to store FAN models\r\n    motherboardArray: [], // Array to store MOTHERBOARD models\r\n    psuArray: [], // Array to store PSU models\r\n    ramArray: [], // Array to store RAM models\r\n    ssdM2Array: [], // Array to store SSD M2 models\r\n    ssdSataArray: [], // Array to store SSD SATA models\r\n    showResult: '',\r\n  };\r\n\r\n  // Asynchronous function to fetch component models\r\n  async getModels() {\r\n    // Fetching component models from the server\r\n    const response = await fetch(\r\n      'http://localhost:5000/showComponentsData/modals'\r\n    );\r\n    // Parsing the response as JSON\r\n    const result = await response.json();\r\n    // Updating the CPU array in the component state with fetched models\r\n    this.setState({ cpuArray: result.cpu });\r\n    // Updating the GPU array in the component state with fetched models\r\n    this.setState({ gpuArray: result.gpu });\r\n    // Updating the CASE array in the component state with fetched models\r\n    this.setState({ caseArray: result.case });\r\n    // Updating the CPU COOLER FAN array in the component state with fetched models\r\n    this.setState({ cpuCoolerFanArray: result.cpuCoolerFan });\r\n    // Updating the CPU COOLER LIQUID array in the component state with fetched models\r\n    this.setState({ cpuCoolerLiquidArray: result.cpuCoolerLiquid });\r\n    // Updating the MOTHERBOARD array in the component state with fetched models\r\n    this.setState({ motherboardArray: result.motherboard });\r\n    // Updating the PSU array in the component state with fetched models\r\n    this.setState({ psuArray: result.psu });\r\n    // Updating the RAM array in the component state with fetched models\r\n    this.setState({ ramArray: result.ram });\r\n    // Updating the SSD M2 array in the component state with fetched models\r\n    this.setState({ ssdM2Array: result.ssdM2 });\r\n    // Updating the SSD SATA array in the component state with fetched models\r\n    this.setState({ ssdSataArray: result.ssdSata });\r\n  }\r\n\r\n  // Asynchronous function to handle form submission\r\n  async handleSubmit(e) {\r\n    // Preventing the default form submission behavior\r\n    e.preventDefault();\r\n    const options = {\r\n      method: 'POST',\r\n      crossDomain: true,\r\n      // Setting headers for the HTTP request\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'Accept-Control-Allow-Origin': '*',\r\n      },\r\n      // Converting the state object to JSON and setting it as the request body\r\n      body: JSON.stringify(this.state),\r\n    };\r\n    const response = await fetch(\r\n      'http://localhost:5000/addAssemblies',\r\n      options\r\n    );\r\n    // Parsing the response as JSON\r\n    const result = await response.json();\r\n    console.log(result);\r\n    // Checking if the request was successful\r\n    if (result.status === 'ok') {\r\n      this.setState({\r\n        showResult: 'The Assembly has been added',\r\n      });\r\n    } else if (result.status === 'Assembly already exist') {\r\n      this.setState({\r\n        showResult: 'This assembly already  exist',\r\n      });\r\n    }\r\n  }\r\n\r\n  // Lifecycle method called after the component is mounted\r\n  componentDidMount() {\r\n    // Fetching the component models when the component is mounted\r\n    this.getModels();\r\n  }\r\n  handelClick = index => {\r\n    this.setState({\r\n      showData: true,\r\n      selectIndex: index,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='Update Assemblies' />\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}