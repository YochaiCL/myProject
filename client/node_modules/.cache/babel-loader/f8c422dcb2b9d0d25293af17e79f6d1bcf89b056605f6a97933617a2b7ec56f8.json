{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yocha\\\\OneDrive\\\\Desktop\\\\gitHubProjects\\\\myProject\\\\myProject\\\\client\\\\src\\\\components\\\\adminPages\\\\pages\\\\update\\\\updateAssemblies\\\\UpdateAssemblies.js\";\nimport React, { Component } from 'react';\nimport PageLayout from '../../../layouts/pageLayout/PageLayout';\nimport Header from '../../../../pageSettings/header/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class UpdateAssemblies extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      assembly: [{\n        assemblyName: 'Loading data...'\n      }],\n      showData: false,\n      selectIndex: null,\n      assemblyName: '',\n      modelCase: '',\n      modelMotherboard: '',\n      modelCPU: '',\n      modelCPUCooler: '',\n      modelGPU: '',\n      modelPSU: '',\n      modelRAM: '',\n      modelSSD: '',\n      cpuArray: [],\n      // Array to store CPU models\n      gpuArray: [],\n      // Array to store GPU models\n      caseArray: [],\n      // Array to store Case models\n      cpuCoolerFanArray: [],\n      // Array to store CPU COOLER FAN models\n      cpuCoolerLiquidArray: [],\n      // Array to store CPU COOLER LIQUID models\n      fanArray: [],\n      // Array to store FAN models\n      motherboardArray: [],\n      // Array to store MOTHERBOARD models\n      psuArray: [],\n      // Array to store PSU models\n      ramArray: [],\n      // Array to store RAM models\n      ssdM2Array: [],\n      // Array to store SSD M2 models\n      ssdSataArray: [],\n      // Array to store SSD SATA models\n      showResult: ''\n    };\n    this.handelClick = index => {\n      this.setState({\n        showData: true,\n        selectIndex: index\n      });\n    };\n  }\n  async getAssembly() {\n    const response = await fetch('http://localhost:5000/getAssemblies/assemblies');\n    const result = await response.json();\n    console.log(result);\n    this.setState({\n      assembly: result\n    });\n  }\n\n  // Asynchronous function to fetch component models\n  async getModels() {\n    // Fetching component models from the server\n    const response = await fetch('http://localhost:5000/showComponentsData/modals');\n    // Parsing the response as JSON\n    const result = await response.json();\n    // Updating the CPU array in the component state with fetched models\n    this.setState({\n      cpuArray: result.cpu\n    });\n    // Updating the GPU array in the component state with fetched models\n    this.setState({\n      gpuArray: result.gpu\n    });\n    // Updating the CASE array in the component state with fetched models\n    this.setState({\n      caseArray: result.case\n    });\n    // Updating the CPU COOLER FAN array in the component state with fetched models\n    this.setState({\n      cpuCoolerFanArray: result.cpuCoolerFan\n    });\n    // Updating the CPU COOLER LIQUID array in the component state with fetched models\n    this.setState({\n      cpuCoolerLiquidArray: result.cpuCoolerLiquid\n    });\n    // Updating the MOTHERBOARD array in the component state with fetched models\n    this.setState({\n      motherboardArray: result.motherboard\n    });\n    // Updating the PSU array in the component state with fetched models\n    this.setState({\n      psuArray: result.psu\n    });\n    // Updating the RAM array in the component state with fetched models\n    this.setState({\n      ramArray: result.ram\n    });\n    // Updating the SSD M2 array in the component state with fetched models\n    this.setState({\n      ssdM2Array: result.ssdM2\n    });\n    // Updating the SSD SATA array in the component state with fetched models\n    this.setState({\n      ssdSataArray: result.ssdSata\n    });\n  }\n\n  // Asynchronous function to handle form submission\n  async handleSubmit(e) {\n    // Preventing the default form submission behavior\n    e.preventDefault();\n    const options = {\n      method: 'POST',\n      crossDomain: true,\n      // Setting headers for the HTTP request\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        'Accept-Control-Allow-Origin': '*'\n      },\n      // Converting the state object to JSON and setting it as the request body\n      body: JSON.stringify(this.state)\n    };\n    const response = await fetch('http://localhost:5000/addAssemblies', options);\n    // Parsing the response as JSON\n    const result = await response.json();\n    console.log(result);\n    // Checking if the request was successful\n    if (result.status === 'ok') {\n      this.setState({\n        showResult: 'The Assembly has been added'\n      });\n    } else if (result.status === 'Assembly already exist') {\n      this.setState({\n        showResult: 'This assembly already  exist'\n      });\n    }\n  }\n\n  // Lifecycle method called after the component is mounted\n  componentDidMount() {\n    // Fetching the component models when the component is mounted\n    this.getModels();\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(PageLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        h1Heading: \"Update Assemblies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit.bind(this),\n          className: style.form,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter Assembly Name:\",\n            value: this.state.assemblyName,\n            required: true,\n            onChange: e => this.setState({\n              assemblyName: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.state.modelMotherboard,\n            label: \"MOTHERBOARD\",\n            onChange: e => this.setState({\n              modelMotherboard: e.target.value\n            }),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a Motherboard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this), this.state.motherboardArray.map(itemMotherboard => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: itemMotherboard,\n                children: itemMotherboard\n              }, itemMotherboard, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.state.modelCPU,\n            label: \"CPU\",\n            onChange: e => this.setState({\n              modelCPU: e.target.value\n            }),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a CPU\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this), this.state.cpuArray.map(itemCpu => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: itemCpu,\n                children: itemCpu\n              }, itemCpu, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.state.modelCPUCooler,\n            label: \"CPU Cooler\",\n            onChange: e => this.setState({\n              modelCPUCooler: e.target.value\n            }),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a CPU Cooler\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this), [...this.state.cpuCoolerFanArray, ...this.state.cpuCoolerLiquidArray].map(itemCpuCooler => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: itemCpuCooler,\n                children: itemCpuCooler\n              }, itemCpuCooler, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.state.modelGPU,\n            label: \"GPU\",\n            onChange: e => this.setState({\n              modelGPU: e.target.value\n            }),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a GPU\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this), this.state.gpuArray.map(itemGpu => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: itemGpu,\n                children: itemGpu\n              }, itemGpu, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.state.modelPSU,\n            label: \"PSU\",\n            onChange: e => this.setState({\n              modelPSU: e.target.value\n            }),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a PSU\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this), this.state.psuArray.map(itemPsu => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: itemPsu,\n                children: itemPsu\n              }, itemPsu, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.state.modelRAM,\n            label: \"RAM\",\n            onChange: e => this.setState({\n              modelRAM: e.target.value\n            }),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a RAM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this), this.state.ramArray.map(itemRam => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: itemRam,\n                children: itemRam\n              }, itemRam, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.state.modelSSD,\n            label: \"SSD\",\n            onChange: e => this.setState({\n              modelSSD: e.target.value\n            }),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a SSD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 15\n            }, this), [...this.state.ssdM2Array, ...this.state.ssdSataArray].map(itemSSD => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: itemSSD,\n                children: itemSSD\n              }, itemSSD, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.state.modelCase,\n            label: \"CASE\",\n            onChange: e => this.setState({\n              modelCase: e.target.value\n            }),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select a Case\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this), this.state.caseArray.map(itemCase => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: itemCase,\n                children: itemCase\n              }, itemCase, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            text: \"submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: this.state.showResult\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","PageLayout","Header","UpdateAssemblies","state","assembly","assemblyName","showData","selectIndex","modelCase","modelMotherboard","modelCPU","modelCPUCooler","modelGPU","modelPSU","modelRAM","modelSSD","cpuArray","gpuArray","caseArray","cpuCoolerFanArray","cpuCoolerLiquidArray","fanArray","motherboardArray","psuArray","ramArray","ssdM2Array","ssdSataArray","showResult","handelClick","index","setState","getAssembly","response","fetch","result","json","console","log","getModels","cpu","gpu","case","cpuCoolerFan","cpuCoolerLiquid","motherboard","psu","ram","ssdM2","ssdSata","handleSubmit","e","preventDefault","options","method","crossDomain","headers","Accept","body","JSON","stringify","status","componentDidMount","render","bind","style","form","target","value","map","itemMotherboard","itemCpu","itemCpuCooler","itemGpu","itemPsu","itemRam","itemSSD","itemCase"],"sources":["C:/Users/yocha/OneDrive/Desktop/gitHubProjects/myProject/myProject/client/src/components/adminPages/pages/update/updateAssemblies/UpdateAssemblies.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport PageLayout from '../../../layouts/pageLayout/PageLayout'\r\nimport Header from '../../../../pageSettings/header/Header'\r\n\r\nexport default class UpdateAssemblies extends Component {\r\n  state = {\r\n    assembly: [{ assemblyName: 'Loading data...' }],\r\n    showData: false,\r\n    selectIndex: null,\r\n    assemblyName: '',\r\n    modelCase: '',\r\n    modelMotherboard: '',\r\n    modelCPU: '',\r\n    modelCPUCooler: '',\r\n    modelGPU: '',\r\n    modelPSU: '',\r\n    modelRAM: '',\r\n    modelSSD: '',\r\n    cpuArray: [], // Array to store CPU models\r\n    gpuArray: [], // Array to store GPU models\r\n    caseArray: [], // Array to store Case models\r\n    cpuCoolerFanArray: [], // Array to store CPU COOLER FAN models\r\n    cpuCoolerLiquidArray: [], // Array to store CPU COOLER LIQUID models\r\n    fanArray: [], // Array to store FAN models\r\n    motherboardArray: [], // Array to store MOTHERBOARD models\r\n    psuArray: [], // Array to store PSU models\r\n    ramArray: [], // Array to store RAM models\r\n    ssdM2Array: [], // Array to store SSD M2 models\r\n    ssdSataArray: [], // Array to store SSD SATA models\r\n    showResult: '',\r\n  };\r\n\r\n  async getAssembly() {\r\n    const response = await fetch(\r\n      'http://localhost:5000/getAssemblies/assemblies'\r\n    );\r\n    const result = await response.json();\r\n    console.log(result);\r\n    this.setState({ assembly: result });\r\n  }\r\n\r\n  // Asynchronous function to fetch component models\r\n  async getModels() {\r\n    // Fetching component models from the server\r\n    const response = await fetch(\r\n      'http://localhost:5000/showComponentsData/modals'\r\n    );\r\n    // Parsing the response as JSON\r\n    const result = await response.json();\r\n    // Updating the CPU array in the component state with fetched models\r\n    this.setState({ cpuArray: result.cpu });\r\n    // Updating the GPU array in the component state with fetched models\r\n    this.setState({ gpuArray: result.gpu });\r\n    // Updating the CASE array in the component state with fetched models\r\n    this.setState({ caseArray: result.case });\r\n    // Updating the CPU COOLER FAN array in the component state with fetched models\r\n    this.setState({ cpuCoolerFanArray: result.cpuCoolerFan });\r\n    // Updating the CPU COOLER LIQUID array in the component state with fetched models\r\n    this.setState({ cpuCoolerLiquidArray: result.cpuCoolerLiquid });\r\n    // Updating the MOTHERBOARD array in the component state with fetched models\r\n    this.setState({ motherboardArray: result.motherboard });\r\n    // Updating the PSU array in the component state with fetched models\r\n    this.setState({ psuArray: result.psu });\r\n    // Updating the RAM array in the component state with fetched models\r\n    this.setState({ ramArray: result.ram });\r\n    // Updating the SSD M2 array in the component state with fetched models\r\n    this.setState({ ssdM2Array: result.ssdM2 });\r\n    // Updating the SSD SATA array in the component state with fetched models\r\n    this.setState({ ssdSataArray: result.ssdSata });\r\n  }\r\n\r\n  // Asynchronous function to handle form submission\r\n  async handleSubmit(e) {\r\n    // Preventing the default form submission behavior\r\n    e.preventDefault();\r\n    const options = {\r\n      method: 'POST',\r\n      crossDomain: true,\r\n      // Setting headers for the HTTP request\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n        'Accept-Control-Allow-Origin': '*',\r\n      },\r\n      // Converting the state object to JSON and setting it as the request body\r\n      body: JSON.stringify(this.state),\r\n    };\r\n    const response = await fetch(\r\n      'http://localhost:5000/addAssemblies',\r\n      options\r\n    );\r\n    // Parsing the response as JSON\r\n    const result = await response.json();\r\n    console.log(result);\r\n    // Checking if the request was successful\r\n    if (result.status === 'ok') {\r\n      this.setState({\r\n        showResult: 'The Assembly has been added',\r\n      });\r\n    } else if (result.status === 'Assembly already exist') {\r\n      this.setState({\r\n        showResult: 'This assembly already  exist',\r\n      });\r\n    }\r\n  }\r\n\r\n  // Lifecycle method called after the component is mounted\r\n  componentDidMount() {\r\n    // Fetching the component models when the component is mounted\r\n    this.getModels();\r\n  }\r\n  handelClick = index => {\r\n    this.setState({\r\n      showData: true,\r\n      selectIndex: index,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <PageLayout>\r\n        <Header h1Heading='Update Assemblies' />\r\n\r\n        <section>\r\n          <form onSubmit={this.handleSubmit.bind(this)} className={style.form}>\r\n            <input\r\n              type='text'\r\n              placeholder='Enter Assembly Name:'\r\n              value={this.state.assemblyName}\r\n              required\r\n              onChange={e => this.setState({ assemblyName: e.target.value })}\r\n            />\r\n\r\n            <select\r\n              value={this.state.modelMotherboard}\r\n              label='MOTHERBOARD'\r\n              onChange={e =>\r\n                this.setState({ modelMotherboard: e.target.value })\r\n              }\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a Motherboard\r\n              </option>\r\n              {this.state.motherboardArray.map(itemMotherboard => {\r\n                return (\r\n                  <option key={itemMotherboard} value={itemMotherboard}>\r\n                    {itemMotherboard}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n\r\n            <select\r\n              value={this.state.modelCPU}\r\n              label='CPU'\r\n              onChange={e => this.setState({ modelCPU: e.target.value })}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a CPU\r\n              </option>\r\n              {this.state.cpuArray.map(itemCpu => {\r\n                return (\r\n                  <option key={itemCpu} value={itemCpu}>\r\n                    {itemCpu}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n\r\n            <select\r\n              value={this.state.modelCPUCooler}\r\n              label='CPU Cooler'\r\n              onChange={e => this.setState({ modelCPUCooler: e.target.value })}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a CPU Cooler\r\n              </option>\r\n              {[\r\n                ...this.state.cpuCoolerFanArray,\r\n                ...this.state.cpuCoolerLiquidArray,\r\n              ].map(itemCpuCooler => {\r\n                return (\r\n                  <option key={itemCpuCooler} value={itemCpuCooler}>\r\n                    {itemCpuCooler}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n\r\n            <select\r\n              value={this.state.modelGPU}\r\n              label='GPU'\r\n              onChange={e => this.setState({ modelGPU: e.target.value })}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a GPU\r\n              </option>\r\n              {this.state.gpuArray.map(itemGpu => {\r\n                return (\r\n                  <option key={itemGpu} value={itemGpu}>\r\n                    {itemGpu}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n\r\n            <select\r\n              value={this.state.modelPSU}\r\n              label='PSU'\r\n              onChange={e => this.setState({ modelPSU: e.target.value })}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a PSU\r\n              </option>\r\n              {this.state.psuArray.map(itemPsu => {\r\n                return (\r\n                  <option key={itemPsu} value={itemPsu}>\r\n                    {itemPsu}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n\r\n            <select\r\n              value={this.state.modelRAM}\r\n              label='RAM'\r\n              onChange={e => this.setState({ modelRAM: e.target.value })}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a RAM\r\n              </option>\r\n              {this.state.ramArray.map(itemRam => {\r\n                return (\r\n                  <option key={itemRam} value={itemRam}>\r\n                    {itemRam}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n\r\n            <select\r\n              value={this.state.modelSSD}\r\n              label='SSD'\r\n              onChange={e => this.setState({ modelSSD: e.target.value })}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a SSD\r\n              </option>\r\n              {[...this.state.ssdM2Array, ...this.state.ssdSataArray].map(\r\n                itemSSD => {\r\n                  return (\r\n                    <option key={itemSSD} value={itemSSD}>\r\n                      {itemSSD}\r\n                    </option>\r\n                  );\r\n                }\r\n              )}\r\n            </select>\r\n\r\n            <select\r\n              value={this.state.modelCase}\r\n              label='CASE'\r\n              onChange={e => this.setState({ modelCase: e.target.value })}\r\n              required\r\n            >\r\n              <option value='' disabled>\r\n                Select a Case\r\n              </option>\r\n              {this.state.caseArray.map(itemCase => {\r\n                return (\r\n                  <option key={itemCase} value={itemCase}>\r\n                    {itemCase}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n\r\n            <Button type='submit' text='submit' />\r\n            <p>{this.state.showResult}</p>\r\n          </form>\r\n        </section>\r\n      </PageLayout>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}